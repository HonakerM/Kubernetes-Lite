/*
cgo stubs for package clientcmd.
File is generated by gopy. Do not edit.
gopy pkg k8s.io/client-go/tools/clientcmd
*/

package main

/*

#cgo CFLAGS: "-I/usr/local/opt/python@3.11/Frameworks/Python.framework/Versions/3.11/include/python3.11" -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: "-L/usr/local/opt/python@3.11/Frameworks/Python.framework/Versions/3.11/lib" "-lpython3.11" -ldl  -framework CoreFoundation

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"encoding"
	"flag"
	"io"
	"net"
	"net/http"
	"reflect"
	"time"

	"github.com/gogo/protobuf/proto"
	"github.com/spf13/pflag"
	"k8s.io/apimachinery/pkg/conversion"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/auth"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/tools/clientcmd/api"
	"k8s.io/client-go/tools/clientcmd/api/latest"
	v1 "k8s.io/client-go/tools/clientcmd/api/v1"
	"k8s.io/client-go/transport"
	"k8s.io/client-go/util/flowcontrol"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: clientcmd below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for pointer handles for type: *flag.Flag
func ptrFromHandle_Ptr_flag_Flag(h CGoHandle) *flag.Flag {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*flag.Flag")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(flag.Flag{})).(*flag.Flag)
}
func handleFromPtr_Ptr_flag_Flag(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*flag.Flag", p))
}

// Converters for pointer handles for type: *flag.FlagSet
func ptrFromHandle_Ptr_flag_FlagSet(h CGoHandle) *flag.FlagSet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*flag.FlagSet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(flag.FlagSet{})).(*flag.FlagSet)
}
func handleFromPtr_Ptr_flag_FlagSet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*flag.FlagSet", p))
}

// Converters for pointer handles for type: *pflag.Flag
func ptrFromHandle_Ptr_pflag_Flag(h CGoHandle) *pflag.Flag {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*pflag.Flag")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(pflag.Flag{})).(*pflag.Flag)
}
func handleFromPtr_Ptr_pflag_Flag(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*pflag.Flag", p))
}

// Converters for pointer handles for type: *pflag.FlagSet
func ptrFromHandle_Ptr_pflag_FlagSet(h CGoHandle) *pflag.FlagSet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*pflag.FlagSet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(pflag.FlagSet{})).(*pflag.FlagSet)
}
func handleFromPtr_Ptr_pflag_FlagSet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*pflag.FlagSet", p))
}

// Converters for pointer handles for type: *conversion.Converter
func ptrFromHandle_Ptr_conversion_Converter(h CGoHandle) *conversion.Converter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*conversion.Converter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(conversion.Converter{})).(*conversion.Converter)
}
func handleFromPtr_Ptr_conversion_Converter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*conversion.Converter", p))
}

// Converters for pointer handles for type: *conversion.Meta
func ptrFromHandle_Ptr_conversion_Meta(h CGoHandle) *conversion.Meta {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*conversion.Meta")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(conversion.Meta{})).(*conversion.Meta)
}
func handleFromPtr_Ptr_conversion_Meta(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*conversion.Meta", p))
}

// Converters for pointer handles for type: *runtime.RawExtension
func ptrFromHandle_Ptr_runtime_RawExtension(h CGoHandle) *runtime.RawExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*runtime.RawExtension")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.RawExtension{})).(*runtime.RawExtension)
}
func handleFromPtr_Ptr_runtime_RawExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*runtime.RawExtension", p))
}

// Converters for pointer handles for type: *runtime.Scheme
func ptrFromHandle_Ptr_runtime_Scheme(h CGoHandle) *runtime.Scheme {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*runtime.Scheme")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Scheme{})).(*runtime.Scheme)
}
func handleFromPtr_Ptr_runtime_Scheme(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*runtime.Scheme", p))
}

// Converters for pointer handles for type: *rest.Config
func ptrFromHandle_Ptr_rest_Config(h CGoHandle) *rest.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*rest.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(rest.Config{})).(*rest.Config)
}
func handleFromPtr_Ptr_rest_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*rest.Config", p))
}

// Converters for pointer handles for type: *auth.Info
func ptrFromHandle_Ptr_auth_Info(h CGoHandle) *auth.Info {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*auth.Info")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(auth.Info{})).(*auth.Info)
}
func handleFromPtr_Ptr_auth_Info(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*auth.Info", p))
}

// Converters for pointer handles for type: *transport.Config
func ptrFromHandle_Ptr_transport_Config(h CGoHandle) *transport.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*transport.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.Config{})).(*transport.Config)
}
func handleFromPtr_Ptr_transport_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*transport.Config", p))
}

// Converters for pointer handles for type: *transport.DialHolder
func ptrFromHandle_Ptr_transport_DialHolder(h CGoHandle) *transport.DialHolder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*transport.DialHolder")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.DialHolder{})).(*transport.DialHolder)
}
func handleFromPtr_Ptr_transport_DialHolder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*transport.DialHolder", p))
}

// Converters for pointer handles for type: *transport.GetCertHolder
func ptrFromHandle_Ptr_transport_GetCertHolder(h CGoHandle) *transport.GetCertHolder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*transport.GetCertHolder")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.GetCertHolder{})).(*transport.GetCertHolder)
}
func handleFromPtr_Ptr_transport_GetCertHolder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*transport.GetCertHolder", p))
}

// Converters for pointer handles for type: *net.IP
func ptrFromHandle_Ptr_net_IP(h CGoHandle) *net.IP {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*net.IP")
	if p == nil {
		return nil
	}
	return p.(*net.IP)
}
func handleFromPtr_Ptr_net_IP(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*net.IP", p))
}

// Converters for pointer handles for type: *net.IPMask
func ptrFromHandle_Ptr_net_IPMask(h CGoHandle) *net.IPMask {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*net.IPMask")
	if p == nil {
		return nil
	}
	return p.(*net.IPMask)
}
func handleFromPtr_Ptr_net_IPMask(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*net.IPMask", p))
}

// Converters for pointer handles for type: *net.IPNet
func ptrFromHandle_Ptr_net_IPNet(h CGoHandle) *net.IPNet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*net.IPNet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(net.IPNet{})).(*net.IPNet)
}
func handleFromPtr_Ptr_net_IPNet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*net.IPNet", p))
}

// Converters for pointer handles for type: *time.Duration
func ptrFromHandle_Ptr_time_Duration(h CGoHandle) *time.Duration {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*time.Duration")
	if p == nil {
		return nil
	}
	return p.(*time.Duration)
}
func handleFromPtr_Ptr_time_Duration(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*time.Duration", p))
}

// Converters for pointer handles for type: encoding.TextMarshaler
func ptrFromHandle_encoding_TextMarshaler(h CGoHandle) encoding.TextMarshaler {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "encoding.TextMarshaler")
	if p == nil {
		return nil
	}
	return p.(encoding.TextMarshaler)
}
func handleFromPtr_encoding_TextMarshaler(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("encoding.TextMarshaler", p))
}

// Converters for pointer handles for type: encoding.TextUnmarshaler
func ptrFromHandle_encoding_TextUnmarshaler(h CGoHandle) encoding.TextUnmarshaler {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "encoding.TextUnmarshaler")
	if p == nil {
		return nil
	}
	return p.(encoding.TextUnmarshaler)
}
func handleFromPtr_encoding_TextUnmarshaler(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("encoding.TextUnmarshaler", p))
}

// Converters for non-pointer handles for type: flag.Flag
func ptrFromHandle_flag_Flag(h CGoHandle) *flag.Flag {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "flag.Flag")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(flag.Flag{})).(*flag.Flag)
}
func handleFromPtr_flag_Flag(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("flag.Flag", p))
}

// Converters for non-pointer handles for type: flag.FlagSet
func ptrFromHandle_flag_FlagSet(h CGoHandle) *flag.FlagSet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "flag.FlagSet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(flag.FlagSet{})).(*flag.FlagSet)
}
func handleFromPtr_flag_FlagSet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("flag.FlagSet", p))
}

// Converters for pointer handles for type: flag.Value
func ptrFromHandle_flag_Value(h CGoHandle) flag.Value {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "flag.Value")
	if p == nil {
		return nil
	}
	return p.(flag.Value)
}
func handleFromPtr_flag_Value(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("flag.Value", p))
}

// Converters for pointer handles for type: proto.Message
func ptrFromHandle_proto_Message(h CGoHandle) proto.Message {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "proto.Message")
	if p == nil {
		return nil
	}
	return p.(proto.Message)
}
func handleFromPtr_proto_Message(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("proto.Message", p))
}

// Converters for non-pointer handles for type: pflag.Flag
func ptrFromHandle_pflag_Flag(h CGoHandle) *pflag.Flag {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "pflag.Flag")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(pflag.Flag{})).(*pflag.Flag)
}
func handleFromPtr_pflag_Flag(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("pflag.Flag", p))
}

// Converters for non-pointer handles for type: pflag.FlagSet
func ptrFromHandle_pflag_FlagSet(h CGoHandle) *pflag.FlagSet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "pflag.FlagSet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(pflag.FlagSet{})).(*pflag.FlagSet)
}
func handleFromPtr_pflag_FlagSet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("pflag.FlagSet", p))
}

// Converters for non-pointer handles for type: pflag.ParseErrorsWhitelist
func ptrFromHandle_pflag_ParseErrorsWhitelist(h CGoHandle) *pflag.ParseErrorsWhitelist {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "pflag.ParseErrorsWhitelist")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(pflag.ParseErrorsWhitelist{})).(*pflag.ParseErrorsWhitelist)
}
func handleFromPtr_pflag_ParseErrorsWhitelist(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("pflag.ParseErrorsWhitelist", p))
}

// Converters for pointer handles for type: pflag.Value
func ptrFromHandle_pflag_Value(h CGoHandle) pflag.Value {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "pflag.Value")
	if p == nil {
		return nil
	}
	return p.(pflag.Value)
}
func handleFromPtr_pflag_Value(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("pflag.Value", p))
}

// Converters for pointer handles for type: io.Reader
func ptrFromHandle_io_Reader(h CGoHandle) io.Reader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.Reader")
	if p == nil {
		return nil
	}
	return p.(io.Reader)
}
func handleFromPtr_io_Reader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.Reader", p))
}

// Converters for pointer handles for type: io.Writer
func ptrFromHandle_io_Writer(h CGoHandle) io.Writer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.Writer")
	if p == nil {
		return nil
	}
	return p.(io.Writer)
}
func handleFromPtr_io_Writer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.Writer", p))
}

// Converters for non-pointer handles for type: conversion.ConversionFuncs
func ptrFromHandle_conversion_ConversionFuncs(h CGoHandle) *conversion.ConversionFuncs {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "conversion.ConversionFuncs")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(conversion.ConversionFuncs{})).(*conversion.ConversionFuncs)
}
func handleFromPtr_conversion_ConversionFuncs(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("conversion.ConversionFuncs", p))
}

// Converters for non-pointer handles for type: conversion.Converter
func ptrFromHandle_conversion_Converter(h CGoHandle) *conversion.Converter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "conversion.Converter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(conversion.Converter{})).(*conversion.Converter)
}
func handleFromPtr_conversion_Converter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("conversion.Converter", p))
}

// Converters for non-pointer handles for type: conversion.Meta
func ptrFromHandle_conversion_Meta(h CGoHandle) *conversion.Meta {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "conversion.Meta")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(conversion.Meta{})).(*conversion.Meta)
}
func handleFromPtr_conversion_Meta(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("conversion.Meta", p))
}

// Converters for pointer handles for type: conversion.Scope
func ptrFromHandle_conversion_Scope(h CGoHandle) conversion.Scope {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "conversion.Scope")
	if p == nil {
		return nil
	}
	return p.(conversion.Scope)
}
func handleFromPtr_conversion_Scope(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("conversion.Scope", p))
}

// Converters for pointer handles for type: runtime.Codec
func ptrFromHandle_runtime_Codec(h CGoHandle) runtime.Codec {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.Codec")
	if p == nil {
		return nil
	}
	return p.(runtime.Codec)
}
func handleFromPtr_runtime_Codec(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.Codec", p))
}

// Converters for pointer handles for type: runtime.GroupVersioner
func ptrFromHandle_runtime_GroupVersioner(h CGoHandle) runtime.GroupVersioner {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.GroupVersioner")
	if p == nil {
		return nil
	}
	return p.(runtime.GroupVersioner)
}
func handleFromPtr_runtime_GroupVersioner(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.GroupVersioner", p))
}

// Converters for pointer handles for type: runtime.Object
func ptrFromHandle_runtime_Object(h CGoHandle) runtime.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.Object")
	if p == nil {
		return nil
	}
	return p.(runtime.Object)
}
func handleFromPtr_runtime_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.Object", p))
}

// Converters for non-pointer handles for type: runtime.RawExtension
func ptrFromHandle_runtime_RawExtension(h CGoHandle) *runtime.RawExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.RawExtension")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.RawExtension{})).(*runtime.RawExtension)
}
func handleFromPtr_runtime_RawExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.RawExtension", p))
}

// Converters for non-pointer handles for type: runtime.Scheme
func ptrFromHandle_runtime_Scheme(h CGoHandle) *runtime.Scheme {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.Scheme")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Scheme{})).(*runtime.Scheme)
}
func handleFromPtr_runtime_Scheme(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.Scheme", p))
}

// Converters for non-pointer handles for type: schema.GroupKind
func ptrFromHandle_schema_GroupKind(h CGoHandle) *schema.GroupKind {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.GroupKind")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(schema.GroupKind{})).(*schema.GroupKind)
}
func handleFromPtr_schema_GroupKind(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.GroupKind", p))
}

// Converters for non-pointer handles for type: schema.GroupResource
func ptrFromHandle_schema_GroupResource(h CGoHandle) *schema.GroupResource {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.GroupResource")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(schema.GroupResource{})).(*schema.GroupResource)
}
func handleFromPtr_schema_GroupResource(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.GroupResource", p))
}

// Converters for non-pointer handles for type: schema.GroupVersion
func ptrFromHandle_schema_GroupVersion(h CGoHandle) *schema.GroupVersion {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.GroupVersion")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(schema.GroupVersion{})).(*schema.GroupVersion)
}
func handleFromPtr_schema_GroupVersion(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.GroupVersion", p))
}

// Converters for non-pointer handles for type: schema.GroupVersionKind
func ptrFromHandle_schema_GroupVersionKind(h CGoHandle) *schema.GroupVersionKind {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.GroupVersionKind")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(schema.GroupVersionKind{})).(*schema.GroupVersionKind)
}
func handleFromPtr_schema_GroupVersionKind(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.GroupVersionKind", p))
}

// Converters for non-pointer handles for type: schema.GroupVersionResource
func ptrFromHandle_schema_GroupVersionResource(h CGoHandle) *schema.GroupVersionResource {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.GroupVersionResource")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(schema.GroupVersionResource{})).(*schema.GroupVersionResource)
}
func handleFromPtr_schema_GroupVersionResource(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.GroupVersionResource", p))
}

// Converters for pointer handles for type: schema.ObjectKind
func ptrFromHandle_schema_ObjectKind(h CGoHandle) schema.ObjectKind {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "schema.ObjectKind")
	if p == nil {
		return nil
	}
	return p.(schema.ObjectKind)
}
func handleFromPtr_schema_ObjectKind(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("schema.ObjectKind", p))
}

// Converters for pointer handles for type: rest.AuthProviderConfigPersister
func ptrFromHandle_rest_AuthProviderConfigPersister(h CGoHandle) rest.AuthProviderConfigPersister {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "rest.AuthProviderConfigPersister")
	if p == nil {
		return nil
	}
	return p.(rest.AuthProviderConfigPersister)
}
func handleFromPtr_rest_AuthProviderConfigPersister(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("rest.AuthProviderConfigPersister", p))
}

// Converters for non-pointer handles for type: rest.Config
func ptrFromHandle_rest_Config(h CGoHandle) *rest.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "rest.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(rest.Config{})).(*rest.Config)
}
func handleFromPtr_rest_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("rest.Config", p))
}

// Converters for non-pointer handles for type: rest.ImpersonationConfig
func ptrFromHandle_rest_ImpersonationConfig(h CGoHandle) *rest.ImpersonationConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "rest.ImpersonationConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(rest.ImpersonationConfig{})).(*rest.ImpersonationConfig)
}
func handleFromPtr_rest_ImpersonationConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("rest.ImpersonationConfig", p))
}

// Converters for pointer handles for type: rest.WarningHandler
func ptrFromHandle_rest_WarningHandler(h CGoHandle) rest.WarningHandler {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "rest.WarningHandler")
	if p == nil {
		return nil
	}
	return p.(rest.WarningHandler)
}
func handleFromPtr_rest_WarningHandler(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("rest.WarningHandler", p))
}

// Converters for non-pointer handles for type: auth.Info
func ptrFromHandle_auth_Info(h CGoHandle) *auth.Info {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "auth.Info")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(auth.Info{})).(*auth.Info)
}
func handleFromPtr_auth_Info(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("auth.Info", p))
}

// Converters for non-pointer handles for type: transport.Config
func ptrFromHandle_transport_Config(h CGoHandle) *transport.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "transport.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.Config{})).(*transport.Config)
}
func handleFromPtr_transport_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("transport.Config", p))
}

// Converters for non-pointer handles for type: transport.DialHolder
func ptrFromHandle_transport_DialHolder(h CGoHandle) *transport.DialHolder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "transport.DialHolder")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.DialHolder{})).(*transport.DialHolder)
}
func handleFromPtr_transport_DialHolder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("transport.DialHolder", p))
}

// Converters for non-pointer handles for type: transport.GetCertHolder
func ptrFromHandle_transport_GetCertHolder(h CGoHandle) *transport.GetCertHolder {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "transport.GetCertHolder")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.GetCertHolder{})).(*transport.GetCertHolder)
}
func handleFromPtr_transport_GetCertHolder(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("transport.GetCertHolder", p))
}

// Converters for non-pointer handles for type: transport.ImpersonationConfig
func ptrFromHandle_transport_ImpersonationConfig(h CGoHandle) *transport.ImpersonationConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "transport.ImpersonationConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.ImpersonationConfig{})).(*transport.ImpersonationConfig)
}
func handleFromPtr_transport_ImpersonationConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("transport.ImpersonationConfig", p))
}

// Converters for non-pointer handles for type: transport.TLSConfig
func ptrFromHandle_transport_TLSConfig(h CGoHandle) *transport.TLSConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "transport.TLSConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(transport.TLSConfig{})).(*transport.TLSConfig)
}
func handleFromPtr_transport_TLSConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("transport.TLSConfig", p))
}

// Converters for pointer handles for type: flowcontrol.RateLimiter
func ptrFromHandle_flowcontrol_RateLimiter(h CGoHandle) flowcontrol.RateLimiter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "flowcontrol.RateLimiter")
	if p == nil {
		return nil
	}
	return p.(flowcontrol.RateLimiter)
}
func handleFromPtr_flowcontrol_RateLimiter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("flowcontrol.RateLimiter", p))
}

// Converters for implicit pointer handles for type: net.IP
func ptrFromHandle_net_IP(h CGoHandle) *net.IP {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "net.IP")
	if p == nil {
		return nil
	}
	return p.(*net.IP)
}
func deptrFromHandle_net_IP(h CGoHandle) net.IP {
	p := ptrFromHandle_net_IP(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_net_IP(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("net.IP", p))
}

// --- wrapping slice: net.IP ---
//
//export net_IP_CTor
func net_IP_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_net_IP(&net.IP{}))
}

//export net_IP_len
func net_IP_len(handle CGoHandle) int {
	return len(deptrFromHandle_net_IP(handle))
}

//export net_IP_elem
func net_IP_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_net_IP(handle)
	return C.char(s[_idx])
}

//export net_IP_subslice
func net_IP_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_net_IP(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_net_IP(&ss))
}

//export net_IP_set
func net_IP_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_net_IP(handle)
	s[_idx] = byte(_vl)
}

//export net_IP_append
func net_IP_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_net_IP(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: net.IPMask
func ptrFromHandle_net_IPMask(h CGoHandle) *net.IPMask {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "net.IPMask")
	if p == nil {
		return nil
	}
	return p.(*net.IPMask)
}
func deptrFromHandle_net_IPMask(h CGoHandle) net.IPMask {
	p := ptrFromHandle_net_IPMask(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_net_IPMask(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("net.IPMask", p))
}

// --- wrapping slice: net.IPMask ---
//
//export net_IPMask_CTor
func net_IPMask_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_net_IPMask(&net.IPMask{}))
}

//export net_IPMask_len
func net_IPMask_len(handle CGoHandle) int {
	return len(deptrFromHandle_net_IPMask(handle))
}

//export net_IPMask_elem
func net_IPMask_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_net_IPMask(handle)
	return C.char(s[_idx])
}

//export net_IPMask_subslice
func net_IPMask_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_net_IPMask(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_net_IPMask(&ss))
}

//export net_IPMask_set
func net_IPMask_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_net_IPMask(handle)
	s[_idx] = byte(_vl)
}

//export net_IPMask_append
func net_IPMask_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_net_IPMask(handle)
	*s = append(*s, byte(_vl))
}

// Converters for non-pointer handles for type: net.IPNet
func ptrFromHandle_net_IPNet(h CGoHandle) *net.IPNet {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "net.IPNet")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(net.IPNet{})).(*net.IPNet)
}
func handleFromPtr_net_IPNet(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("net.IPNet", p))
}

// Converters for pointer handles for type: http.RoundTripper
func ptrFromHandle_http_RoundTripper(h CGoHandle) http.RoundTripper {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "http.RoundTripper")
	if p == nil {
		return nil
	}
	return p.(http.RoundTripper)
}
func handleFromPtr_http_RoundTripper(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("http.RoundTripper", p))
}

// Converters for pointer handles for type: reflect.Type
func ptrFromHandle_reflect_Type(h CGoHandle) reflect.Type {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "reflect.Type")
	if p == nil {
		return nil
	}
	return p.(reflect.Type)
}
func handleFromPtr_reflect_Type(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("reflect.Type", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

//export Slice_byte_from_bytes
func Slice_byte_from_bytes(o *C.PyObject) CGoHandle {
	size := C.PyBytes_Size(o)
	ptr := unsafe.Pointer(C.PyBytes_AsString(o))
	data := make([]byte, size)
	tmp := unsafe.Slice((*byte)(ptr), size)
	copy(data, tmp)
	return handleFromPtr_Slice_byte(&data)
}

//export Slice_byte_to_bytes
func Slice_byte_to_bytes(handle CGoHandle) *C.PyObject {
	s := deptrFromHandle_Slice_byte(handle)
	ptr := unsafe.Pointer(&s[0])
	size := len(s)
	return C.PyBytes_FromStringAndSize((*C.char)(ptr), C.long(size))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: clientcmd ---

// ---- Types ---

// Converters for pointer handles for type: *[]bool
func ptrFromHandle_Ptr_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func handleFromPtr_Ptr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]bool", p))
}

// Converters for pointer handles for type: *[]byte
func ptrFromHandle_Ptr_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func handleFromPtr_Ptr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]byte", p))
}

// Converters for pointer handles for type: *[]float32
func ptrFromHandle_Ptr_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func handleFromPtr_Ptr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]float32", p))
}

// Converters for pointer handles for type: *[]float64
func ptrFromHandle_Ptr_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func handleFromPtr_Ptr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]float64", p))
}

// Converters for pointer handles for type: *[]int
func ptrFromHandle_Ptr_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func handleFromPtr_Ptr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]int", p))
}

// Converters for pointer handles for type: *[]int32
func ptrFromHandle_Ptr_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func handleFromPtr_Ptr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]int32", p))
}

// Converters for pointer handles for type: *[]int64
func ptrFromHandle_Ptr_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func handleFromPtr_Ptr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]int64", p))
}

// Converters for pointer handles for type: *[]net.IP
func ptrFromHandle_Ptr_Slice_net_IP(h CGoHandle) *[]net.IP {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]net.IP")
	if p == nil {
		return nil
	}
	return p.(*[]net.IP)
}
func handleFromPtr_Ptr_Slice_net_IP(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]net.IP", p))
}

// Converters for pointer handles for type: *[]string
func ptrFromHandle_Ptr_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func handleFromPtr_Ptr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]string", p))
}

// Converters for pointer handles for type: *[]time.Duration
func ptrFromHandle_Ptr_Slice_time_Duration(h CGoHandle) *[]time.Duration {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]time.Duration")
	if p == nil {
		return nil
	}
	return p.(*[]time.Duration)
}
func handleFromPtr_Ptr_Slice_time_Duration(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]time.Duration", p))
}

// Converters for pointer handles for type: *[]uint
func ptrFromHandle_Ptr_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func handleFromPtr_Ptr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]uint", p))
}

// Converters for pointer handles for type: *clientcmd.AuthOverrideFlags
func ptrFromHandle_Ptr_clientcmd_AuthOverrideFlags(h CGoHandle) *clientcmd.AuthOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.AuthOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.AuthOverrideFlags{})).(*clientcmd.AuthOverrideFlags)
}
func handleFromPtr_Ptr_clientcmd_AuthOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.AuthOverrideFlags", p))
}

// Converters for pointer handles for type: *clientcmd.ClientConfigGetter
func ptrFromHandle_Ptr_clientcmd_ClientConfigGetter(h CGoHandle) *clientcmd.ClientConfigGetter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ClientConfigGetter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter)
}
func handleFromPtr_Ptr_clientcmd_ClientConfigGetter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ClientConfigGetter", p))
}

// Converters for pointer handles for type: *clientcmd.ClientConfigLoadingRules
func ptrFromHandle_Ptr_clientcmd_ClientConfigLoadingRules(h CGoHandle) *clientcmd.ClientConfigLoadingRules {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ClientConfigLoadingRules")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules)
}
func handleFromPtr_Ptr_clientcmd_ClientConfigLoadingRules(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ClientConfigLoadingRules", p))
}

// Converters for pointer handles for type: *clientcmd.ClusterOverrideFlags
func ptrFromHandle_Ptr_clientcmd_ClusterOverrideFlags(h CGoHandle) *clientcmd.ClusterOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ClusterOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClusterOverrideFlags{})).(*clientcmd.ClusterOverrideFlags)
}
func handleFromPtr_Ptr_clientcmd_ClusterOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ClusterOverrideFlags", p))
}

// Converters for pointer handles for type: *clientcmd.ConfigOverrideFlags
func ptrFromHandle_Ptr_clientcmd_ConfigOverrideFlags(h CGoHandle) *clientcmd.ConfigOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ConfigOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ConfigOverrideFlags{})).(*clientcmd.ConfigOverrideFlags)
}
func handleFromPtr_Ptr_clientcmd_ConfigOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ConfigOverrideFlags", p))
}

// Converters for pointer handles for type: *clientcmd.ConfigOverrides
func ptrFromHandle_Ptr_clientcmd_ConfigOverrides(h CGoHandle) *clientcmd.ConfigOverrides {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ConfigOverrides")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ConfigOverrides{})).(*clientcmd.ConfigOverrides)
}
func handleFromPtr_Ptr_clientcmd_ConfigOverrides(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ConfigOverrides", p))
}

// Converters for pointer handles for type: *clientcmd.ContextOverrideFlags
func ptrFromHandle_Ptr_clientcmd_ContextOverrideFlags(h CGoHandle) *clientcmd.ContextOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.ContextOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ContextOverrideFlags{})).(*clientcmd.ContextOverrideFlags)
}
func handleFromPtr_Ptr_clientcmd_ContextOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.ContextOverrideFlags", p))
}

// Converters for pointer handles for type: *clientcmd.DeferredLoadingClientConfig
func ptrFromHandle_Ptr_clientcmd_DeferredLoadingClientConfig(h CGoHandle) *clientcmd.DeferredLoadingClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.DeferredLoadingClientConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.DeferredLoadingClientConfig{})).(*clientcmd.DeferredLoadingClientConfig)
}
func handleFromPtr_Ptr_clientcmd_DeferredLoadingClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.DeferredLoadingClientConfig", p))
}

// Converters for pointer handles for type: *clientcmd.DirectClientConfig
func ptrFromHandle_Ptr_clientcmd_DirectClientConfig(h CGoHandle) *clientcmd.DirectClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.DirectClientConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig)
}
func handleFromPtr_Ptr_clientcmd_DirectClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.DirectClientConfig", p))
}

// Converters for pointer handles for type: *clientcmd.FlagInfo
func ptrFromHandle_Ptr_clientcmd_FlagInfo(h CGoHandle) *clientcmd.FlagInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.FlagInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.FlagInfo{})).(*clientcmd.FlagInfo)
}
func handleFromPtr_Ptr_clientcmd_FlagInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.FlagInfo", p))
}

// Converters for pointer handles for type: *clientcmd.MissingConfigError
func ptrFromHandle_Ptr_clientcmd_MissingConfigError(h CGoHandle) *clientcmd.MissingConfigError {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.MissingConfigError")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.MissingConfigError{})).(*clientcmd.MissingConfigError)
}
func handleFromPtr_Ptr_clientcmd_MissingConfigError(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.MissingConfigError", p))
}

// Converters for pointer handles for type: *clientcmd.PathOptions
func ptrFromHandle_Ptr_clientcmd_PathOptions(h CGoHandle) *clientcmd.PathOptions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.PathOptions")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions)
}
func handleFromPtr_Ptr_clientcmd_PathOptions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.PathOptions", p))
}

// Converters for pointer handles for type: *clientcmd.PromptingAuthLoader
func ptrFromHandle_Ptr_clientcmd_PromptingAuthLoader(h CGoHandle) *clientcmd.PromptingAuthLoader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*clientcmd.PromptingAuthLoader")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.PromptingAuthLoader{})).(*clientcmd.PromptingAuthLoader)
}
func handleFromPtr_Ptr_clientcmd_PromptingAuthLoader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*clientcmd.PromptingAuthLoader", p))
}

// Converters for pointer handles for type: *map[string]int
func ptrFromHandle_Ptr_Map_string_int(h CGoHandle) *map[string]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]int")
	if p == nil {
		return nil
	}
	return p.(*map[string]int)
}
func handleFromPtr_Ptr_Map_string_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]int", p))
}

// Converters for pointer handles for type: *map[string]int64
func ptrFromHandle_Ptr_Map_string_int64(h CGoHandle) *map[string]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]int64")
	if p == nil {
		return nil
	}
	return p.(*map[string]int64)
}
func handleFromPtr_Ptr_Map_string_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]int64", p))
}

// Converters for pointer handles for type: *map[string]string
func ptrFromHandle_Ptr_Map_string_string(h CGoHandle) *map[string]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]string")
	if p == nil {
		return nil
	}
	return p.(*map[string]string)
}
func handleFromPtr_Ptr_Map_string_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]string", p))
}

// Converters for implicit pointer handles for type: []*string
func ptrFromHandle_Slice_Ptr_string(h CGoHandle) *[]*string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]*string")
	if p == nil {
		return nil
	}
	return p.(*[]*string)
}
func deptrFromHandle_Slice_Ptr_string(h CGoHandle) []*string {
	p := ptrFromHandle_Slice_Ptr_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_Ptr_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]*string", p))
}

// --- wrapping slice: []*string ---
//
//export Slice_Ptr_string_CTor
func Slice_Ptr_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_Ptr_string(&[]*string{}))
}

//export Slice_Ptr_string_len
func Slice_Ptr_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_Ptr_string(handle))
}

//export Slice_Ptr_string_elem
func Slice_Ptr_string_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_string(handle)
	return handleFromPtr_Ptr_string(&(s[_idx]))
}

//export Slice_Ptr_string_subslice
func Slice_Ptr_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_Ptr_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_Ptr_string(&ss))
}

//export Slice_Ptr_string_set
func Slice_Ptr_string_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_Ptr_string(handle)
	s[_idx] = ptrFromHandle_Ptr_string(_vl)
}

//export Slice_Ptr_string_append
func Slice_Ptr_string_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_Ptr_string(handle)
	*s = append(*s, ptrFromHandle_Ptr_string(_vl))
}

// Converters for implicit pointer handles for type: []api.ExecEnvVar
func ptrFromHandle_Slice_api_ExecEnvVar(h CGoHandle) *[]api.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]api.ExecEnvVar")
	if p == nil {
		return nil
	}
	return p.(*[]api.ExecEnvVar)
}
func deptrFromHandle_Slice_api_ExecEnvVar(h CGoHandle) []api.ExecEnvVar {
	p := ptrFromHandle_Slice_api_ExecEnvVar(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_api_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]api.ExecEnvVar", p))
}

// --- wrapping slice: []api.ExecEnvVar ---
//
//export Slice_api_ExecEnvVar_CTor
func Slice_api_ExecEnvVar_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_api_ExecEnvVar(&[]api.ExecEnvVar{}))
}

//export Slice_api_ExecEnvVar_len
func Slice_api_ExecEnvVar_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_api_ExecEnvVar(handle))
}

//export Slice_api_ExecEnvVar_elem
func Slice_api_ExecEnvVar_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_api_ExecEnvVar(handle)
	return handleFromPtr_api_ExecEnvVar(&(s[_idx]))
}

//export Slice_api_ExecEnvVar_subslice
func Slice_api_ExecEnvVar_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_api_ExecEnvVar(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_api_ExecEnvVar(&ss))
}

//export Slice_api_ExecEnvVar_set
func Slice_api_ExecEnvVar_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_api_ExecEnvVar(handle)
	s[_idx] = *ptrFromHandle_api_ExecEnvVar(_vl)
}

//export Slice_api_ExecEnvVar_append
func Slice_api_ExecEnvVar_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_api_ExecEnvVar(handle)
	*s = append(*s, *ptrFromHandle_api_ExecEnvVar(_vl))
}

// Converters for implicit pointer handles for type: []net.IP
func ptrFromHandle_Slice_net_IP(h CGoHandle) *[]net.IP {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]net.IP")
	if p == nil {
		return nil
	}
	return p.(*[]net.IP)
}
func deptrFromHandle_Slice_net_IP(h CGoHandle) []net.IP {
	p := ptrFromHandle_Slice_net_IP(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_net_IP(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]net.IP", p))
}

// --- wrapping slice: []net.IP ---
//
//export Slice_net_IP_CTor
func Slice_net_IP_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_net_IP(&[]net.IP{}))
}

//export Slice_net_IP_len
func Slice_net_IP_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_net_IP(handle))
}

//export Slice_net_IP_elem
func Slice_net_IP_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_net_IP(handle)
	return handleFromPtr_net_IP(&(s[_idx]))
}

//export Slice_net_IP_subslice
func Slice_net_IP_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_net_IP(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_net_IP(&ss))
}

//export Slice_net_IP_set
func Slice_net_IP_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_net_IP(handle)
	s[_idx] = deptrFromHandle_net_IP(_vl)
}

//export Slice_net_IP_append
func Slice_net_IP_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_net_IP(handle)
	*s = append(*s, deptrFromHandle_net_IP(_vl))
}

// Converters for implicit pointer handles for type: []time.Duration
func ptrFromHandle_Slice_time_Duration(h CGoHandle) *[]time.Duration {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]time.Duration")
	if p == nil {
		return nil
	}
	return p.(*[]time.Duration)
}
func deptrFromHandle_Slice_time_Duration(h CGoHandle) []time.Duration {
	p := ptrFromHandle_Slice_time_Duration(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_time_Duration(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]time.Duration", p))
}

// --- wrapping slice: []time.Duration ---
//
//export Slice_time_Duration_CTor
func Slice_time_Duration_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_time_Duration(&[]time.Duration{}))
}

//export Slice_time_Duration_len
func Slice_time_Duration_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_time_Duration(handle))
}

//export Slice_time_Duration_elem
func Slice_time_Duration_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_time_Duration(handle)
	return C.longlong(int64(s[_idx]))
}

//export Slice_time_Duration_subslice
func Slice_time_Duration_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_time_Duration(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_time_Duration(&ss))
}

//export Slice_time_Duration_set
func Slice_time_Duration_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_time_Duration(handle)
	s[_idx] = time.Duration(int64(_vl))
}

//export Slice_time_Duration_append
func Slice_time_Duration_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_time_Duration(handle)
	*s = append(*s, time.Duration(int64(_vl)))
}

// Converters for pointer handles for type: clientcmd.AuthLoader
func ptrFromHandle_clientcmd_AuthLoader(h CGoHandle) clientcmd.AuthLoader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.AuthLoader")
	if p == nil {
		return nil
	}
	return p.(clientcmd.AuthLoader)
}
func handleFromPtr_clientcmd_AuthLoader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.AuthLoader", p))
}

// Converters for non-pointer handles for type: clientcmd.AuthOverrideFlags
func ptrFromHandle_clientcmd_AuthOverrideFlags(h CGoHandle) *clientcmd.AuthOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.AuthOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.AuthOverrideFlags{})).(*clientcmd.AuthOverrideFlags)
}
func handleFromPtr_clientcmd_AuthOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.AuthOverrideFlags", p))
}

// Converters for pointer handles for type: clientcmd.ClientConfig
func ptrFromHandle_clientcmd_ClientConfig(h CGoHandle) clientcmd.ClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ClientConfig")
	if p == nil {
		return nil
	}
	return p.(clientcmd.ClientConfig)
}
func handleFromPtr_clientcmd_ClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ClientConfig", p))
}

// Converters for non-pointer handles for type: clientcmd.ClientConfigGetter
func ptrFromHandle_clientcmd_ClientConfigGetter(h CGoHandle) *clientcmd.ClientConfigGetter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ClientConfigGetter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter)
}
func handleFromPtr_clientcmd_ClientConfigGetter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ClientConfigGetter", p))
}

// Converters for pointer handles for type: clientcmd.ClientConfigLoader
func ptrFromHandle_clientcmd_ClientConfigLoader(h CGoHandle) clientcmd.ClientConfigLoader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ClientConfigLoader")
	if p == nil {
		return nil
	}
	return p.(clientcmd.ClientConfigLoader)
}
func handleFromPtr_clientcmd_ClientConfigLoader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ClientConfigLoader", p))
}

// Converters for non-pointer handles for type: clientcmd.ClientConfigLoadingRules
func ptrFromHandle_clientcmd_ClientConfigLoadingRules(h CGoHandle) *clientcmd.ClientConfigLoadingRules {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ClientConfigLoadingRules")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules)
}
func handleFromPtr_clientcmd_ClientConfigLoadingRules(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ClientConfigLoadingRules", p))
}

// Converters for non-pointer handles for type: clientcmd.ClusterOverrideFlags
func ptrFromHandle_clientcmd_ClusterOverrideFlags(h CGoHandle) *clientcmd.ClusterOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ClusterOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ClusterOverrideFlags{})).(*clientcmd.ClusterOverrideFlags)
}
func handleFromPtr_clientcmd_ClusterOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ClusterOverrideFlags", p))
}

// Converters for pointer handles for type: clientcmd.ConfigAccess
func ptrFromHandle_clientcmd_ConfigAccess(h CGoHandle) clientcmd.ConfigAccess {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ConfigAccess")
	if p == nil {
		return nil
	}
	return p.(clientcmd.ConfigAccess)
}
func handleFromPtr_clientcmd_ConfigAccess(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ConfigAccess", p))
}

// Converters for non-pointer handles for type: clientcmd.ConfigOverrideFlags
func ptrFromHandle_clientcmd_ConfigOverrideFlags(h CGoHandle) *clientcmd.ConfigOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ConfigOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ConfigOverrideFlags{})).(*clientcmd.ConfigOverrideFlags)
}
func handleFromPtr_clientcmd_ConfigOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ConfigOverrideFlags", p))
}

// Converters for non-pointer handles for type: clientcmd.ConfigOverrides
func ptrFromHandle_clientcmd_ConfigOverrides(h CGoHandle) *clientcmd.ConfigOverrides {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ConfigOverrides")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ConfigOverrides{})).(*clientcmd.ConfigOverrides)
}
func handleFromPtr_clientcmd_ConfigOverrides(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ConfigOverrides", p))
}

// Converters for non-pointer handles for type: clientcmd.ContextOverrideFlags
func ptrFromHandle_clientcmd_ContextOverrideFlags(h CGoHandle) *clientcmd.ContextOverrideFlags {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.ContextOverrideFlags")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.ContextOverrideFlags{})).(*clientcmd.ContextOverrideFlags)
}
func handleFromPtr_clientcmd_ContextOverrideFlags(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.ContextOverrideFlags", p))
}

// Converters for non-pointer handles for type: clientcmd.DeferredLoadingClientConfig
func ptrFromHandle_clientcmd_DeferredLoadingClientConfig(h CGoHandle) *clientcmd.DeferredLoadingClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.DeferredLoadingClientConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.DeferredLoadingClientConfig{})).(*clientcmd.DeferredLoadingClientConfig)
}
func handleFromPtr_clientcmd_DeferredLoadingClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.DeferredLoadingClientConfig", p))
}

// Converters for non-pointer handles for type: clientcmd.DirectClientConfig
func ptrFromHandle_clientcmd_DirectClientConfig(h CGoHandle) *clientcmd.DirectClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.DirectClientConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig)
}
func handleFromPtr_clientcmd_DirectClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.DirectClientConfig", p))
}

// Converters for non-pointer handles for type: clientcmd.FlagInfo
func ptrFromHandle_clientcmd_FlagInfo(h CGoHandle) *clientcmd.FlagInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.FlagInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.FlagInfo{})).(*clientcmd.FlagInfo)
}
func handleFromPtr_clientcmd_FlagInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.FlagInfo", p))
}

// Converters for pointer handles for type: clientcmd.InClusterConfig
func ptrFromHandle_clientcmd_InClusterConfig(h CGoHandle) clientcmd.InClusterConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.InClusterConfig")
	if p == nil {
		return nil
	}
	return p.(clientcmd.InClusterConfig)
}
func handleFromPtr_clientcmd_InClusterConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.InClusterConfig", p))
}

// Converters for non-pointer handles for type: clientcmd.MissingConfigError
func ptrFromHandle_clientcmd_MissingConfigError(h CGoHandle) *clientcmd.MissingConfigError {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.MissingConfigError")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.MissingConfigError{})).(*clientcmd.MissingConfigError)
}
func handleFromPtr_clientcmd_MissingConfigError(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.MissingConfigError", p))
}

// Converters for pointer handles for type: clientcmd.OverridingClientConfig
func ptrFromHandle_clientcmd_OverridingClientConfig(h CGoHandle) clientcmd.OverridingClientConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.OverridingClientConfig")
	if p == nil {
		return nil
	}
	return p.(clientcmd.OverridingClientConfig)
}
func handleFromPtr_clientcmd_OverridingClientConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.OverridingClientConfig", p))
}

// Converters for non-pointer handles for type: clientcmd.PathOptions
func ptrFromHandle_clientcmd_PathOptions(h CGoHandle) *clientcmd.PathOptions {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.PathOptions")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions)
}
func handleFromPtr_clientcmd_PathOptions(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.PathOptions", p))
}

// Converters for non-pointer handles for type: clientcmd.PromptingAuthLoader
func ptrFromHandle_clientcmd_PromptingAuthLoader(h CGoHandle) *clientcmd.PromptingAuthLoader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "clientcmd.PromptingAuthLoader")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(clientcmd.PromptingAuthLoader{})).(*clientcmd.PromptingAuthLoader)
}
func handleFromPtr_clientcmd_PromptingAuthLoader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("clientcmd.PromptingAuthLoader", p))
}

// Converters for implicit pointer handles for type: map[string]*api.AuthInfo
func ptrFromHandle_Map_string_Ptr_api_AuthInfo(h CGoHandle) *map[string]*api.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]*api.AuthInfo")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.AuthInfo)
}
func deptrFromHandle_Map_string_Ptr_api_AuthInfo(h CGoHandle) map[string]*api.AuthInfo {
	p := ptrFromHandle_Map_string_Ptr_api_AuthInfo(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_Ptr_api_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]*api.AuthInfo", p))
}

// --- wrapping map: map[string]*api.AuthInfo ---
//
//export Map_string_Ptr_api_AuthInfo_CTor
func Map_string_Ptr_api_AuthInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_Ptr_api_AuthInfo(&map[string]*api.AuthInfo{}))
}

//export Map_string_Ptr_api_AuthInfo_len
func Map_string_Ptr_api_AuthInfo_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle))
}

//export Map_string_Ptr_api_AuthInfo_elem
func Map_string_Ptr_api_AuthInfo_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_api_AuthInfo(&v)
}

//export Map_string_Ptr_api_AuthInfo_contains
func Map_string_Ptr_api_AuthInfo_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_Ptr_api_AuthInfo_set
func Map_string_Ptr_api_AuthInfo_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_api_AuthInfo(_vl)
}

//export Map_string_Ptr_api_AuthInfo_delete
func Map_string_Ptr_api_AuthInfo_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_Ptr_api_AuthInfo_keys
func Map_string_Ptr_api_AuthInfo_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_AuthInfo(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]*api.Cluster
func ptrFromHandle_Map_string_Ptr_api_Cluster(h CGoHandle) *map[string]*api.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]*api.Cluster")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.Cluster)
}
func deptrFromHandle_Map_string_Ptr_api_Cluster(h CGoHandle) map[string]*api.Cluster {
	p := ptrFromHandle_Map_string_Ptr_api_Cluster(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_Ptr_api_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]*api.Cluster", p))
}

// --- wrapping map: map[string]*api.Cluster ---
//
//export Map_string_Ptr_api_Cluster_CTor
func Map_string_Ptr_api_Cluster_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_Ptr_api_Cluster(&map[string]*api.Cluster{}))
}

//export Map_string_Ptr_api_Cluster_len
func Map_string_Ptr_api_Cluster_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_Ptr_api_Cluster(handle))
}

//export Map_string_Ptr_api_Cluster_elem
func Map_string_Ptr_api_Cluster_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_Cluster(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_api_Cluster(&v)
}

//export Map_string_Ptr_api_Cluster_contains
func Map_string_Ptr_api_Cluster_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_Ptr_api_Cluster(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_Ptr_api_Cluster_set
func Map_string_Ptr_api_Cluster_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_Ptr_api_Cluster(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_api_Cluster(_vl)
}

//export Map_string_Ptr_api_Cluster_delete
func Map_string_Ptr_api_Cluster_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_Ptr_api_Cluster(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_Ptr_api_Cluster_keys
func Map_string_Ptr_api_Cluster_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_Cluster(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]*api.Context
func ptrFromHandle_Map_string_Ptr_api_Context(h CGoHandle) *map[string]*api.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]*api.Context")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.Context)
}
func deptrFromHandle_Map_string_Ptr_api_Context(h CGoHandle) map[string]*api.Context {
	p := ptrFromHandle_Map_string_Ptr_api_Context(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_Ptr_api_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]*api.Context", p))
}

// --- wrapping map: map[string]*api.Context ---
//
//export Map_string_Ptr_api_Context_CTor
func Map_string_Ptr_api_Context_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_Ptr_api_Context(&map[string]*api.Context{}))
}

//export Map_string_Ptr_api_Context_len
func Map_string_Ptr_api_Context_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_Ptr_api_Context(handle))
}

//export Map_string_Ptr_api_Context_elem
func Map_string_Ptr_api_Context_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_Context(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Ptr_api_Context(&v)
}

//export Map_string_Ptr_api_Context_contains
func Map_string_Ptr_api_Context_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_Ptr_api_Context(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_Ptr_api_Context_set
func Map_string_Ptr_api_Context_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_Ptr_api_Context(handle)
	s[C.GoString(_ky)] = ptrFromHandle_Ptr_api_Context(_vl)
}

//export Map_string_Ptr_api_Context_delete
func Map_string_Ptr_api_Context_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_Ptr_api_Context(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_Ptr_api_Context_keys
func Map_string_Ptr_api_Context_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_Ptr_api_Context(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string][]string
func ptrFromHandle_Map_string_Slice_string(h CGoHandle) *map[string][]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string][]string")
	if p == nil {
		return nil
	}
	return p.(*map[string][]string)
}
func deptrFromHandle_Map_string_Slice_string(h CGoHandle) map[string][]string {
	p := ptrFromHandle_Map_string_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string][]string", p))
}

// --- wrapping map: map[string][]string ---
//
//export Map_string_Slice_string_CTor
func Map_string_Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_Slice_string(&map[string][]string{}))
}

//export Map_string_Slice_string_len
func Map_string_Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_Slice_string(handle))
}

//export Map_string_Slice_string_elem
func Map_string_Slice_string_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_Slice_string(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Slice_string(&v)
}

//export Map_string_Slice_string_contains
func Map_string_Slice_string_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_Slice_string(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_Slice_string_set
func Map_string_Slice_string_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_Slice_string(handle)
	s[C.GoString(_ky)] = deptrFromHandle_Slice_string(_vl)
}

//export Map_string_Slice_string_delete
func Map_string_Slice_string_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_Slice_string(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_Slice_string_keys
func Map_string_Slice_string_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_Slice_string(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]int
func ptrFromHandle_Map_string_int(h CGoHandle) *map[string]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]int")
	if p == nil {
		return nil
	}
	return p.(*map[string]int)
}
func deptrFromHandle_Map_string_int(h CGoHandle) map[string]int {
	p := ptrFromHandle_Map_string_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]int", p))
}

// --- wrapping map: map[string]int ---
//
//export Map_string_int_CTor
func Map_string_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_int(&map[string]int{}))
}

//export Map_string_int_len
func Map_string_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_int(handle))
}

//export Map_string_int_elem
func Map_string_int_elem(handle CGoHandle, _ky *C.char) C.longlong {
	s := deptrFromHandle_Map_string_int(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.longlong(v)
}

//export Map_string_int_contains
func Map_string_int_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_int(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_int_set
func Map_string_int_set(handle CGoHandle, _ky *C.char, _vl C.longlong) {
	s := deptrFromHandle_Map_string_int(handle)
	s[C.GoString(_ky)] = int(_vl)
}

//export Map_string_int_delete
func Map_string_int_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_int(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_int_keys
func Map_string_int_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_int(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]int64
func ptrFromHandle_Map_string_int64(h CGoHandle) *map[string]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]int64")
	if p == nil {
		return nil
	}
	return p.(*map[string]int64)
}
func deptrFromHandle_Map_string_int64(h CGoHandle) map[string]int64 {
	p := ptrFromHandle_Map_string_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]int64", p))
}

// --- wrapping map: map[string]int64 ---
//
//export Map_string_int64_CTor
func Map_string_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_int64(&map[string]int64{}))
}

//export Map_string_int64_len
func Map_string_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_int64(handle))
}

//export Map_string_int64_elem
func Map_string_int64_elem(handle CGoHandle, _ky *C.char) C.longlong {
	s := deptrFromHandle_Map_string_int64(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.longlong(v)
}

//export Map_string_int64_contains
func Map_string_int64_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_int64(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_int64_set
func Map_string_int64_set(handle CGoHandle, _ky *C.char, _vl C.longlong) {
	s := deptrFromHandle_Map_string_int64(handle)
	s[C.GoString(_ky)] = int64(_vl)
}

//export Map_string_int64_delete
func Map_string_int64_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_int64(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_int64_keys
func Map_string_int64_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_int64(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]runtime.Object
func ptrFromHandle_Map_string_runtime_Object(h CGoHandle) *map[string]runtime.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]runtime.Object")
	if p == nil {
		return nil
	}
	return p.(*map[string]runtime.Object)
}
func deptrFromHandle_Map_string_runtime_Object(h CGoHandle) map[string]runtime.Object {
	p := ptrFromHandle_Map_string_runtime_Object(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_runtime_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]runtime.Object", p))
}

// --- wrapping map: map[string]runtime.Object ---
//
//export Map_string_runtime_Object_CTor
func Map_string_runtime_Object_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_runtime_Object(&map[string]runtime.Object{}))
}

//export Map_string_runtime_Object_len
func Map_string_runtime_Object_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_runtime_Object(handle))
}

//export Map_string_runtime_Object_elem
func Map_string_runtime_Object_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_runtime_Object(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_runtime_Object(&v)
}

//export Map_string_runtime_Object_contains
func Map_string_runtime_Object_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_runtime_Object(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_runtime_Object_set
func Map_string_runtime_Object_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_runtime_Object(handle)
	s[C.GoString(_ky)] = ptrFromHandle_runtime_Object(_vl)
}

//export Map_string_runtime_Object_delete
func Map_string_runtime_Object_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_runtime_Object(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_runtime_Object_keys
func Map_string_runtime_Object_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_runtime_Object(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for implicit pointer handles for type: map[string]string
func ptrFromHandle_Map_string_string(h CGoHandle) *map[string]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]string")
	if p == nil {
		return nil
	}
	return p.(*map[string]string)
}
func deptrFromHandle_Map_string_string(h CGoHandle) map[string]string {
	p := ptrFromHandle_Map_string_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]string", p))
}

// --- wrapping map: map[string]string ---
//
//export Map_string_string_CTor
func Map_string_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_string(&map[string]string{}))
}

//export Map_string_string_len
func Map_string_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_string(handle))
}

//export Map_string_string_elem
func Map_string_string_elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_Map_string_string(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.CString(v)
}

//export Map_string_string_contains
func Map_string_string_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_string(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_string_set
func Map_string_string_set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_Map_string_string(handle)
	s[C.GoString(_ky)] = C.GoString(_vl)
}

//export Map_string_string_delete
func Map_string_string_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_string(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_string_keys
func Map_string_string_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_string(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---
//
//export clientcmd_ClusterDefaults
func clientcmd_ClusterDefaults() CGoHandle {
	return handleFromPtr_api_Cluster(&clientcmd.ClusterDefaults)
}

//export clientcmd_Set_ClusterDefaults
func clientcmd_Set_ClusterDefaults(val CGoHandle) {
	clientcmd.ClusterDefaults = *ptrFromHandle_api_Cluster(val)
}

//export clientcmd_DefaultClientConfig
func clientcmd_DefaultClientConfig() CGoHandle {
	return handleFromPtr_clientcmd_DirectClientConfig(&clientcmd.DefaultClientConfig)
}

//export clientcmd_Set_DefaultClientConfig
func clientcmd_Set_DefaultClientConfig(val CGoHandle) {
	clientcmd.DefaultClientConfig = *ptrFromHandle_clientcmd_DirectClientConfig(val)
}

//export clientcmd_RecommendedConfigDir
func clientcmd_RecommendedConfigDir() *C.char {
	return C.CString(clientcmd.RecommendedConfigDir)
}

//export clientcmd_Set_RecommendedConfigDir
func clientcmd_Set_RecommendedConfigDir(val *C.char) {
	clientcmd.RecommendedConfigDir = C.GoString(val)
}

//export clientcmd_RecommendedHomeFile
func clientcmd_RecommendedHomeFile() *C.char {
	return C.CString(clientcmd.RecommendedHomeFile)
}

//export clientcmd_Set_RecommendedHomeFile
func clientcmd_Set_RecommendedHomeFile(val *C.char) {
	clientcmd.RecommendedHomeFile = C.GoString(val)
}

//export clientcmd_RecommendedSchemaFile
func clientcmd_RecommendedSchemaFile() *C.char {
	return C.CString(clientcmd.RecommendedSchemaFile)
}

//export clientcmd_Set_RecommendedSchemaFile
func clientcmd_Set_RecommendedSchemaFile(val *C.char) {
	clientcmd.RecommendedSchemaFile = C.GoString(val)
}

//export clientcmd_UseModifyConfigLock
func clientcmd_UseModifyConfigLock() C.char {
	return boolGoToPy(clientcmd.UseModifyConfigLock)
}

//export clientcmd_Set_UseModifyConfigLock
func clientcmd_Set_UseModifyConfigLock(val C.char) {
	clientcmd.UseModifyConfigLock = boolPyToGo(val)
}

// ---- Interfaces ---

//export clientcmd_AuthLoader_LoadAuth
func clientcmd_AuthLoader_LoadAuth(_handle CGoHandle, path *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.AuthLoader")
	if __err != nil {
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	cret, __err := vifc.(clientcmd.AuthLoader).LoadAuth(C.GoString(path))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	return handleFromPtr_Ptr_auth_Info(cret)
}

//export clientcmd_ClientConfig_ClientConfig
func clientcmd_ClientConfig_ClientConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfig")
	if __err != nil {
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	cret, __err := vifc.(clientcmd.ClientConfig).ClientConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_ClientConfig_ConfigAccess
func clientcmd_ClientConfig_ConfigAccess(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfig")
	if __err != nil {
		return handleFromPtr_clientcmd_ConfigAccess(nil)
	}
	return handleFromPtr_clientcmd_ConfigAccess(vifc.(clientcmd.ClientConfig).ConfigAccess())

}

//export clientcmd_ClientConfig_RawConfig
func clientcmd_ClientConfig_RawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.ClientConfig).RawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_ClientConfigLoader_GetDefaultFilename
func clientcmd_ClientConfigLoader_GetDefaultFilename(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(clientcmd.ClientConfigLoader).GetDefaultFilename())

}

//export clientcmd_ClientConfigLoader_GetExplicitFile
func clientcmd_ClientConfigLoader_GetExplicitFile(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(clientcmd.ClientConfigLoader).GetExplicitFile())

}

//export clientcmd_ClientConfigLoader_GetLoadingPrecedence
func clientcmd_ClientConfigLoader_GetLoadingPrecedence(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := vifc.(clientcmd.ClientConfigLoader).GetLoadingPrecedence()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_ClientConfigLoader_GetStartingConfig
func clientcmd_ClientConfigLoader_GetStartingConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.ClientConfigLoader).GetStartingConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ClientConfigLoader_IsDefaultConfig
func clientcmd_ClientConfigLoader_IsDefaultConfig(_handle CGoHandle, arg_0 CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(vifc.(clientcmd.ClientConfigLoader).IsDefaultConfig(ptrFromHandle_Ptr_rest_Config(arg_0)))

}

//export clientcmd_ClientConfigLoader_IsExplicitFile
func clientcmd_ClientConfigLoader_IsExplicitFile(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(vifc.(clientcmd.ClientConfigLoader).IsExplicitFile())

}

//export clientcmd_ClientConfigLoader_Load
func clientcmd_ClientConfigLoader_Load(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ClientConfigLoader")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.ClientConfigLoader).Load()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ConfigAccess_GetDefaultFilename
func clientcmd_ConfigAccess_GetDefaultFilename(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ConfigAccess")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(clientcmd.ConfigAccess).GetDefaultFilename())

}

//export clientcmd_ConfigAccess_GetExplicitFile
func clientcmd_ConfigAccess_GetExplicitFile(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ConfigAccess")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(vifc.(clientcmd.ConfigAccess).GetExplicitFile())

}

//export clientcmd_ConfigAccess_GetLoadingPrecedence
func clientcmd_ConfigAccess_GetLoadingPrecedence(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ConfigAccess")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := vifc.(clientcmd.ConfigAccess).GetLoadingPrecedence()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_ConfigAccess_GetStartingConfig
func clientcmd_ConfigAccess_GetStartingConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ConfigAccess")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.ConfigAccess).GetStartingConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ConfigAccess_IsExplicitFile
func clientcmd_ConfigAccess_IsExplicitFile(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.ConfigAccess")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(vifc.(clientcmd.ConfigAccess).IsExplicitFile())

}

//export clientcmd_InClusterConfig_ClientConfig
func clientcmd_InClusterConfig_ClientConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.InClusterConfig")
	if __err != nil {
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	cret, __err := vifc.(clientcmd.InClusterConfig).ClientConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_InClusterConfig_ConfigAccess
func clientcmd_InClusterConfig_ConfigAccess(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.InClusterConfig")
	if __err != nil {
		return handleFromPtr_clientcmd_ConfigAccess(nil)
	}
	return handleFromPtr_clientcmd_ConfigAccess(vifc.(clientcmd.InClusterConfig).ConfigAccess())

}

//export clientcmd_InClusterConfig_Possible
func clientcmd_InClusterConfig_Possible(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.InClusterConfig")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(vifc.(clientcmd.InClusterConfig).Possible())

}

//export clientcmd_InClusterConfig_RawConfig
func clientcmd_InClusterConfig_RawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.InClusterConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.InClusterConfig).RawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_OverridingClientConfig_ClientConfig
func clientcmd_OverridingClientConfig_ClientConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.OverridingClientConfig")
	if __err != nil {
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	cret, __err := vifc.(clientcmd.OverridingClientConfig).ClientConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_OverridingClientConfig_ConfigAccess
func clientcmd_OverridingClientConfig_ConfigAccess(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.OverridingClientConfig")
	if __err != nil {
		return handleFromPtr_clientcmd_ConfigAccess(nil)
	}
	return handleFromPtr_clientcmd_ConfigAccess(vifc.(clientcmd.OverridingClientConfig).ConfigAccess())

}

//export clientcmd_OverridingClientConfig_MergedRawConfig
func clientcmd_OverridingClientConfig_MergedRawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.OverridingClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.OverridingClientConfig).MergedRawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_OverridingClientConfig_RawConfig
func clientcmd_OverridingClientConfig_RawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "clientcmd.OverridingClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := vifc.(clientcmd.OverridingClientConfig).RawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

// ---- Structs ---

// --- wrapping struct: clientcmd.ConfigOverrides ---
//
//export clientcmd_ConfigOverrides_CTor
func clientcmd_ConfigOverrides_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ConfigOverrides(&clientcmd.ConfigOverrides{}))
}

//export clientcmd_ConfigOverrides_AuthInfo_Get
func clientcmd_ConfigOverrides_AuthInfo_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return handleFromPtr_api_AuthInfo(&op.AuthInfo)
}

//export clientcmd_ConfigOverrides_AuthInfo_Set
func clientcmd_ConfigOverrides_AuthInfo_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.AuthInfo = *ptrFromHandle_api_AuthInfo(val)
}

//export clientcmd_ConfigOverrides_ClusterDefaults_Get
func clientcmd_ConfigOverrides_ClusterDefaults_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return handleFromPtr_api_Cluster(&op.ClusterDefaults)
}

//export clientcmd_ConfigOverrides_ClusterDefaults_Set
func clientcmd_ConfigOverrides_ClusterDefaults_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.ClusterDefaults = *ptrFromHandle_api_Cluster(val)
}

//export clientcmd_ConfigOverrides_ClusterInfo_Get
func clientcmd_ConfigOverrides_ClusterInfo_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return handleFromPtr_api_Cluster(&op.ClusterInfo)
}

//export clientcmd_ConfigOverrides_ClusterInfo_Set
func clientcmd_ConfigOverrides_ClusterInfo_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.ClusterInfo = *ptrFromHandle_api_Cluster(val)
}

//export clientcmd_ConfigOverrides_Context_Get
func clientcmd_ConfigOverrides_Context_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return handleFromPtr_api_Context(&op.Context)
}

//export clientcmd_ConfigOverrides_Context_Set
func clientcmd_ConfigOverrides_Context_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.Context = *ptrFromHandle_api_Context(val)
}

//export clientcmd_ConfigOverrides_CurrentContext_Get
func clientcmd_ConfigOverrides_CurrentContext_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return C.CString(op.CurrentContext)
}

//export clientcmd_ConfigOverrides_CurrentContext_Set
func clientcmd_ConfigOverrides_CurrentContext_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.CurrentContext = C.GoString(val)
}

//export clientcmd_ConfigOverrides_Timeout_Get
func clientcmd_ConfigOverrides_Timeout_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	return C.CString(op.Timeout)
}

//export clientcmd_ConfigOverrides_Timeout_Set
func clientcmd_ConfigOverrides_Timeout_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_ConfigOverrides(handle)
	op.Timeout = C.GoString(val)
}

// --- wrapping struct: clientcmd.DeferredLoadingClientConfig ---
//
//export clientcmd_DeferredLoadingClientConfig_CTor
func clientcmd_DeferredLoadingClientConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_DeferredLoadingClientConfig(&clientcmd.DeferredLoadingClientConfig{}))
}

//export clientcmd_DeferredLoadingClientConfig_RawConfig
func clientcmd_DeferredLoadingClientConfig_RawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DeferredLoadingClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DeferredLoadingClientConfig{})).(*clientcmd.DeferredLoadingClientConfig).RawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_DeferredLoadingClientConfig_ClientConfig
func clientcmd_DeferredLoadingClientConfig_ClientConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DeferredLoadingClientConfig")
	if __err != nil {
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DeferredLoadingClientConfig{})).(*clientcmd.DeferredLoadingClientConfig).ClientConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_DeferredLoadingClientConfig_ConfigAccess
func clientcmd_DeferredLoadingClientConfig_ConfigAccess(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DeferredLoadingClientConfig")
	if __err != nil {
		return handleFromPtr_clientcmd_ConfigAccess(nil)
	}
	return handleFromPtr_clientcmd_ConfigAccess(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DeferredLoadingClientConfig{})).(*clientcmd.DeferredLoadingClientConfig).ConfigAccess())

}

// --- wrapping struct: clientcmd.MissingConfigError ---
//
//export clientcmd_MissingConfigError_CTor
func clientcmd_MissingConfigError_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_MissingConfigError(&clientcmd.MissingConfigError{}))
}

//export clientcmd_MissingConfigError_Missing_Get
func clientcmd_MissingConfigError_Missing_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_MissingConfigError(handle)
	return handleFromPtr_Slice_string(&op.Missing)
}

//export clientcmd_MissingConfigError_Missing_Set
func clientcmd_MissingConfigError_Missing_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_MissingConfigError(handle)
	op.Missing = deptrFromHandle_Slice_string(val)
}

//export clientcmd_MissingConfigError_Error
func clientcmd_MissingConfigError_Error(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.MissingConfigError")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.MissingConfigError{})).(*clientcmd.MissingConfigError).Error())

}

// --- wrapping struct: clientcmd.ClientConfigGetter ---
//
//export clientcmd_ClientConfigGetter_CTor
func clientcmd_ClientConfigGetter_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ClientConfigGetter(&clientcmd.ClientConfigGetter{}))
}

//export clientcmd_ClientConfigGetter_Load
func clientcmd_ClientConfigGetter_Load(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).Load()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ClientConfigGetter_GetLoadingPrecedence
func clientcmd_ClientConfigGetter_GetLoadingPrecedence(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).GetLoadingPrecedence()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_ClientConfigGetter_GetStartingConfig
func clientcmd_ClientConfigGetter_GetStartingConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).GetStartingConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ClientConfigGetter_GetDefaultFilename
func clientcmd_ClientConfigGetter_GetDefaultFilename(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).GetDefaultFilename())

}

//export clientcmd_ClientConfigGetter_IsExplicitFile
func clientcmd_ClientConfigGetter_IsExplicitFile(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).IsExplicitFile())

}

//export clientcmd_ClientConfigGetter_GetExplicitFile
func clientcmd_ClientConfigGetter_GetExplicitFile(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).GetExplicitFile())

}

//export clientcmd_ClientConfigGetter_IsDefaultConfig
func clientcmd_ClientConfigGetter_IsDefaultConfig(_handle CGoHandle, config CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigGetter")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigGetter{})).(*clientcmd.ClientConfigGetter).IsDefaultConfig(ptrFromHandle_Ptr_rest_Config(config)))

}

// --- wrapping struct: clientcmd.ClientConfigLoadingRules ---
//
//export clientcmd_ClientConfigLoadingRules_CTor
func clientcmd_ClientConfigLoadingRules_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ClientConfigLoadingRules(&clientcmd.ClientConfigLoadingRules{}))
}

//export clientcmd_ClientConfigLoadingRules_ExplicitPath_Get
func clientcmd_ClientConfigLoadingRules_ExplicitPath_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return C.CString(op.ExplicitPath)
}

//export clientcmd_ClientConfigLoadingRules_ExplicitPath_Set
func clientcmd_ClientConfigLoadingRules_ExplicitPath_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.ExplicitPath = C.GoString(val)
}

//export clientcmd_ClientConfigLoadingRules_Precedence_Get
func clientcmd_ClientConfigLoadingRules_Precedence_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return handleFromPtr_Slice_string(&op.Precedence)
}

//export clientcmd_ClientConfigLoadingRules_Precedence_Set
func clientcmd_ClientConfigLoadingRules_Precedence_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.Precedence = deptrFromHandle_Slice_string(val)
}

//export clientcmd_ClientConfigLoadingRules_MigrationRules_Get
func clientcmd_ClientConfigLoadingRules_MigrationRules_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return handleFromPtr_Map_string_string(&op.MigrationRules)
}

//export clientcmd_ClientConfigLoadingRules_MigrationRules_Set
func clientcmd_ClientConfigLoadingRules_MigrationRules_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.MigrationRules = deptrFromHandle_Map_string_string(val)
}

//export clientcmd_ClientConfigLoadingRules_DoNotResolvePaths_Get
func clientcmd_ClientConfigLoadingRules_DoNotResolvePaths_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return boolGoToPy(op.DoNotResolvePaths)
}

//export clientcmd_ClientConfigLoadingRules_DoNotResolvePaths_Set
func clientcmd_ClientConfigLoadingRules_DoNotResolvePaths_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.DoNotResolvePaths = boolPyToGo(val)
}

//export clientcmd_ClientConfigLoadingRules_DefaultClientConfig_Get
func clientcmd_ClientConfigLoadingRules_DefaultClientConfig_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return handleFromPtr_clientcmd_ClientConfig(op.DefaultClientConfig)
}

//export clientcmd_ClientConfigLoadingRules_DefaultClientConfig_Set
func clientcmd_ClientConfigLoadingRules_DefaultClientConfig_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.DefaultClientConfig = ptrFromHandle_clientcmd_ClientConfig(val)
}

//export clientcmd_ClientConfigLoadingRules_WarnIfAllMissing_Get
func clientcmd_ClientConfigLoadingRules_WarnIfAllMissing_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	return boolGoToPy(op.WarnIfAllMissing)
}

//export clientcmd_ClientConfigLoadingRules_WarnIfAllMissing_Set
func clientcmd_ClientConfigLoadingRules_WarnIfAllMissing_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_clientcmd_ClientConfigLoadingRules(handle)
	op.WarnIfAllMissing = boolPyToGo(val)
}

//export clientcmd_ClientConfigLoadingRules_Load
func clientcmd_ClientConfigLoadingRules_Load(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).Load()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ClientConfigLoadingRules_Migrate
func clientcmd_ClientConfigLoadingRules_Migrate(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).Migrate()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_ClientConfigLoadingRules_GetLoadingPrecedence
func clientcmd_ClientConfigLoadingRules_GetLoadingPrecedence(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).GetLoadingPrecedence()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_ClientConfigLoadingRules_GetStartingConfig
func clientcmd_ClientConfigLoadingRules_GetStartingConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).GetStartingConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_ClientConfigLoadingRules_GetDefaultFilename
func clientcmd_ClientConfigLoadingRules_GetDefaultFilename(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).GetDefaultFilename())

}

//export clientcmd_ClientConfigLoadingRules_IsExplicitFile
func clientcmd_ClientConfigLoadingRules_IsExplicitFile(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).IsExplicitFile())

}

//export clientcmd_ClientConfigLoadingRules_GetExplicitFile
func clientcmd_ClientConfigLoadingRules_GetExplicitFile(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).GetExplicitFile())

}

//export clientcmd_ClientConfigLoadingRules_IsDefaultConfig
func clientcmd_ClientConfigLoadingRules_IsDefaultConfig(_handle CGoHandle, config CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).IsDefaultConfig(ptrFromHandle_Ptr_rest_Config(config)))

}

//export clientcmd_ClientConfigLoadingRules_ResolvePaths
func clientcmd_ClientConfigLoadingRules_ResolvePaths(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.ClientConfigLoadingRules")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.ClientConfigLoadingRules{})).(*clientcmd.ClientConfigLoadingRules).ResolvePaths())

}

// --- wrapping struct: clientcmd.ClusterOverrideFlags ---
//
//export clientcmd_ClusterOverrideFlags_CTor
func clientcmd_ClusterOverrideFlags_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ClusterOverrideFlags(&clientcmd.ClusterOverrideFlags{}))
}

//export clientcmd_ClusterOverrideFlags_APIServer_Get
func clientcmd_ClusterOverrideFlags_APIServer_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.APIServer)
}

//export clientcmd_ClusterOverrideFlags_APIServer_Set
func clientcmd_ClusterOverrideFlags_APIServer_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.APIServer = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_APIVersion_Get
func clientcmd_ClusterOverrideFlags_APIVersion_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.APIVersion)
}

//export clientcmd_ClusterOverrideFlags_APIVersion_Set
func clientcmd_ClusterOverrideFlags_APIVersion_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.APIVersion = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_CertificateAuthority_Get
func clientcmd_ClusterOverrideFlags_CertificateAuthority_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.CertificateAuthority)
}

//export clientcmd_ClusterOverrideFlags_CertificateAuthority_Set
func clientcmd_ClusterOverrideFlags_CertificateAuthority_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.CertificateAuthority = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_InsecureSkipTLSVerify_Get
func clientcmd_ClusterOverrideFlags_InsecureSkipTLSVerify_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.InsecureSkipTLSVerify)
}

//export clientcmd_ClusterOverrideFlags_InsecureSkipTLSVerify_Set
func clientcmd_ClusterOverrideFlags_InsecureSkipTLSVerify_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.InsecureSkipTLSVerify = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_TLSServerName_Get
func clientcmd_ClusterOverrideFlags_TLSServerName_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.TLSServerName)
}

//export clientcmd_ClusterOverrideFlags_TLSServerName_Set
func clientcmd_ClusterOverrideFlags_TLSServerName_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.TLSServerName = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_ProxyURL_Get
func clientcmd_ClusterOverrideFlags_ProxyURL_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ProxyURL)
}

//export clientcmd_ClusterOverrideFlags_ProxyURL_Set
func clientcmd_ClusterOverrideFlags_ProxyURL_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.ProxyURL = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ClusterOverrideFlags_DisableCompression_Get
func clientcmd_ClusterOverrideFlags_DisableCompression_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.DisableCompression)
}

//export clientcmd_ClusterOverrideFlags_DisableCompression_Set
func clientcmd_ClusterOverrideFlags_DisableCompression_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ClusterOverrideFlags(handle)
	op.DisableCompression = *ptrFromHandle_clientcmd_FlagInfo(val)
}

// --- wrapping struct: clientcmd.ConfigOverrideFlags ---
//
//export clientcmd_ConfigOverrideFlags_CTor
func clientcmd_ConfigOverrideFlags_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ConfigOverrideFlags(&clientcmd.ConfigOverrideFlags{}))
}

//export clientcmd_ConfigOverrideFlags_AuthOverrideFlags_Get
func clientcmd_ConfigOverrideFlags_AuthOverrideFlags_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	return handleFromPtr_clientcmd_AuthOverrideFlags(&op.AuthOverrideFlags)
}

//export clientcmd_ConfigOverrideFlags_AuthOverrideFlags_Set
func clientcmd_ConfigOverrideFlags_AuthOverrideFlags_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	op.AuthOverrideFlags = *ptrFromHandle_clientcmd_AuthOverrideFlags(val)
}

//export clientcmd_ConfigOverrideFlags_ClusterOverrideFlags_Get
func clientcmd_ConfigOverrideFlags_ClusterOverrideFlags_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	return handleFromPtr_clientcmd_ClusterOverrideFlags(&op.ClusterOverrideFlags)
}

//export clientcmd_ConfigOverrideFlags_ClusterOverrideFlags_Set
func clientcmd_ConfigOverrideFlags_ClusterOverrideFlags_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	op.ClusterOverrideFlags = *ptrFromHandle_clientcmd_ClusterOverrideFlags(val)
}

//export clientcmd_ConfigOverrideFlags_ContextOverrideFlags_Get
func clientcmd_ConfigOverrideFlags_ContextOverrideFlags_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	return handleFromPtr_clientcmd_ContextOverrideFlags(&op.ContextOverrideFlags)
}

//export clientcmd_ConfigOverrideFlags_ContextOverrideFlags_Set
func clientcmd_ConfigOverrideFlags_ContextOverrideFlags_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	op.ContextOverrideFlags = *ptrFromHandle_clientcmd_ContextOverrideFlags(val)
}

//export clientcmd_ConfigOverrideFlags_CurrentContext_Get
func clientcmd_ConfigOverrideFlags_CurrentContext_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.CurrentContext)
}

//export clientcmd_ConfigOverrideFlags_CurrentContext_Set
func clientcmd_ConfigOverrideFlags_CurrentContext_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	op.CurrentContext = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ConfigOverrideFlags_Timeout_Get
func clientcmd_ConfigOverrideFlags_Timeout_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Timeout)
}

//export clientcmd_ConfigOverrideFlags_Timeout_Set
func clientcmd_ConfigOverrideFlags_Timeout_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ConfigOverrideFlags(handle)
	op.Timeout = *ptrFromHandle_clientcmd_FlagInfo(val)
}

// --- wrapping struct: clientcmd.PathOptions ---
//
//export clientcmd_PathOptions_CTor
func clientcmd_PathOptions_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_PathOptions(&clientcmd.PathOptions{}))
}

//export clientcmd_PathOptions_GlobalFile_Get
func clientcmd_PathOptions_GlobalFile_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	return C.CString(op.GlobalFile)
}

//export clientcmd_PathOptions_GlobalFile_Set
func clientcmd_PathOptions_GlobalFile_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	op.GlobalFile = C.GoString(val)
}

//export clientcmd_PathOptions_EnvVar_Get
func clientcmd_PathOptions_EnvVar_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	return C.CString(op.EnvVar)
}

//export clientcmd_PathOptions_EnvVar_Set
func clientcmd_PathOptions_EnvVar_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	op.EnvVar = C.GoString(val)
}

//export clientcmd_PathOptions_ExplicitFileFlag_Get
func clientcmd_PathOptions_ExplicitFileFlag_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	return C.CString(op.ExplicitFileFlag)
}

//export clientcmd_PathOptions_ExplicitFileFlag_Set
func clientcmd_PathOptions_ExplicitFileFlag_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	op.ExplicitFileFlag = C.GoString(val)
}

//export clientcmd_PathOptions_GlobalFileSubpath_Get
func clientcmd_PathOptions_GlobalFileSubpath_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	return C.CString(op.GlobalFileSubpath)
}

//export clientcmd_PathOptions_GlobalFileSubpath_Set
func clientcmd_PathOptions_GlobalFileSubpath_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	op.GlobalFileSubpath = C.GoString(val)
}

//export clientcmd_PathOptions_LoadingRules_Get
func clientcmd_PathOptions_LoadingRules_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	return handleFromPtr_Ptr_clientcmd_ClientConfigLoadingRules(op.LoadingRules)
}

//export clientcmd_PathOptions_LoadingRules_Set
func clientcmd_PathOptions_LoadingRules_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_PathOptions(handle)
	op.LoadingRules = ptrFromHandle_Ptr_clientcmd_ClientConfigLoadingRules(val)
}

//export clientcmd_PathOptions_GetEnvVarFiles
func clientcmd_PathOptions_GetEnvVarFiles(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).GetEnvVarFiles()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_PathOptions_GetLoadingPrecedence
func clientcmd_PathOptions_GetLoadingPrecedence(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return handleFromPtr_Slice_string(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).GetLoadingPrecedence()

	return handleFromPtr_Slice_string(&cret)
}

//export clientcmd_PathOptions_GetStartingConfig
func clientcmd_PathOptions_GetStartingConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).GetStartingConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_PathOptions_GetDefaultFilename
func clientcmd_PathOptions_GetDefaultFilename(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).GetDefaultFilename())

}

//export clientcmd_PathOptions_IsExplicitFile
func clientcmd_PathOptions_IsExplicitFile(_handle CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return boolGoToPy(false)
	}
	return boolGoToPy(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).IsExplicitFile())

}

//export clientcmd_PathOptions_GetExplicitFile
func clientcmd_PathOptions_GetExplicitFile(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PathOptions")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PathOptions{})).(*clientcmd.PathOptions).GetExplicitFile())

}

// --- wrapping struct: clientcmd.PromptingAuthLoader ---
//
//export clientcmd_PromptingAuthLoader_CTor
func clientcmd_PromptingAuthLoader_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_PromptingAuthLoader(&clientcmd.PromptingAuthLoader{}))
}

//export clientcmd_PromptingAuthLoader_LoadAuth
func clientcmd_PromptingAuthLoader_LoadAuth(_handle CGoHandle, path *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PromptingAuthLoader")
	if __err != nil {
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PromptingAuthLoader{})).(*clientcmd.PromptingAuthLoader).LoadAuth(C.GoString(path))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	return handleFromPtr_Ptr_auth_Info(cret)
}

//export clientcmd_PromptingAuthLoader_Prompt
func clientcmd_PromptingAuthLoader_Prompt(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.PromptingAuthLoader")
	if __err != nil {
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.PromptingAuthLoader{})).(*clientcmd.PromptingAuthLoader).Prompt()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_auth_Info(nil)
	}
	return handleFromPtr_Ptr_auth_Info(cret)
}

// --- wrapping struct: clientcmd.AuthOverrideFlags ---
//
//export clientcmd_AuthOverrideFlags_CTor
func clientcmd_AuthOverrideFlags_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_AuthOverrideFlags(&clientcmd.AuthOverrideFlags{}))
}

//export clientcmd_AuthOverrideFlags_ClientCertificate_Get
func clientcmd_AuthOverrideFlags_ClientCertificate_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ClientCertificate)
}

//export clientcmd_AuthOverrideFlags_ClientCertificate_Set
func clientcmd_AuthOverrideFlags_ClientCertificate_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.ClientCertificate = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_ClientKey_Get
func clientcmd_AuthOverrideFlags_ClientKey_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ClientKey)
}

//export clientcmd_AuthOverrideFlags_ClientKey_Set
func clientcmd_AuthOverrideFlags_ClientKey_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.ClientKey = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_Token_Get
func clientcmd_AuthOverrideFlags_Token_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Token)
}

//export clientcmd_AuthOverrideFlags_Token_Set
func clientcmd_AuthOverrideFlags_Token_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.Token = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_Impersonate_Get
func clientcmd_AuthOverrideFlags_Impersonate_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Impersonate)
}

//export clientcmd_AuthOverrideFlags_Impersonate_Set
func clientcmd_AuthOverrideFlags_Impersonate_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.Impersonate = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_ImpersonateUID_Get
func clientcmd_AuthOverrideFlags_ImpersonateUID_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ImpersonateUID)
}

//export clientcmd_AuthOverrideFlags_ImpersonateUID_Set
func clientcmd_AuthOverrideFlags_ImpersonateUID_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.ImpersonateUID = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_ImpersonateGroups_Get
func clientcmd_AuthOverrideFlags_ImpersonateGroups_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ImpersonateGroups)
}

//export clientcmd_AuthOverrideFlags_ImpersonateGroups_Set
func clientcmd_AuthOverrideFlags_ImpersonateGroups_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.ImpersonateGroups = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_Username_Get
func clientcmd_AuthOverrideFlags_Username_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Username)
}

//export clientcmd_AuthOverrideFlags_Username_Set
func clientcmd_AuthOverrideFlags_Username_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.Username = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_AuthOverrideFlags_Password_Get
func clientcmd_AuthOverrideFlags_Password_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Password)
}

//export clientcmd_AuthOverrideFlags_Password_Set
func clientcmd_AuthOverrideFlags_Password_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_AuthOverrideFlags(handle)
	op.Password = *ptrFromHandle_clientcmd_FlagInfo(val)
}

// --- wrapping struct: clientcmd.ContextOverrideFlags ---
//
//export clientcmd_ContextOverrideFlags_CTor
func clientcmd_ContextOverrideFlags_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_ContextOverrideFlags(&clientcmd.ContextOverrideFlags{}))
}

//export clientcmd_ContextOverrideFlags_ClusterName_Get
func clientcmd_ContextOverrideFlags_ClusterName_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.ClusterName)
}

//export clientcmd_ContextOverrideFlags_ClusterName_Set
func clientcmd_ContextOverrideFlags_ClusterName_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	op.ClusterName = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ContextOverrideFlags_AuthInfoName_Get
func clientcmd_ContextOverrideFlags_AuthInfoName_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.AuthInfoName)
}

//export clientcmd_ContextOverrideFlags_AuthInfoName_Set
func clientcmd_ContextOverrideFlags_AuthInfoName_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	op.AuthInfoName = *ptrFromHandle_clientcmd_FlagInfo(val)
}

//export clientcmd_ContextOverrideFlags_Namespace_Get
func clientcmd_ContextOverrideFlags_Namespace_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	return handleFromPtr_clientcmd_FlagInfo(&op.Namespace)
}

//export clientcmd_ContextOverrideFlags_Namespace_Set
func clientcmd_ContextOverrideFlags_Namespace_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_clientcmd_ContextOverrideFlags(handle)
	op.Namespace = *ptrFromHandle_clientcmd_FlagInfo(val)
}

// --- wrapping struct: clientcmd.DirectClientConfig ---
//
//export clientcmd_DirectClientConfig_CTor
func clientcmd_DirectClientConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_DirectClientConfig(&clientcmd.DirectClientConfig{}))
}

//export clientcmd_DirectClientConfig_RawConfig
func clientcmd_DirectClientConfig_RawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DirectClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig).RawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_DirectClientConfig_MergedRawConfig
func clientcmd_DirectClientConfig_MergedRawConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DirectClientConfig")
	if __err != nil {
		return handleFromPtr_api_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig).MergedRawConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_api_Config(nil)
	}
	return handleFromPtr_api_Config(&cret)
}

//export clientcmd_DirectClientConfig_ClientConfig
func clientcmd_DirectClientConfig_ClientConfig(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DirectClientConfig")
	if __err != nil {
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig).ClientConfig()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_DirectClientConfig_ConfigAccess
func clientcmd_DirectClientConfig_ConfigAccess(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DirectClientConfig")
	if __err != nil {
		return handleFromPtr_clientcmd_ConfigAccess(nil)
	}
	return handleFromPtr_clientcmd_ConfigAccess(gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig).ConfigAccess())

}

//export clientcmd_DirectClientConfig_ConfirmUsable
func clientcmd_DirectClientConfig_ConfirmUsable(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.DirectClientConfig")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(clientcmd.DirectClientConfig{})).(*clientcmd.DirectClientConfig).ConfirmUsable()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// --- wrapping struct: clientcmd.FlagInfo ---
//
//export clientcmd_FlagInfo_CTor
func clientcmd_FlagInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_clientcmd_FlagInfo(&clientcmd.FlagInfo{}))
}

//export clientcmd_FlagInfo_LongName_Get
func clientcmd_FlagInfo_LongName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	return C.CString(op.LongName)
}

//export clientcmd_FlagInfo_LongName_Set
func clientcmd_FlagInfo_LongName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	op.LongName = C.GoString(val)
}

//export clientcmd_FlagInfo_ShortName_Get
func clientcmd_FlagInfo_ShortName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	return C.CString(op.ShortName)
}

//export clientcmd_FlagInfo_ShortName_Set
func clientcmd_FlagInfo_ShortName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	op.ShortName = C.GoString(val)
}

//export clientcmd_FlagInfo_Default_Get
func clientcmd_FlagInfo_Default_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	return C.CString(op.Default)
}

//export clientcmd_FlagInfo_Default_Set
func clientcmd_FlagInfo_Default_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	op.Default = C.GoString(val)
}

//export clientcmd_FlagInfo_Description_Get
func clientcmd_FlagInfo_Description_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	return C.CString(op.Description)
}

//export clientcmd_FlagInfo_Description_Set
func clientcmd_FlagInfo_Description_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_clientcmd_FlagInfo(handle)
	op.Description = C.GoString(val)
}

//export clientcmd_FlagInfo_AddSecretAnnotation
func clientcmd_FlagInfo_AddSecretAnnotation(_handle CGoHandle, flags CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.FlagInfo")
	if __err != nil {
		return handleFromPtr_clientcmd_FlagInfo(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.FlagInfo{})).(*clientcmd.FlagInfo).AddSecretAnnotation(ptrFromHandle_Ptr_pflag_FlagSet(flags))

	return handleFromPtr_clientcmd_FlagInfo(&cret)
}

//export clientcmd_FlagInfo_BindStringArrayFlag
func clientcmd_FlagInfo_BindStringArrayFlag(_handle CGoHandle, flags CGoHandle, target CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*clientcmd.FlagInfo")
	if __err != nil {
		return handleFromPtr_clientcmd_FlagInfo(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(clientcmd.FlagInfo{})).(*clientcmd.FlagInfo).BindStringArrayFlag(ptrFromHandle_Ptr_pflag_FlagSet(flags), ptrFromHandle_Ptr_Slice_string(target))

	return handleFromPtr_clientcmd_FlagInfo(&cret)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export clientcmd_NewDefaultClientConfigLoadingRules
func clientcmd_NewDefaultClientConfigLoadingRules() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_clientcmd_ClientConfigLoadingRules(clientcmd.NewDefaultClientConfigLoadingRules())

}

//export clientcmd_RecommendedClusterOverrideFlags
func clientcmd_RecommendedClusterOverrideFlags(prefix *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.RecommendedClusterOverrideFlags(C.GoString(prefix))

	return handleFromPtr_clientcmd_ClusterOverrideFlags(&cret)
}

//export clientcmd_RecommendedConfigOverrideFlags
func clientcmd_RecommendedConfigOverrideFlags(prefix *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.RecommendedConfigOverrideFlags(C.GoString(prefix))

	return handleFromPtr_clientcmd_ConfigOverrideFlags(&cret)
}

//export clientcmd_NewDefaultPathOptions
func clientcmd_NewDefaultPathOptions() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_clientcmd_PathOptions(clientcmd.NewDefaultPathOptions())

}

//export clientcmd_NewPromptingAuthLoader
func clientcmd_NewPromptingAuthLoader(reader CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_clientcmd_PromptingAuthLoader(clientcmd.NewPromptingAuthLoader(ptrFromHandle_io_Reader(reader)))

}

//export clientcmd_RecommendedAuthOverrideFlags
func clientcmd_RecommendedAuthOverrideFlags(prefix *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.RecommendedAuthOverrideFlags(C.GoString(prefix))

	return handleFromPtr_clientcmd_AuthOverrideFlags(&cret)
}

//export clientcmd_RecommendedContextOverrideFlags
func clientcmd_RecommendedContextOverrideFlags(prefix *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.RecommendedContextOverrideFlags(C.GoString(prefix))

	return handleFromPtr_clientcmd_ContextOverrideFlags(&cret)
}

// ---- Functions ---

//export clientcmd_BindAuthInfoFlags
func clientcmd_BindAuthInfoFlags(authInfo CGoHandle, flags CGoHandle, flagNames CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go clientcmd.BindAuthInfoFlags(ptrFromHandle_Ptr_api_AuthInfo(authInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_AuthOverrideFlags(flagNames))
	} else {
		clientcmd.BindAuthInfoFlags(ptrFromHandle_Ptr_api_AuthInfo(authInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_AuthOverrideFlags(flagNames))
	}
}

//export clientcmd_BindClusterFlags
func clientcmd_BindClusterFlags(clusterInfo CGoHandle, flags CGoHandle, flagNames CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go clientcmd.BindClusterFlags(ptrFromHandle_Ptr_api_Cluster(clusterInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ClusterOverrideFlags(flagNames))
	} else {
		clientcmd.BindClusterFlags(ptrFromHandle_Ptr_api_Cluster(clusterInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ClusterOverrideFlags(flagNames))
	}
}

//export clientcmd_ConfirmUsable
func clientcmd_ConfirmUsable(config CGoHandle, passedContextName *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.ConfirmUsable(*ptrFromHandle_api_Config(config), C.GoString(passedContextName))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_RelativizePathWithNoBacksteps
func clientcmd_RelativizePathWithNoBacksteps(refs CGoHandle, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.RelativizePathWithNoBacksteps(deptrFromHandle_Slice_Ptr_string(refs), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_NewDefaultAuthLoader
func clientcmd_NewDefaultAuthLoader() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_AuthLoader(clientcmd.NewDefaultAuthLoader())

}

//export clientcmd_IsConfigurationInvalid
func clientcmd_IsConfigurationInvalid(err *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(clientcmd.IsConfigurationInvalid(errors.New(C.GoString(err))))

}

//export clientcmd_IsContextNotFound
func clientcmd_IsContextNotFound(err *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(clientcmd.IsContextNotFound(errors.New(C.GoString(err))))

}

//export clientcmd_IsEmptyConfig
func clientcmd_IsEmptyConfig(err *C.char) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(clientcmd.IsEmptyConfig(errors.New(C.GoString(err))))

}

//export clientcmd_Load
func clientcmd_Load(data CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.Load(deptrFromHandle_Slice_byte(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_RelativizeConfigPaths
func clientcmd_RelativizeConfigPaths(config CGoHandle, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.RelativizeConfigPaths(ptrFromHandle_Ptr_api_Config(config), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_ResolveConfigPaths
func clientcmd_ResolveConfigPaths(config CGoHandle, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.ResolveConfigPaths(ptrFromHandle_Ptr_api_Config(config), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_ResolvePaths
func clientcmd_ResolvePaths(refs CGoHandle, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.ResolvePaths(deptrFromHandle_Slice_Ptr_string(refs), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_GetConfigFileReferences
func clientcmd_GetConfigFileReferences(config CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.GetConfigFileReferences(ptrFromHandle_Ptr_api_Config(config))

	return handleFromPtr_Slice_Ptr_string(&cret)
}

//export clientcmd_GetConfigFromFileOrDie
func clientcmd_GetConfigFromFileOrDie(filename *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_Config(clientcmd.GetConfigFromFileOrDie(C.GoString(filename)))

}

//export clientcmd_MakeRelative
func clientcmd_MakeRelative(path *C.char, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.MakeRelative(C.GoString(path), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export clientcmd_NewNonInteractiveDeferredLoadingClientConfig
func clientcmd_NewNonInteractiveDeferredLoadingClientConfig(loader CGoHandle, overrides CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_ClientConfig(clientcmd.NewNonInteractiveDeferredLoadingClientConfig(ptrFromHandle_clientcmd_ClientConfigLoader(loader), ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides)))

}

//export clientcmd_Validate
func clientcmd_Validate(config CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.Validate(*ptrFromHandle_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_PersisterForUser
func clientcmd_PersisterForUser(configAccess CGoHandle, user *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_rest_AuthProviderConfigPersister(clientcmd.PersisterForUser(ptrFromHandle_clientcmd_ConfigAccess(configAccess), C.GoString(user)))

}

//export clientcmd_ResolveLocalPaths
func clientcmd_ResolveLocalPaths(config CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.ResolveLocalPaths(ptrFromHandle_Ptr_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_Write
func clientcmd_Write(config CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.Write(*ptrFromHandle_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export clientcmd_NewDefaultClientConfig
func clientcmd_NewDefaultClientConfig(config CGoHandle, overrides CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_OverridingClientConfig(clientcmd.NewDefaultClientConfig(*ptrFromHandle_api_Config(config), ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides)))

}

//export clientcmd_NewInteractiveClientConfig
func clientcmd_NewInteractiveClientConfig(config CGoHandle, contextName *C.char, overrides CGoHandle, fallbackReader CGoHandle, configAccess CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_OverridingClientConfig(clientcmd.NewInteractiveClientConfig(*ptrFromHandle_api_Config(config), C.GoString(contextName), ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides), ptrFromHandle_io_Reader(fallbackReader), ptrFromHandle_clientcmd_ConfigAccess(configAccess)))

}

//export clientcmd_NewEmptyConfigError
func clientcmd_NewEmptyConfigError(message *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.NewEmptyConfigError(C.GoString(message))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_NewInteractiveDeferredLoadingClientConfig
func clientcmd_NewInteractiveDeferredLoadingClientConfig(loader CGoHandle, overrides CGoHandle, fallbackReader CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_ClientConfig(clientcmd.NewInteractiveDeferredLoadingClientConfig(ptrFromHandle_clientcmd_ClientConfigLoader(loader), ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides), ptrFromHandle_io_Reader(fallbackReader)))

}

//export clientcmd_NewNonInteractiveClientConfig
func clientcmd_NewNonInteractiveClientConfig(config CGoHandle, contextName *C.char, overrides CGoHandle, configAccess CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_clientcmd_OverridingClientConfig(clientcmd.NewNonInteractiveClientConfig(*ptrFromHandle_api_Config(config), C.GoString(contextName), ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides), ptrFromHandle_clientcmd_ConfigAccess(configAccess)))

}

//export clientcmd_BindContextFlags
func clientcmd_BindContextFlags(contextInfo CGoHandle, flags CGoHandle, flagNames CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go clientcmd.BindContextFlags(ptrFromHandle_Ptr_api_Context(contextInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ContextOverrideFlags(flagNames))
	} else {
		clientcmd.BindContextFlags(ptrFromHandle_Ptr_api_Context(contextInfo), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ContextOverrideFlags(flagNames))
	}
}

//export clientcmd_GetClusterFileReferences
func clientcmd_GetClusterFileReferences(cluster CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.GetClusterFileReferences(ptrFromHandle_Ptr_api_Cluster(cluster))

	return handleFromPtr_Slice_Ptr_string(&cret)
}

//export clientcmd_LoadFromFile
func clientcmd_LoadFromFile(filename *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.LoadFromFile(C.GoString(filename))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(cret)
}

//export clientcmd_NewClientConfigFromBytes
func clientcmd_NewClientConfigFromBytes(configBytes CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.NewClientConfigFromBytes(deptrFromHandle_Slice_byte(configBytes))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_clientcmd_OverridingClientConfig(nil)
	}
	return handleFromPtr_clientcmd_OverridingClientConfig(cret)
}

//export clientcmd_RESTConfigFromKubeConfig
func clientcmd_RESTConfigFromKubeConfig(configBytes CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.RESTConfigFromKubeConfig(deptrFromHandle_Slice_byte(configBytes))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_RelativizeAuthInfoLocalPaths
func clientcmd_RelativizeAuthInfoLocalPaths(authInfo CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.RelativizeAuthInfoLocalPaths(ptrFromHandle_Ptr_api_AuthInfo(authInfo))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_RemoveNamespacesPrefix
func clientcmd_RemoveNamespacesPrefix(value *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.RemoveNamespacesPrefix(C.GoString(value))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export clientcmd_WriteToFile
func clientcmd_WriteToFile(config CGoHandle, filename *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.WriteToFile(*ptrFromHandle_api_Config(config), C.GoString(filename))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_BindOverrideFlags
func clientcmd_BindOverrideFlags(overrides CGoHandle, flags CGoHandle, flagNames CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go clientcmd.BindOverrideFlags(ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ConfigOverrideFlags(flagNames))
	} else {
		clientcmd.BindOverrideFlags(ptrFromHandle_Ptr_clientcmd_ConfigOverrides(overrides), ptrFromHandle_Ptr_pflag_FlagSet(flags), *ptrFromHandle_clientcmd_ConfigOverrideFlags(flagNames))
	}
}

//export clientcmd_ParseTimeout
func clientcmd_ParseTimeout(duration *C.char) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.ParseTimeout(C.GoString(duration))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.longlong(int64(0))
	}
	return C.longlong(int64(cret))
}

//export clientcmd_RelativizeClusterLocalPaths
func clientcmd_RelativizeClusterLocalPaths(cluster CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.RelativizeClusterLocalPaths(ptrFromHandle_Ptr_api_Cluster(cluster))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export clientcmd_BuildConfigFromFlags
func clientcmd_BuildConfigFromFlags(masterUrl *C.char, kubeconfigPath *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := clientcmd.BuildConfigFromFlags(C.GoString(masterUrl), C.GoString(kubeconfigPath))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Ptr_rest_Config(nil)
	}
	return handleFromPtr_Ptr_rest_Config(cret)
}

//export clientcmd_GetAuthInfoFileReferences
func clientcmd_GetAuthInfoFileReferences(authInfo CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := clientcmd.GetAuthInfoFileReferences(ptrFromHandle_Ptr_api_AuthInfo(authInfo))

	return handleFromPtr_Slice_Ptr_string(&cret)
}

//export clientcmd_ModifyConfig
func clientcmd_ModifyConfig(configAccess CGoHandle, newConfig CGoHandle, relativizePaths C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = clientcmd.ModifyConfig(ptrFromHandle_clientcmd_ConfigAccess(configAccess), *ptrFromHandle_api_Config(newConfig), boolPyToGo(relativizePaths))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// ---- Package: api ---

// ---- Types ---

// Converters for pointer handles for type: *api.AuthInfo
func ptrFromHandle_Ptr_api_AuthInfo(h CGoHandle) *api.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.AuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.AuthInfo{})).(*api.AuthInfo)
}
func handleFromPtr_Ptr_api_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.AuthInfo", p))
}

// Converters for pointer handles for type: *api.AuthProviderConfig
func ptrFromHandle_Ptr_api_AuthProviderConfig(h CGoHandle) *api.AuthProviderConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.AuthProviderConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig)
}
func handleFromPtr_Ptr_api_AuthProviderConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.AuthProviderConfig", p))
}

// Converters for pointer handles for type: *api.Cluster
func ptrFromHandle_Ptr_api_Cluster(h CGoHandle) *api.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.Cluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Cluster{})).(*api.Cluster)
}
func handleFromPtr_Ptr_api_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.Cluster", p))
}

// Converters for pointer handles for type: *api.Config
func ptrFromHandle_Ptr_api_Config(h CGoHandle) *api.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Config{})).(*api.Config)
}
func handleFromPtr_Ptr_api_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.Config", p))
}

// Converters for pointer handles for type: *api.Context
func ptrFromHandle_Ptr_api_Context(h CGoHandle) *api.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Context{})).(*api.Context)
}
func handleFromPtr_Ptr_api_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.Context", p))
}

// Converters for pointer handles for type: *api.ExecConfig
func ptrFromHandle_Ptr_api_ExecConfig(h CGoHandle) *api.ExecConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.ExecConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig)
}
func handleFromPtr_Ptr_api_ExecConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.ExecConfig", p))
}

// Converters for pointer handles for type: *api.ExecEnvVar
func ptrFromHandle_Ptr_api_ExecEnvVar(h CGoHandle) *api.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.ExecEnvVar")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.ExecEnvVar{})).(*api.ExecEnvVar)
}
func handleFromPtr_Ptr_api_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.ExecEnvVar", p))
}

// Converters for pointer handles for type: *api.Preferences
func ptrFromHandle_Ptr_api_Preferences(h CGoHandle) *api.Preferences {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*api.Preferences")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Preferences{})).(*api.Preferences)
}
func handleFromPtr_Ptr_api_Preferences(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*api.Preferences", p))
}

// Converters for non-pointer handles for type: api.AuthInfo
func ptrFromHandle_api_AuthInfo(h CGoHandle) *api.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.AuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.AuthInfo{})).(*api.AuthInfo)
}
func handleFromPtr_api_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.AuthInfo", p))
}

// Converters for non-pointer handles for type: api.AuthProviderConfig
func ptrFromHandle_api_AuthProviderConfig(h CGoHandle) *api.AuthProviderConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.AuthProviderConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig)
}
func handleFromPtr_api_AuthProviderConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.AuthProviderConfig", p))
}

// Converters for non-pointer handles for type: api.Cluster
func ptrFromHandle_api_Cluster(h CGoHandle) *api.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.Cluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Cluster{})).(*api.Cluster)
}
func handleFromPtr_api_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.Cluster", p))
}

// Converters for non-pointer handles for type: api.Config
func ptrFromHandle_api_Config(h CGoHandle) *api.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Config{})).(*api.Config)
}
func handleFromPtr_api_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.Config", p))
}

// Converters for non-pointer handles for type: api.Context
func ptrFromHandle_api_Context(h CGoHandle) *api.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Context{})).(*api.Context)
}
func handleFromPtr_api_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.Context", p))
}

// Converters for non-pointer handles for type: api.ExecConfig
func ptrFromHandle_api_ExecConfig(h CGoHandle) *api.ExecConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.ExecConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig)
}
func handleFromPtr_api_ExecConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.ExecConfig", p))
}

// Converters for non-pointer handles for type: api.ExecEnvVar
func ptrFromHandle_api_ExecEnvVar(h CGoHandle) *api.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.ExecEnvVar")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.ExecEnvVar{})).(*api.ExecEnvVar)
}
func handleFromPtr_api_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.ExecEnvVar", p))
}

// Converters for non-pointer handles for type: api.Preferences
func ptrFromHandle_api_Preferences(h CGoHandle) *api.Preferences {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "api.Preferences")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(api.Preferences{})).(*api.Preferences)
}
func handleFromPtr_api_Preferences(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("api.Preferences", p))
}

// ---- Global Variables: can only use functions to access ---
//
//export api_SchemeGroupVersion
func api_SchemeGroupVersion() CGoHandle {
	return handleFromPtr_schema_GroupVersion(&api.SchemeGroupVersion)
}

//export api_Set_SchemeGroupVersion
func api_Set_SchemeGroupVersion(val CGoHandle) {
	api.SchemeGroupVersion = *ptrFromHandle_schema_GroupVersion(val)
}

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: api.Config ---
//
//export api_Config_CTor
func api_Config_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_Config(&api.Config{}))
}

//export api_Config_Kind_Get
func api_Config_Kind_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Config(handle)
	return C.CString(op.Kind)
}

//export api_Config_Kind_Set
func api_Config_Kind_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Config(handle)
	op.Kind = C.GoString(val)
}

//export api_Config_APIVersion_Get
func api_Config_APIVersion_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Config(handle)
	return C.CString(op.APIVersion)
}

//export api_Config_APIVersion_Set
func api_Config_APIVersion_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Config(handle)
	op.APIVersion = C.GoString(val)
}

//export api_Config_Preferences_Get
func api_Config_Preferences_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Config(handle)
	return handleFromPtr_api_Preferences(&op.Preferences)
}

//export api_Config_Preferences_Set
func api_Config_Preferences_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Config(handle)
	op.Preferences = *ptrFromHandle_api_Preferences(val)
}

//export api_Config_Clusters_Get
func api_Config_Clusters_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Config(handle)
	return handleFromPtr_Map_string_Ptr_api_Cluster(&op.Clusters)
}

//export api_Config_Clusters_Set
func api_Config_Clusters_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Config(handle)
	op.Clusters = deptrFromHandle_Map_string_Ptr_api_Cluster(val)
}

//export api_Config_AuthInfos_Get
func api_Config_AuthInfos_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Config(handle)
	return handleFromPtr_Map_string_Ptr_api_AuthInfo(&op.AuthInfos)
}

//export api_Config_AuthInfos_Set
func api_Config_AuthInfos_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Config(handle)
	op.AuthInfos = deptrFromHandle_Map_string_Ptr_api_AuthInfo(val)
}

//export api_Config_Contexts_Get
func api_Config_Contexts_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Config(handle)
	return handleFromPtr_Map_string_Ptr_api_Context(&op.Contexts)
}

//export api_Config_Contexts_Set
func api_Config_Contexts_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Config(handle)
	op.Contexts = deptrFromHandle_Map_string_Ptr_api_Context(val)
}

//export api_Config_CurrentContext_Get
func api_Config_CurrentContext_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Config(handle)
	return C.CString(op.CurrentContext)
}

//export api_Config_CurrentContext_Set
func api_Config_CurrentContext_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Config(handle)
	op.CurrentContext = C.GoString(val)
}

//export api_Config_Extensions_Get
func api_Config_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Config(handle)
	return handleFromPtr_Map_string_runtime_Object(&op.Extensions)
}

//export api_Config_Extensions_Set
func api_Config_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Config(handle)
	op.Extensions = deptrFromHandle_Map_string_runtime_Object(val)
}

//export api_Config_GetObjectKind
func api_Config_GetObjectKind(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return handleFromPtr_schema_ObjectKind(nil)
	}
	return handleFromPtr_schema_ObjectKind(gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).GetObjectKind())

}

//export api_Config_SetGroupVersionKind
func api_Config_SetGroupVersionKind(_handle CGoHandle, gvk CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).SetGroupVersionKind(*ptrFromHandle_schema_GroupVersionKind(gvk))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).SetGroupVersionKind(*ptrFromHandle_schema_GroupVersionKind(gvk))
	}
}

//export api_Config_GroupVersionKind
func api_Config_GroupVersionKind(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return handleFromPtr_schema_GroupVersionKind(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).GroupVersionKind()

	return handleFromPtr_schema_GroupVersionKind(&cret)
}

//export api_Config_DeepCopyInto
func api_Config_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).DeepCopyInto(ptrFromHandle_Ptr_api_Config(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).DeepCopyInto(ptrFromHandle_Ptr_api_Config(out))
	}
}

//export api_Config_DeepCopy
func api_Config_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return handleFromPtr_Ptr_api_Config(nil)
	}
	return handleFromPtr_Ptr_api_Config(gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).DeepCopy())

}

//export api_Config_DeepCopyObject
func api_Config_DeepCopyObject(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Config")
	if __err != nil {
		return handleFromPtr_runtime_Object(nil)
	}
	return handleFromPtr_runtime_Object(gopyh.Embed(vifc, reflect.TypeOf(api.Config{})).(*api.Config).DeepCopyObject())

}

// --- wrapping struct: api.Context ---
//
//export api_Context_CTor
func api_Context_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_Context(&api.Context{}))
}

//export api_Context_LocationOfOrigin_Get
func api_Context_LocationOfOrigin_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Context(handle)
	return C.CString(op.LocationOfOrigin)
}

//export api_Context_LocationOfOrigin_Set
func api_Context_LocationOfOrigin_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Context(handle)
	op.LocationOfOrigin = C.GoString(val)
}

//export api_Context_Cluster_Get
func api_Context_Cluster_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Context(handle)
	return C.CString(op.Cluster)
}

//export api_Context_Cluster_Set
func api_Context_Cluster_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Context(handle)
	op.Cluster = C.GoString(val)
}

//export api_Context_AuthInfo_Get
func api_Context_AuthInfo_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Context(handle)
	return C.CString(op.AuthInfo)
}

//export api_Context_AuthInfo_Set
func api_Context_AuthInfo_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Context(handle)
	op.AuthInfo = C.GoString(val)
}

//export api_Context_Namespace_Get
func api_Context_Namespace_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Context(handle)
	return C.CString(op.Namespace)
}

//export api_Context_Namespace_Set
func api_Context_Namespace_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Context(handle)
	op.Namespace = C.GoString(val)
}

//export api_Context_Extensions_Get
func api_Context_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Context(handle)
	return handleFromPtr_Map_string_runtime_Object(&op.Extensions)
}

//export api_Context_Extensions_Set
func api_Context_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Context(handle)
	op.Extensions = deptrFromHandle_Map_string_runtime_Object(val)
}

//export api_Context_DeepCopyInto
func api_Context_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Context")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.Context{})).(*api.Context).DeepCopyInto(ptrFromHandle_Ptr_api_Context(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.Context{})).(*api.Context).DeepCopyInto(ptrFromHandle_Ptr_api_Context(out))
	}
}

//export api_Context_DeepCopy
func api_Context_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Context")
	if __err != nil {
		return handleFromPtr_Ptr_api_Context(nil)
	}
	return handleFromPtr_Ptr_api_Context(gopyh.Embed(vifc, reflect.TypeOf(api.Context{})).(*api.Context).DeepCopy())

}

// --- wrapping struct: api.ExecConfig ---
//
//export api_ExecConfig_CTor
func api_ExecConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_ExecConfig(&api.ExecConfig{}))
}

//export api_ExecConfig_Command_Get
func api_ExecConfig_Command_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return C.CString(op.Command)
}

//export api_ExecConfig_Command_Set
func api_ExecConfig_Command_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.Command = C.GoString(val)
}

//export api_ExecConfig_Args_Get
func api_ExecConfig_Args_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_ExecConfig(handle)
	return handleFromPtr_Slice_string(&op.Args)
}

//export api_ExecConfig_Args_Set
func api_ExecConfig_Args_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.Args = deptrFromHandle_Slice_string(val)
}

//export api_ExecConfig_Env_Get
func api_ExecConfig_Env_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_ExecConfig(handle)
	return handleFromPtr_Slice_api_ExecEnvVar(&op.Env)
}

//export api_ExecConfig_Env_Set
func api_ExecConfig_Env_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.Env = deptrFromHandle_Slice_api_ExecEnvVar(val)
}

//export api_ExecConfig_APIVersion_Get
func api_ExecConfig_APIVersion_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return C.CString(op.APIVersion)
}

//export api_ExecConfig_APIVersion_Set
func api_ExecConfig_APIVersion_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.APIVersion = C.GoString(val)
}

//export api_ExecConfig_InstallHint_Get
func api_ExecConfig_InstallHint_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return C.CString(op.InstallHint)
}

//export api_ExecConfig_InstallHint_Set
func api_ExecConfig_InstallHint_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.InstallHint = C.GoString(val)
}

//export api_ExecConfig_ProvideClusterInfo_Get
func api_ExecConfig_ProvideClusterInfo_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return boolGoToPy(op.ProvideClusterInfo)
}

//export api_ExecConfig_ProvideClusterInfo_Set
func api_ExecConfig_ProvideClusterInfo_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.ProvideClusterInfo = boolPyToGo(val)
}

//export api_ExecConfig_Config_Get
func api_ExecConfig_Config_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_ExecConfig(handle)
	return handleFromPtr_runtime_Object(op.Config)
}

//export api_ExecConfig_Config_Set
func api_ExecConfig_Config_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.Config = ptrFromHandle_runtime_Object(val)
}

//export api_ExecConfig_InteractiveMode_Get
func api_ExecConfig_InteractiveMode_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return C.CString(string(op.InteractiveMode))
}

//export api_ExecConfig_InteractiveMode_Set
func api_ExecConfig_InteractiveMode_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.InteractiveMode = api.ExecInteractiveMode(C.GoString(val))
}

//export api_ExecConfig_StdinUnavailable_Get
func api_ExecConfig_StdinUnavailable_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return boolGoToPy(op.StdinUnavailable)
}

//export api_ExecConfig_StdinUnavailable_Set
func api_ExecConfig_StdinUnavailable_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.StdinUnavailable = boolPyToGo(val)
}

//export api_ExecConfig_StdinUnavailableMessage_Get
func api_ExecConfig_StdinUnavailableMessage_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecConfig(handle)
	return C.CString(op.StdinUnavailableMessage)
}

//export api_ExecConfig_StdinUnavailableMessage_Set
func api_ExecConfig_StdinUnavailableMessage_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecConfig(handle)
	op.StdinUnavailableMessage = C.GoString(val)
}

//export api_ExecConfig_GoString
func api_ExecConfig_GoString(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecConfig")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig).GoString())

}

//export api_ExecConfig_String
func api_ExecConfig_String(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecConfig")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig).String())

}

//export api_ExecConfig_DeepCopyInto
func api_ExecConfig_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecConfig")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig).DeepCopyInto(ptrFromHandle_Ptr_api_ExecConfig(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig).DeepCopyInto(ptrFromHandle_Ptr_api_ExecConfig(out))
	}
}

//export api_ExecConfig_DeepCopy
func api_ExecConfig_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecConfig")
	if __err != nil {
		return handleFromPtr_Ptr_api_ExecConfig(nil)
	}
	return handleFromPtr_Ptr_api_ExecConfig(gopyh.Embed(vifc, reflect.TypeOf(api.ExecConfig{})).(*api.ExecConfig).DeepCopy())

}

// --- wrapping struct: api.ExecEnvVar ---
//
//export api_ExecEnvVar_CTor
func api_ExecEnvVar_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_ExecEnvVar(&api.ExecEnvVar{}))
}

//export api_ExecEnvVar_Name_Get
func api_ExecEnvVar_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecEnvVar(handle)
	return C.CString(op.Name)
}

//export api_ExecEnvVar_Name_Set
func api_ExecEnvVar_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecEnvVar(handle)
	op.Name = C.GoString(val)
}

//export api_ExecEnvVar_Value_Get
func api_ExecEnvVar_Value_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_ExecEnvVar(handle)
	return C.CString(op.Value)
}

//export api_ExecEnvVar_Value_Set
func api_ExecEnvVar_Value_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_ExecEnvVar(handle)
	op.Value = C.GoString(val)
}

//export api_ExecEnvVar_DeepCopyInto
func api_ExecEnvVar_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecEnvVar")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.ExecEnvVar{})).(*api.ExecEnvVar).DeepCopyInto(ptrFromHandle_Ptr_api_ExecEnvVar(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.ExecEnvVar{})).(*api.ExecEnvVar).DeepCopyInto(ptrFromHandle_Ptr_api_ExecEnvVar(out))
	}
}

//export api_ExecEnvVar_DeepCopy
func api_ExecEnvVar_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.ExecEnvVar")
	if __err != nil {
		return handleFromPtr_Ptr_api_ExecEnvVar(nil)
	}
	return handleFromPtr_Ptr_api_ExecEnvVar(gopyh.Embed(vifc, reflect.TypeOf(api.ExecEnvVar{})).(*api.ExecEnvVar).DeepCopy())

}

// --- wrapping struct: api.Preferences ---
//
//export api_Preferences_CTor
func api_Preferences_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_Preferences(&api.Preferences{}))
}

//export api_Preferences_Colors_Get
func api_Preferences_Colors_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_api_Preferences(handle)
	return boolGoToPy(op.Colors)
}

//export api_Preferences_Colors_Set
func api_Preferences_Colors_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_api_Preferences(handle)
	op.Colors = boolPyToGo(val)
}

//export api_Preferences_Extensions_Get
func api_Preferences_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Preferences(handle)
	return handleFromPtr_Map_string_runtime_Object(&op.Extensions)
}

//export api_Preferences_Extensions_Set
func api_Preferences_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Preferences(handle)
	op.Extensions = deptrFromHandle_Map_string_runtime_Object(val)
}

//export api_Preferences_DeepCopyInto
func api_Preferences_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Preferences")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.Preferences{})).(*api.Preferences).DeepCopyInto(ptrFromHandle_Ptr_api_Preferences(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.Preferences{})).(*api.Preferences).DeepCopyInto(ptrFromHandle_Ptr_api_Preferences(out))
	}
}

//export api_Preferences_DeepCopy
func api_Preferences_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Preferences")
	if __err != nil {
		return handleFromPtr_Ptr_api_Preferences(nil)
	}
	return handleFromPtr_Ptr_api_Preferences(gopyh.Embed(vifc, reflect.TypeOf(api.Preferences{})).(*api.Preferences).DeepCopy())

}

// --- wrapping struct: api.AuthInfo ---
//
//export api_AuthInfo_CTor
func api_AuthInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_AuthInfo(&api.AuthInfo{}))
}

//export api_AuthInfo_LocationOfOrigin_Get
func api_AuthInfo_LocationOfOrigin_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.LocationOfOrigin)
}

//export api_AuthInfo_LocationOfOrigin_Set
func api_AuthInfo_LocationOfOrigin_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.LocationOfOrigin = C.GoString(val)
}

//export api_AuthInfo_ClientCertificate_Get
func api_AuthInfo_ClientCertificate_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.ClientCertificate)
}

//export api_AuthInfo_ClientCertificate_Set
func api_AuthInfo_ClientCertificate_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ClientCertificate = C.GoString(val)
}

//export api_AuthInfo_ClientCertificateData_Get
func api_AuthInfo_ClientCertificateData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Slice_byte(&op.ClientCertificateData)
}

//export api_AuthInfo_ClientCertificateData_Set
func api_AuthInfo_ClientCertificateData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ClientCertificateData = deptrFromHandle_Slice_byte(val)
}

//export api_AuthInfo_ClientKey_Get
func api_AuthInfo_ClientKey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.ClientKey)
}

//export api_AuthInfo_ClientKey_Set
func api_AuthInfo_ClientKey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ClientKey = C.GoString(val)
}

//export api_AuthInfo_ClientKeyData_Get
func api_AuthInfo_ClientKeyData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Slice_byte(&op.ClientKeyData)
}

//export api_AuthInfo_ClientKeyData_Set
func api_AuthInfo_ClientKeyData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ClientKeyData = deptrFromHandle_Slice_byte(val)
}

//export api_AuthInfo_Token_Get
func api_AuthInfo_Token_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.Token)
}

//export api_AuthInfo_Token_Set
func api_AuthInfo_Token_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Token = C.GoString(val)
}

//export api_AuthInfo_TokenFile_Get
func api_AuthInfo_TokenFile_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.TokenFile)
}

//export api_AuthInfo_TokenFile_Set
func api_AuthInfo_TokenFile_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.TokenFile = C.GoString(val)
}

//export api_AuthInfo_Impersonate_Get
func api_AuthInfo_Impersonate_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.Impersonate)
}

//export api_AuthInfo_Impersonate_Set
func api_AuthInfo_Impersonate_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Impersonate = C.GoString(val)
}

//export api_AuthInfo_ImpersonateUID_Get
func api_AuthInfo_ImpersonateUID_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.ImpersonateUID)
}

//export api_AuthInfo_ImpersonateUID_Set
func api_AuthInfo_ImpersonateUID_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ImpersonateUID = C.GoString(val)
}

//export api_AuthInfo_ImpersonateGroups_Get
func api_AuthInfo_ImpersonateGroups_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Slice_string(&op.ImpersonateGroups)
}

//export api_AuthInfo_ImpersonateGroups_Set
func api_AuthInfo_ImpersonateGroups_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ImpersonateGroups = deptrFromHandle_Slice_string(val)
}

//export api_AuthInfo_ImpersonateUserExtra_Get
func api_AuthInfo_ImpersonateUserExtra_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Map_string_Slice_string(&op.ImpersonateUserExtra)
}

//export api_AuthInfo_ImpersonateUserExtra_Set
func api_AuthInfo_ImpersonateUserExtra_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.ImpersonateUserExtra = deptrFromHandle_Map_string_Slice_string(val)
}

//export api_AuthInfo_Username_Get
func api_AuthInfo_Username_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.Username)
}

//export api_AuthInfo_Username_Set
func api_AuthInfo_Username_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Username = C.GoString(val)
}

//export api_AuthInfo_Password_Get
func api_AuthInfo_Password_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthInfo(handle)
	return C.CString(op.Password)
}

//export api_AuthInfo_Password_Set
func api_AuthInfo_Password_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Password = C.GoString(val)
}

//export api_AuthInfo_AuthProvider_Get
func api_AuthInfo_AuthProvider_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Ptr_api_AuthProviderConfig(op.AuthProvider)
}

//export api_AuthInfo_AuthProvider_Set
func api_AuthInfo_AuthProvider_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.AuthProvider = ptrFromHandle_Ptr_api_AuthProviderConfig(val)
}

//export api_AuthInfo_Exec_Get
func api_AuthInfo_Exec_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Ptr_api_ExecConfig(op.Exec)
}

//export api_AuthInfo_Exec_Set
func api_AuthInfo_Exec_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Exec = ptrFromHandle_Ptr_api_ExecConfig(val)
}

//export api_AuthInfo_Extensions_Get
func api_AuthInfo_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthInfo(handle)
	return handleFromPtr_Map_string_runtime_Object(&op.Extensions)
}

//export api_AuthInfo_Extensions_Set
func api_AuthInfo_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthInfo(handle)
	op.Extensions = deptrFromHandle_Map_string_runtime_Object(val)
}

//export api_AuthInfo_DeepCopyInto
func api_AuthInfo_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthInfo")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.AuthInfo{})).(*api.AuthInfo).DeepCopyInto(ptrFromHandle_Ptr_api_AuthInfo(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.AuthInfo{})).(*api.AuthInfo).DeepCopyInto(ptrFromHandle_Ptr_api_AuthInfo(out))
	}
}

//export api_AuthInfo_DeepCopy
func api_AuthInfo_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthInfo")
	if __err != nil {
		return handleFromPtr_Ptr_api_AuthInfo(nil)
	}
	return handleFromPtr_Ptr_api_AuthInfo(gopyh.Embed(vifc, reflect.TypeOf(api.AuthInfo{})).(*api.AuthInfo).DeepCopy())

}

// --- wrapping struct: api.AuthProviderConfig ---
//
//export api_AuthProviderConfig_CTor
func api_AuthProviderConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_AuthProviderConfig(&api.AuthProviderConfig{}))
}

//export api_AuthProviderConfig_Name_Get
func api_AuthProviderConfig_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_AuthProviderConfig(handle)
	return C.CString(op.Name)
}

//export api_AuthProviderConfig_Name_Set
func api_AuthProviderConfig_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_AuthProviderConfig(handle)
	op.Name = C.GoString(val)
}

//export api_AuthProviderConfig_Config_Get
func api_AuthProviderConfig_Config_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_AuthProviderConfig(handle)
	return handleFromPtr_Map_string_string(&op.Config)
}

//export api_AuthProviderConfig_Config_Set
func api_AuthProviderConfig_Config_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_AuthProviderConfig(handle)
	op.Config = deptrFromHandle_Map_string_string(val)
}

//export api_AuthProviderConfig_GoString
func api_AuthProviderConfig_GoString(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthProviderConfig")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig).GoString())

}

//export api_AuthProviderConfig_String
func api_AuthProviderConfig_String(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthProviderConfig")
	if __err != nil {
		return C.CString("")
	}
	return C.CString(gopyh.Embed(vifc, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig).String())

}

//export api_AuthProviderConfig_DeepCopyInto
func api_AuthProviderConfig_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthProviderConfig")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig).DeepCopyInto(ptrFromHandle_Ptr_api_AuthProviderConfig(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig).DeepCopyInto(ptrFromHandle_Ptr_api_AuthProviderConfig(out))
	}
}

//export api_AuthProviderConfig_DeepCopy
func api_AuthProviderConfig_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.AuthProviderConfig")
	if __err != nil {
		return handleFromPtr_Ptr_api_AuthProviderConfig(nil)
	}
	return handleFromPtr_Ptr_api_AuthProviderConfig(gopyh.Embed(vifc, reflect.TypeOf(api.AuthProviderConfig{})).(*api.AuthProviderConfig).DeepCopy())

}

// --- wrapping struct: api.Cluster ---
//
//export api_Cluster_CTor
func api_Cluster_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_api_Cluster(&api.Cluster{}))
}

//export api_Cluster_LocationOfOrigin_Get
func api_Cluster_LocationOfOrigin_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return C.CString(op.LocationOfOrigin)
}

//export api_Cluster_LocationOfOrigin_Set
func api_Cluster_LocationOfOrigin_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.LocationOfOrigin = C.GoString(val)
}

//export api_Cluster_Server_Get
func api_Cluster_Server_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return C.CString(op.Server)
}

//export api_Cluster_Server_Set
func api_Cluster_Server_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.Server = C.GoString(val)
}

//export api_Cluster_TLSServerName_Get
func api_Cluster_TLSServerName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return C.CString(op.TLSServerName)
}

//export api_Cluster_TLSServerName_Set
func api_Cluster_TLSServerName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.TLSServerName = C.GoString(val)
}

//export api_Cluster_InsecureSkipTLSVerify_Get
func api_Cluster_InsecureSkipTLSVerify_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return boolGoToPy(op.InsecureSkipTLSVerify)
}

//export api_Cluster_InsecureSkipTLSVerify_Set
func api_Cluster_InsecureSkipTLSVerify_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.InsecureSkipTLSVerify = boolPyToGo(val)
}

//export api_Cluster_CertificateAuthority_Get
func api_Cluster_CertificateAuthority_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return C.CString(op.CertificateAuthority)
}

//export api_Cluster_CertificateAuthority_Set
func api_Cluster_CertificateAuthority_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.CertificateAuthority = C.GoString(val)
}

//export api_Cluster_CertificateAuthorityData_Get
func api_Cluster_CertificateAuthorityData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Cluster(handle)
	return handleFromPtr_Slice_byte(&op.CertificateAuthorityData)
}

//export api_Cluster_CertificateAuthorityData_Set
func api_Cluster_CertificateAuthorityData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Cluster(handle)
	op.CertificateAuthorityData = deptrFromHandle_Slice_byte(val)
}

//export api_Cluster_ProxyURL_Get
func api_Cluster_ProxyURL_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return C.CString(op.ProxyURL)
}

//export api_Cluster_ProxyURL_Set
func api_Cluster_ProxyURL_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.ProxyURL = C.GoString(val)
}

//export api_Cluster_DisableCompression_Get
func api_Cluster_DisableCompression_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_api_Cluster(handle)
	return boolGoToPy(op.DisableCompression)
}

//export api_Cluster_DisableCompression_Set
func api_Cluster_DisableCompression_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_api_Cluster(handle)
	op.DisableCompression = boolPyToGo(val)
}

//export api_Cluster_Extensions_Get
func api_Cluster_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_api_Cluster(handle)
	return handleFromPtr_Map_string_runtime_Object(&op.Extensions)
}

//export api_Cluster_Extensions_Set
func api_Cluster_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_api_Cluster(handle)
	op.Extensions = deptrFromHandle_Map_string_runtime_Object(val)
}

//export api_Cluster_DeepCopyInto
func api_Cluster_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Cluster")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(api.Cluster{})).(*api.Cluster).DeepCopyInto(ptrFromHandle_Ptr_api_Cluster(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(api.Cluster{})).(*api.Cluster).DeepCopyInto(ptrFromHandle_Ptr_api_Cluster(out))
	}
}

//export api_Cluster_DeepCopy
func api_Cluster_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*api.Cluster")
	if __err != nil {
		return handleFromPtr_Ptr_api_Cluster(nil)
	}
	return handleFromPtr_Ptr_api_Cluster(gopyh.Embed(vifc, reflect.TypeOf(api.Cluster{})).(*api.Cluster).DeepCopy())

}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export api_NewConfig
func api_NewConfig() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_Config(api.NewConfig())

}

//export api_NewContext
func api_NewContext() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_Context(api.NewContext())

}

//export api_NewPreferences
func api_NewPreferences() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_Preferences(api.NewPreferences())

}

//export api_NewAuthInfo
func api_NewAuthInfo() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_AuthInfo(api.NewAuthInfo())

}

//export api_NewCluster
func api_NewCluster() CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_api_Cluster(api.NewCluster())

}

// ---- Functions ---

//export api_FlattenConfig
func api_FlattenConfig(config CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = api.FlattenConfig(ptrFromHandle_Ptr_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export api_MakeAbs
func api_MakeAbs(path *C.char, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := api.MakeAbs(C.GoString(path), C.GoString(base))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export api_RedactSecrets
func api_RedactSecrets(config CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = api.RedactSecrets(ptrFromHandle_Ptr_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export api_ResolvePath
func api_ResolvePath(path *C.char, base *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(api.ResolvePath(C.GoString(path), C.GoString(base)))

}

//export api_ShortenConfig
func api_ShortenConfig(config CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go api.ShortenConfig(ptrFromHandle_Ptr_api_Config(config))
	} else {
		api.ShortenConfig(ptrFromHandle_Ptr_api_Config(config))
	}
}

//export api_IsConfigEmpty
func api_IsConfigEmpty(config CGoHandle) C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return boolGoToPy(api.IsConfigEmpty(ptrFromHandle_Ptr_api_Config(config)))

}

//export api_MinifyConfig
func api_MinifyConfig(config CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = api.MinifyConfig(ptrFromHandle_Ptr_api_Config(config))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// ---- Package: latest ---

// ---- Types ---

// Converters for implicit pointer handles for type: []runtime.Object
func ptrFromHandle_Slice_runtime_Object(h CGoHandle) *[]runtime.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]runtime.Object")
	if p == nil {
		return nil
	}
	return p.(*[]runtime.Object)
}
func deptrFromHandle_Slice_runtime_Object(h CGoHandle) []runtime.Object {
	p := ptrFromHandle_Slice_runtime_Object(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_runtime_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]runtime.Object", p))
}

// --- wrapping slice: []runtime.Object ---
//
//export Slice_runtime_Object_CTor
func Slice_runtime_Object_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_runtime_Object(&[]runtime.Object{}))
}

//export Slice_runtime_Object_len
func Slice_runtime_Object_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_runtime_Object(handle))
}

//export Slice_runtime_Object_elem
func Slice_runtime_Object_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_runtime_Object(handle)
	return handleFromPtr_runtime_Object(&(s[_idx]))
}

//export Slice_runtime_Object_subslice
func Slice_runtime_Object_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_runtime_Object(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_runtime_Object(&ss))
}

//export Slice_runtime_Object_set
func Slice_runtime_Object_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_runtime_Object(handle)
	s[_idx] = ptrFromHandle_runtime_Object(_vl)
}

//export Slice_runtime_Object_append
func Slice_runtime_Object_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_runtime_Object(handle)
	*s = append(*s, ptrFromHandle_runtime_Object(_vl))
}

// Converters for implicit pointer handles for type: []schema.GroupVersion
func ptrFromHandle_Slice_schema_GroupVersion(h CGoHandle) *[]schema.GroupVersion {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]schema.GroupVersion")
	if p == nil {
		return nil
	}
	return p.(*[]schema.GroupVersion)
}
func deptrFromHandle_Slice_schema_GroupVersion(h CGoHandle) []schema.GroupVersion {
	p := ptrFromHandle_Slice_schema_GroupVersion(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_schema_GroupVersion(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]schema.GroupVersion", p))
}

// --- wrapping slice: []schema.GroupVersion ---
//
//export Slice_schema_GroupVersion_CTor
func Slice_schema_GroupVersion_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_schema_GroupVersion(&[]schema.GroupVersion{}))
}

//export Slice_schema_GroupVersion_len
func Slice_schema_GroupVersion_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_schema_GroupVersion(handle))
}

//export Slice_schema_GroupVersion_elem
func Slice_schema_GroupVersion_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_schema_GroupVersion(handle)
	return handleFromPtr_schema_GroupVersion(&(s[_idx]))
}

//export Slice_schema_GroupVersion_subslice
func Slice_schema_GroupVersion_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_schema_GroupVersion(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_schema_GroupVersion(&ss))
}

//export Slice_schema_GroupVersion_set
func Slice_schema_GroupVersion_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_schema_GroupVersion(handle)
	s[_idx] = *ptrFromHandle_schema_GroupVersion(_vl)
}

//export Slice_schema_GroupVersion_append
func Slice_schema_GroupVersion_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_schema_GroupVersion(handle)
	*s = append(*s, *ptrFromHandle_schema_GroupVersion(_vl))
}

// Converters for implicit pointer handles for type: []schema.GroupVersionKind
func ptrFromHandle_Slice_schema_GroupVersionKind(h CGoHandle) *[]schema.GroupVersionKind {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]schema.GroupVersionKind")
	if p == nil {
		return nil
	}
	return p.(*[]schema.GroupVersionKind)
}
func deptrFromHandle_Slice_schema_GroupVersionKind(h CGoHandle) []schema.GroupVersionKind {
	p := ptrFromHandle_Slice_schema_GroupVersionKind(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_schema_GroupVersionKind(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]schema.GroupVersionKind", p))
}

// --- wrapping slice: []schema.GroupVersionKind ---
//
//export Slice_schema_GroupVersionKind_CTor
func Slice_schema_GroupVersionKind_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_schema_GroupVersionKind(&[]schema.GroupVersionKind{}))
}

//export Slice_schema_GroupVersionKind_len
func Slice_schema_GroupVersionKind_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_schema_GroupVersionKind(handle))
}

//export Slice_schema_GroupVersionKind_elem
func Slice_schema_GroupVersionKind_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_schema_GroupVersionKind(handle)
	return handleFromPtr_schema_GroupVersionKind(&(s[_idx]))
}

//export Slice_schema_GroupVersionKind_subslice
func Slice_schema_GroupVersionKind_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_schema_GroupVersionKind(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_schema_GroupVersionKind(&ss))
}

//export Slice_schema_GroupVersionKind_set
func Slice_schema_GroupVersionKind_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_schema_GroupVersionKind(handle)
	s[_idx] = *ptrFromHandle_schema_GroupVersionKind(_vl)
}

//export Slice_schema_GroupVersionKind_append
func Slice_schema_GroupVersionKind_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_schema_GroupVersionKind(handle)
	*s = append(*s, *ptrFromHandle_schema_GroupVersionKind(_vl))
}

// Converters for implicit pointer handles for type: map[schema.GroupVersionKind]reflect.Type
func ptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(h CGoHandle) *map[schema.GroupVersionKind]reflect.Type {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[schema.GroupVersionKind]reflect.Type")
	if p == nil {
		return nil
	}
	return p.(*map[schema.GroupVersionKind]reflect.Type)
}
func deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(h CGoHandle) map[schema.GroupVersionKind]reflect.Type {
	p := ptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_schema_GroupVersionKind_reflect_Type(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[schema.GroupVersionKind]reflect.Type", p))
}

// --- wrapping map: map[schema.GroupVersionKind]reflect.Type ---
//
//export Map_schema_GroupVersionKind_reflect_Type_CTor
func Map_schema_GroupVersionKind_reflect_Type_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_schema_GroupVersionKind_reflect_Type(&map[schema.GroupVersionKind]reflect.Type{}))
}

//export Map_schema_GroupVersionKind_reflect_Type_len
func Map_schema_GroupVersionKind_reflect_Type_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle))
}

//export Map_schema_GroupVersionKind_reflect_Type_elem
func Map_schema_GroupVersionKind_reflect_Type_elem(handle CGoHandle, _ky CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle)
	v, ok := s[*ptrFromHandle_schema_GroupVersionKind(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_reflect_Type(&v)
}

//export Map_schema_GroupVersionKind_reflect_Type_contains
func Map_schema_GroupVersionKind_reflect_Type_contains(handle CGoHandle, _ky CGoHandle) C.char {
	s := deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle)
	_, ok := s[*ptrFromHandle_schema_GroupVersionKind(_ky)]
	return boolGoToPy(ok)
}

//export Map_schema_GroupVersionKind_reflect_Type_set
func Map_schema_GroupVersionKind_reflect_Type_set(handle CGoHandle, _ky CGoHandle, _vl CGoHandle) {
	s := deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle)
	s[*ptrFromHandle_schema_GroupVersionKind(_ky)] = ptrFromHandle_reflect_Type(_vl)
}

//export Map_schema_GroupVersionKind_reflect_Type_delete
func Map_schema_GroupVersionKind_reflect_Type_delete(handle CGoHandle, _ky CGoHandle) {
	s := deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle)
	delete(s, *ptrFromHandle_schema_GroupVersionKind(_ky))
}

//export Map_schema_GroupVersionKind_reflect_Type_keys
func Map_schema_GroupVersionKind_reflect_Type_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_schema_GroupVersionKind_reflect_Type(handle)
	kys := make([]schema.GroupVersionKind, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_schema_GroupVersionKind(&kys)
}

// Converters for implicit pointer handles for type: map[string]reflect.Type
func ptrFromHandle_Map_string_reflect_Type(h CGoHandle) *map[string]reflect.Type {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]reflect.Type")
	if p == nil {
		return nil
	}
	return p.(*map[string]reflect.Type)
}
func deptrFromHandle_Map_string_reflect_Type(h CGoHandle) map[string]reflect.Type {
	p := ptrFromHandle_Map_string_reflect_Type(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_reflect_Type(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]reflect.Type", p))
}

// --- wrapping map: map[string]reflect.Type ---
//
//export Map_string_reflect_Type_CTor
func Map_string_reflect_Type_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_reflect_Type(&map[string]reflect.Type{}))
}

//export Map_string_reflect_Type_len
func Map_string_reflect_Type_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_reflect_Type(handle))
}

//export Map_string_reflect_Type_elem
func Map_string_reflect_Type_elem(handle CGoHandle, _ky *C.char) CGoHandle {
	s := deptrFromHandle_Map_string_reflect_Type(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_reflect_Type(&v)
}

//export Map_string_reflect_Type_contains
func Map_string_reflect_Type_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_reflect_Type(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_reflect_Type_set
func Map_string_reflect_Type_set(handle CGoHandle, _ky *C.char, _vl CGoHandle) {
	s := deptrFromHandle_Map_string_reflect_Type(handle)
	s[C.GoString(_ky)] = ptrFromHandle_reflect_Type(_vl)
}

//export Map_string_reflect_Type_delete
func Map_string_reflect_Type_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_reflect_Type(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_reflect_Type_keys
func Map_string_reflect_Type_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_reflect_Type(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---
//
//export latest_Codec
func latest_Codec() CGoHandle {
	return handleFromPtr_runtime_Codec(latest.Codec)
}

//export latest_Set_Codec
func latest_Set_Codec(val CGoHandle) {
	latest.Codec = ptrFromHandle_runtime_Codec(val)
}

//export latest_ExternalVersion
func latest_ExternalVersion() CGoHandle {
	return handleFromPtr_schema_GroupVersion(&latest.ExternalVersion)
}

//export latest_Set_ExternalVersion
func latest_Set_ExternalVersion(val CGoHandle) {
	latest.ExternalVersion = *ptrFromHandle_schema_GroupVersion(val)
}

//export latest_Scheme
func latest_Scheme() CGoHandle {
	return handleFromPtr_Ptr_runtime_Scheme(latest.Scheme)
}

//export latest_Set_Scheme
func latest_Set_Scheme(val CGoHandle) {
	latest.Scheme = ptrFromHandle_Ptr_runtime_Scheme(val)
}

//export latest_Versions
func latest_Versions() CGoHandle {
	return handleFromPtr_Slice_string(&latest.Versions)
}

//export latest_Set_Versions
func latest_Set_Versions(val CGoHandle) {
	latest.Versions = deptrFromHandle_Slice_string(val)
}

// ---- Interfaces ---

// ---- Structs ---

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

// ---- Functions ---

// ---- Package: v1 ---

// ---- Types ---

// Converters for pointer handles for type: *[]v1.NamedAuthInfo
func ptrFromHandle_Ptr_Slice_v1_NamedAuthInfo(h CGoHandle) *[]v1.NamedAuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]v1.NamedAuthInfo")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedAuthInfo)
}
func handleFromPtr_Ptr_Slice_v1_NamedAuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]v1.NamedAuthInfo", p))
}

// Converters for pointer handles for type: *string
func ptrFromHandle_Ptr_string(h CGoHandle) *string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*string")
	if p == nil {
		return nil
	}
	return p.(*string)
}
func handleFromPtr_Ptr_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*string", p))
}

// Converters for pointer handles for type: *[]v1.NamedCluster
func ptrFromHandle_Ptr_Slice_v1_NamedCluster(h CGoHandle) *[]v1.NamedCluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]v1.NamedCluster")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedCluster)
}
func handleFromPtr_Ptr_Slice_v1_NamedCluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]v1.NamedCluster", p))
}

// Converters for pointer handles for type: *[]v1.NamedContext
func ptrFromHandle_Ptr_Slice_v1_NamedContext(h CGoHandle) *[]v1.NamedContext {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]v1.NamedContext")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedContext)
}
func handleFromPtr_Ptr_Slice_v1_NamedContext(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]v1.NamedContext", p))
}

// Converters for pointer handles for type: *[]v1.NamedExtension
func ptrFromHandle_Ptr_Slice_v1_NamedExtension(h CGoHandle) *[]v1.NamedExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*[]v1.NamedExtension")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedExtension)
}
func handleFromPtr_Ptr_Slice_v1_NamedExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*[]v1.NamedExtension", p))
}

// Converters for pointer handles for type: *v1.AuthInfo
func ptrFromHandle_Ptr_v1_AuthInfo(h CGoHandle) *v1.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.AuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.AuthInfo{})).(*v1.AuthInfo)
}
func handleFromPtr_Ptr_v1_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.AuthInfo", p))
}

// Converters for pointer handles for type: *v1.AuthProviderConfig
func ptrFromHandle_Ptr_v1_AuthProviderConfig(h CGoHandle) *v1.AuthProviderConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.AuthProviderConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.AuthProviderConfig{})).(*v1.AuthProviderConfig)
}
func handleFromPtr_Ptr_v1_AuthProviderConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.AuthProviderConfig", p))
}

// Converters for pointer handles for type: *v1.Cluster
func ptrFromHandle_Ptr_v1_Cluster(h CGoHandle) *v1.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.Cluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Cluster{})).(*v1.Cluster)
}
func handleFromPtr_Ptr_v1_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.Cluster", p))
}

// Converters for pointer handles for type: *v1.Config
func ptrFromHandle_Ptr_v1_Config(h CGoHandle) *v1.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Config{})).(*v1.Config)
}
func handleFromPtr_Ptr_v1_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.Config", p))
}

// Converters for pointer handles for type: *v1.Context
func ptrFromHandle_Ptr_v1_Context(h CGoHandle) *v1.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Context{})).(*v1.Context)
}
func handleFromPtr_Ptr_v1_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.Context", p))
}

// Converters for pointer handles for type: *v1.ExecConfig
func ptrFromHandle_Ptr_v1_ExecConfig(h CGoHandle) *v1.ExecConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.ExecConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.ExecConfig{})).(*v1.ExecConfig)
}
func handleFromPtr_Ptr_v1_ExecConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.ExecConfig", p))
}

// Converters for pointer handles for type: *v1.ExecEnvVar
func ptrFromHandle_Ptr_v1_ExecEnvVar(h CGoHandle) *v1.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.ExecEnvVar")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.ExecEnvVar{})).(*v1.ExecEnvVar)
}
func handleFromPtr_Ptr_v1_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.ExecEnvVar", p))
}

// Converters for pointer handles for type: *v1.NamedAuthInfo
func ptrFromHandle_Ptr_v1_NamedAuthInfo(h CGoHandle) *v1.NamedAuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.NamedAuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedAuthInfo{})).(*v1.NamedAuthInfo)
}
func handleFromPtr_Ptr_v1_NamedAuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.NamedAuthInfo", p))
}

// Converters for pointer handles for type: *v1.NamedCluster
func ptrFromHandle_Ptr_v1_NamedCluster(h CGoHandle) *v1.NamedCluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.NamedCluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedCluster{})).(*v1.NamedCluster)
}
func handleFromPtr_Ptr_v1_NamedCluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.NamedCluster", p))
}

// Converters for pointer handles for type: *v1.NamedContext
func ptrFromHandle_Ptr_v1_NamedContext(h CGoHandle) *v1.NamedContext {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.NamedContext")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedContext{})).(*v1.NamedContext)
}
func handleFromPtr_Ptr_v1_NamedContext(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.NamedContext", p))
}

// Converters for pointer handles for type: *v1.NamedExtension
func ptrFromHandle_Ptr_v1_NamedExtension(h CGoHandle) *v1.NamedExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.NamedExtension")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedExtension{})).(*v1.NamedExtension)
}
func handleFromPtr_Ptr_v1_NamedExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.NamedExtension", p))
}

// Converters for pointer handles for type: *v1.Preferences
func ptrFromHandle_Ptr_v1_Preferences(h CGoHandle) *v1.Preferences {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*v1.Preferences")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Preferences{})).(*v1.Preferences)
}
func handleFromPtr_Ptr_v1_Preferences(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*v1.Preferences", p))
}

// Converters for pointer handles for type: *map[string]*api.AuthInfo
func ptrFromHandle_Ptr_Map_string_Ptr_api_AuthInfo(h CGoHandle) *map[string]*api.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]*api.AuthInfo")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.AuthInfo)
}
func handleFromPtr_Ptr_Map_string_Ptr_api_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]*api.AuthInfo", p))
}

// Converters for pointer handles for type: *map[string]*api.Cluster
func ptrFromHandle_Ptr_Map_string_Ptr_api_Cluster(h CGoHandle) *map[string]*api.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]*api.Cluster")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.Cluster)
}
func handleFromPtr_Ptr_Map_string_Ptr_api_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]*api.Cluster", p))
}

// Converters for pointer handles for type: *map[string]*api.Context
func ptrFromHandle_Ptr_Map_string_Ptr_api_Context(h CGoHandle) *map[string]*api.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]*api.Context")
	if p == nil {
		return nil
	}
	return p.(*map[string]*api.Context)
}
func handleFromPtr_Ptr_Map_string_Ptr_api_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]*api.Context", p))
}

// Converters for pointer handles for type: *map[string]runtime.Object
func ptrFromHandle_Ptr_Map_string_runtime_Object(h CGoHandle) *map[string]runtime.Object {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*map[string]runtime.Object")
	if p == nil {
		return nil
	}
	return p.(*map[string]runtime.Object)
}
func handleFromPtr_Ptr_Map_string_runtime_Object(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*map[string]runtime.Object", p))
}

// Converters for implicit pointer handles for type: []v1.ExecEnvVar
func ptrFromHandle_Slice_v1_ExecEnvVar(h CGoHandle) *[]v1.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]v1.ExecEnvVar")
	if p == nil {
		return nil
	}
	return p.(*[]v1.ExecEnvVar)
}
func deptrFromHandle_Slice_v1_ExecEnvVar(h CGoHandle) []v1.ExecEnvVar {
	p := ptrFromHandle_Slice_v1_ExecEnvVar(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_v1_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]v1.ExecEnvVar", p))
}

// --- wrapping slice: []v1.ExecEnvVar ---
//
//export Slice_v1_ExecEnvVar_CTor
func Slice_v1_ExecEnvVar_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_v1_ExecEnvVar(&[]v1.ExecEnvVar{}))
}

//export Slice_v1_ExecEnvVar_len
func Slice_v1_ExecEnvVar_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_v1_ExecEnvVar(handle))
}

//export Slice_v1_ExecEnvVar_elem
func Slice_v1_ExecEnvVar_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_v1_ExecEnvVar(handle)
	return handleFromPtr_v1_ExecEnvVar(&(s[_idx]))
}

//export Slice_v1_ExecEnvVar_subslice
func Slice_v1_ExecEnvVar_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_v1_ExecEnvVar(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_v1_ExecEnvVar(&ss))
}

//export Slice_v1_ExecEnvVar_set
func Slice_v1_ExecEnvVar_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_v1_ExecEnvVar(handle)
	s[_idx] = *ptrFromHandle_v1_ExecEnvVar(_vl)
}

//export Slice_v1_ExecEnvVar_append
func Slice_v1_ExecEnvVar_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_v1_ExecEnvVar(handle)
	*s = append(*s, *ptrFromHandle_v1_ExecEnvVar(_vl))
}

// Converters for implicit pointer handles for type: []v1.NamedAuthInfo
func ptrFromHandle_Slice_v1_NamedAuthInfo(h CGoHandle) *[]v1.NamedAuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]v1.NamedAuthInfo")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedAuthInfo)
}
func deptrFromHandle_Slice_v1_NamedAuthInfo(h CGoHandle) []v1.NamedAuthInfo {
	p := ptrFromHandle_Slice_v1_NamedAuthInfo(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_v1_NamedAuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]v1.NamedAuthInfo", p))
}

// --- wrapping slice: []v1.NamedAuthInfo ---
//
//export Slice_v1_NamedAuthInfo_CTor
func Slice_v1_NamedAuthInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_v1_NamedAuthInfo(&[]v1.NamedAuthInfo{}))
}

//export Slice_v1_NamedAuthInfo_len
func Slice_v1_NamedAuthInfo_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_v1_NamedAuthInfo(handle))
}

//export Slice_v1_NamedAuthInfo_elem
func Slice_v1_NamedAuthInfo_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedAuthInfo(handle)
	return handleFromPtr_v1_NamedAuthInfo(&(s[_idx]))
}

//export Slice_v1_NamedAuthInfo_subslice
func Slice_v1_NamedAuthInfo_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedAuthInfo(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_v1_NamedAuthInfo(&ss))
}

//export Slice_v1_NamedAuthInfo_set
func Slice_v1_NamedAuthInfo_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_v1_NamedAuthInfo(handle)
	s[_idx] = *ptrFromHandle_v1_NamedAuthInfo(_vl)
}

//export Slice_v1_NamedAuthInfo_append
func Slice_v1_NamedAuthInfo_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_v1_NamedAuthInfo(handle)
	*s = append(*s, *ptrFromHandle_v1_NamedAuthInfo(_vl))
}

// Converters for implicit pointer handles for type: []v1.NamedCluster
func ptrFromHandle_Slice_v1_NamedCluster(h CGoHandle) *[]v1.NamedCluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]v1.NamedCluster")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedCluster)
}
func deptrFromHandle_Slice_v1_NamedCluster(h CGoHandle) []v1.NamedCluster {
	p := ptrFromHandle_Slice_v1_NamedCluster(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_v1_NamedCluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]v1.NamedCluster", p))
}

// --- wrapping slice: []v1.NamedCluster ---
//
//export Slice_v1_NamedCluster_CTor
func Slice_v1_NamedCluster_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_v1_NamedCluster(&[]v1.NamedCluster{}))
}

//export Slice_v1_NamedCluster_len
func Slice_v1_NamedCluster_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_v1_NamedCluster(handle))
}

//export Slice_v1_NamedCluster_elem
func Slice_v1_NamedCluster_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedCluster(handle)
	return handleFromPtr_v1_NamedCluster(&(s[_idx]))
}

//export Slice_v1_NamedCluster_subslice
func Slice_v1_NamedCluster_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedCluster(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_v1_NamedCluster(&ss))
}

//export Slice_v1_NamedCluster_set
func Slice_v1_NamedCluster_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_v1_NamedCluster(handle)
	s[_idx] = *ptrFromHandle_v1_NamedCluster(_vl)
}

//export Slice_v1_NamedCluster_append
func Slice_v1_NamedCluster_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_v1_NamedCluster(handle)
	*s = append(*s, *ptrFromHandle_v1_NamedCluster(_vl))
}

// Converters for implicit pointer handles for type: []v1.NamedContext
func ptrFromHandle_Slice_v1_NamedContext(h CGoHandle) *[]v1.NamedContext {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]v1.NamedContext")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedContext)
}
func deptrFromHandle_Slice_v1_NamedContext(h CGoHandle) []v1.NamedContext {
	p := ptrFromHandle_Slice_v1_NamedContext(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_v1_NamedContext(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]v1.NamedContext", p))
}

// --- wrapping slice: []v1.NamedContext ---
//
//export Slice_v1_NamedContext_CTor
func Slice_v1_NamedContext_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_v1_NamedContext(&[]v1.NamedContext{}))
}

//export Slice_v1_NamedContext_len
func Slice_v1_NamedContext_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_v1_NamedContext(handle))
}

//export Slice_v1_NamedContext_elem
func Slice_v1_NamedContext_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedContext(handle)
	return handleFromPtr_v1_NamedContext(&(s[_idx]))
}

//export Slice_v1_NamedContext_subslice
func Slice_v1_NamedContext_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedContext(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_v1_NamedContext(&ss))
}

//export Slice_v1_NamedContext_set
func Slice_v1_NamedContext_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_v1_NamedContext(handle)
	s[_idx] = *ptrFromHandle_v1_NamedContext(_vl)
}

//export Slice_v1_NamedContext_append
func Slice_v1_NamedContext_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_v1_NamedContext(handle)
	*s = append(*s, *ptrFromHandle_v1_NamedContext(_vl))
}

// Converters for implicit pointer handles for type: []v1.NamedExtension
func ptrFromHandle_Slice_v1_NamedExtension(h CGoHandle) *[]v1.NamedExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]v1.NamedExtension")
	if p == nil {
		return nil
	}
	return p.(*[]v1.NamedExtension)
}
func deptrFromHandle_Slice_v1_NamedExtension(h CGoHandle) []v1.NamedExtension {
	p := ptrFromHandle_Slice_v1_NamedExtension(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_v1_NamedExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]v1.NamedExtension", p))
}

// --- wrapping slice: []v1.NamedExtension ---
//
//export Slice_v1_NamedExtension_CTor
func Slice_v1_NamedExtension_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_v1_NamedExtension(&[]v1.NamedExtension{}))
}

//export Slice_v1_NamedExtension_len
func Slice_v1_NamedExtension_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_v1_NamedExtension(handle))
}

//export Slice_v1_NamedExtension_elem
func Slice_v1_NamedExtension_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedExtension(handle)
	return handleFromPtr_v1_NamedExtension(&(s[_idx]))
}

//export Slice_v1_NamedExtension_subslice
func Slice_v1_NamedExtension_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_v1_NamedExtension(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_v1_NamedExtension(&ss))
}

//export Slice_v1_NamedExtension_set
func Slice_v1_NamedExtension_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_v1_NamedExtension(handle)
	s[_idx] = *ptrFromHandle_v1_NamedExtension(_vl)
}

//export Slice_v1_NamedExtension_append
func Slice_v1_NamedExtension_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_v1_NamedExtension(handle)
	*s = append(*s, *ptrFromHandle_v1_NamedExtension(_vl))
}

// Converters for non-pointer handles for type: v1.AuthInfo
func ptrFromHandle_v1_AuthInfo(h CGoHandle) *v1.AuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.AuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.AuthInfo{})).(*v1.AuthInfo)
}
func handleFromPtr_v1_AuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.AuthInfo", p))
}

// Converters for non-pointer handles for type: v1.AuthProviderConfig
func ptrFromHandle_v1_AuthProviderConfig(h CGoHandle) *v1.AuthProviderConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.AuthProviderConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.AuthProviderConfig{})).(*v1.AuthProviderConfig)
}
func handleFromPtr_v1_AuthProviderConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.AuthProviderConfig", p))
}

// Converters for non-pointer handles for type: v1.Cluster
func ptrFromHandle_v1_Cluster(h CGoHandle) *v1.Cluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.Cluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Cluster{})).(*v1.Cluster)
}
func handleFromPtr_v1_Cluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.Cluster", p))
}

// Converters for non-pointer handles for type: v1.Config
func ptrFromHandle_v1_Config(h CGoHandle) *v1.Config {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.Config")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Config{})).(*v1.Config)
}
func handleFromPtr_v1_Config(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.Config", p))
}

// Converters for non-pointer handles for type: v1.Context
func ptrFromHandle_v1_Context(h CGoHandle) *v1.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Context{})).(*v1.Context)
}
func handleFromPtr_v1_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.Context", p))
}

// Converters for non-pointer handles for type: v1.ExecConfig
func ptrFromHandle_v1_ExecConfig(h CGoHandle) *v1.ExecConfig {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.ExecConfig")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.ExecConfig{})).(*v1.ExecConfig)
}
func handleFromPtr_v1_ExecConfig(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.ExecConfig", p))
}

// Converters for non-pointer handles for type: v1.ExecEnvVar
func ptrFromHandle_v1_ExecEnvVar(h CGoHandle) *v1.ExecEnvVar {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.ExecEnvVar")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.ExecEnvVar{})).(*v1.ExecEnvVar)
}
func handleFromPtr_v1_ExecEnvVar(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.ExecEnvVar", p))
}

// Converters for non-pointer handles for type: v1.NamedAuthInfo
func ptrFromHandle_v1_NamedAuthInfo(h CGoHandle) *v1.NamedAuthInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.NamedAuthInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedAuthInfo{})).(*v1.NamedAuthInfo)
}
func handleFromPtr_v1_NamedAuthInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.NamedAuthInfo", p))
}

// Converters for non-pointer handles for type: v1.NamedCluster
func ptrFromHandle_v1_NamedCluster(h CGoHandle) *v1.NamedCluster {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.NamedCluster")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedCluster{})).(*v1.NamedCluster)
}
func handleFromPtr_v1_NamedCluster(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.NamedCluster", p))
}

// Converters for non-pointer handles for type: v1.NamedContext
func ptrFromHandle_v1_NamedContext(h CGoHandle) *v1.NamedContext {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.NamedContext")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedContext{})).(*v1.NamedContext)
}
func handleFromPtr_v1_NamedContext(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.NamedContext", p))
}

// Converters for non-pointer handles for type: v1.NamedExtension
func ptrFromHandle_v1_NamedExtension(h CGoHandle) *v1.NamedExtension {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.NamedExtension")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.NamedExtension{})).(*v1.NamedExtension)
}
func handleFromPtr_v1_NamedExtension(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.NamedExtension", p))
}

// Converters for non-pointer handles for type: v1.Preferences
func ptrFromHandle_v1_Preferences(h CGoHandle) *v1.Preferences {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "v1.Preferences")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(v1.Preferences{})).(*v1.Preferences)
}
func handleFromPtr_v1_Preferences(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("v1.Preferences", p))
}

// ---- Global Variables: can only use functions to access ---
//
//export v1_SchemeGroupVersion
func v1_SchemeGroupVersion() CGoHandle {
	return handleFromPtr_schema_GroupVersion(&v1.SchemeGroupVersion)
}

//export v1_Set_SchemeGroupVersion
func v1_Set_SchemeGroupVersion(val CGoHandle) {
	v1.SchemeGroupVersion = *ptrFromHandle_schema_GroupVersion(val)
}

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: v1.NamedAuthInfo ---
//
//export v1_NamedAuthInfo_CTor
func v1_NamedAuthInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_NamedAuthInfo(&v1.NamedAuthInfo{}))
}

//export v1_NamedAuthInfo_Name_Get
func v1_NamedAuthInfo_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_NamedAuthInfo(handle)
	return C.CString(op.Name)
}

//export v1_NamedAuthInfo_Name_Set
func v1_NamedAuthInfo_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_NamedAuthInfo(handle)
	op.Name = C.GoString(val)
}

//export v1_NamedAuthInfo_AuthInfo_Get
func v1_NamedAuthInfo_AuthInfo_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_NamedAuthInfo(handle)
	return handleFromPtr_v1_AuthInfo(&op.AuthInfo)
}

//export v1_NamedAuthInfo_AuthInfo_Set
func v1_NamedAuthInfo_AuthInfo_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_NamedAuthInfo(handle)
	op.AuthInfo = *ptrFromHandle_v1_AuthInfo(val)
}

//export v1_NamedAuthInfo_DeepCopyInto
func v1_NamedAuthInfo_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedAuthInfo")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.NamedAuthInfo{})).(*v1.NamedAuthInfo).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedAuthInfo(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.NamedAuthInfo{})).(*v1.NamedAuthInfo).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedAuthInfo(out))
	}
}

//export v1_NamedAuthInfo_DeepCopy
func v1_NamedAuthInfo_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedAuthInfo")
	if __err != nil {
		return handleFromPtr_Ptr_v1_NamedAuthInfo(nil)
	}
	return handleFromPtr_Ptr_v1_NamedAuthInfo(gopyh.Embed(vifc, reflect.TypeOf(v1.NamedAuthInfo{})).(*v1.NamedAuthInfo).DeepCopy())

}

// --- wrapping struct: v1.NamedCluster ---
//
//export v1_NamedCluster_CTor
func v1_NamedCluster_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_NamedCluster(&v1.NamedCluster{}))
}

//export v1_NamedCluster_Name_Get
func v1_NamedCluster_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_NamedCluster(handle)
	return C.CString(op.Name)
}

//export v1_NamedCluster_Name_Set
func v1_NamedCluster_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_NamedCluster(handle)
	op.Name = C.GoString(val)
}

//export v1_NamedCluster_Cluster_Get
func v1_NamedCluster_Cluster_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_NamedCluster(handle)
	return handleFromPtr_v1_Cluster(&op.Cluster)
}

//export v1_NamedCluster_Cluster_Set
func v1_NamedCluster_Cluster_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_NamedCluster(handle)
	op.Cluster = *ptrFromHandle_v1_Cluster(val)
}

//export v1_NamedCluster_DeepCopyInto
func v1_NamedCluster_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedCluster")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.NamedCluster{})).(*v1.NamedCluster).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedCluster(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.NamedCluster{})).(*v1.NamedCluster).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedCluster(out))
	}
}

//export v1_NamedCluster_DeepCopy
func v1_NamedCluster_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedCluster")
	if __err != nil {
		return handleFromPtr_Ptr_v1_NamedCluster(nil)
	}
	return handleFromPtr_Ptr_v1_NamedCluster(gopyh.Embed(vifc, reflect.TypeOf(v1.NamedCluster{})).(*v1.NamedCluster).DeepCopy())

}

// --- wrapping struct: v1.NamedExtension ---
//
//export v1_NamedExtension_CTor
func v1_NamedExtension_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_NamedExtension(&v1.NamedExtension{}))
}

//export v1_NamedExtension_Name_Get
func v1_NamedExtension_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_NamedExtension(handle)
	return C.CString(op.Name)
}

//export v1_NamedExtension_Name_Set
func v1_NamedExtension_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_NamedExtension(handle)
	op.Name = C.GoString(val)
}

//export v1_NamedExtension_Extension_Get
func v1_NamedExtension_Extension_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_NamedExtension(handle)
	return handleFromPtr_runtime_RawExtension(&op.Extension)
}

//export v1_NamedExtension_Extension_Set
func v1_NamedExtension_Extension_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_NamedExtension(handle)
	op.Extension = *ptrFromHandle_runtime_RawExtension(val)
}

//export v1_NamedExtension_DeepCopyInto
func v1_NamedExtension_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedExtension")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.NamedExtension{})).(*v1.NamedExtension).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedExtension(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.NamedExtension{})).(*v1.NamedExtension).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedExtension(out))
	}
}

//export v1_NamedExtension_DeepCopy
func v1_NamedExtension_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedExtension")
	if __err != nil {
		return handleFromPtr_Ptr_v1_NamedExtension(nil)
	}
	return handleFromPtr_Ptr_v1_NamedExtension(gopyh.Embed(vifc, reflect.TypeOf(v1.NamedExtension{})).(*v1.NamedExtension).DeepCopy())

}

// --- wrapping struct: v1.Preferences ---
//
//export v1_Preferences_CTor
func v1_Preferences_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_Preferences(&v1.Preferences{}))
}

//export v1_Preferences_Colors_Get
func v1_Preferences_Colors_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_v1_Preferences(handle)
	return boolGoToPy(op.Colors)
}

//export v1_Preferences_Colors_Set
func v1_Preferences_Colors_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_v1_Preferences(handle)
	op.Colors = boolPyToGo(val)
}

//export v1_Preferences_Extensions_Get
func v1_Preferences_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Preferences(handle)
	return handleFromPtr_Slice_v1_NamedExtension(&op.Extensions)
}

//export v1_Preferences_Extensions_Set
func v1_Preferences_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Preferences(handle)
	op.Extensions = deptrFromHandle_Slice_v1_NamedExtension(val)
}

//export v1_Preferences_DeepCopyInto
func v1_Preferences_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Preferences")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.Preferences{})).(*v1.Preferences).DeepCopyInto(ptrFromHandle_Ptr_v1_Preferences(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.Preferences{})).(*v1.Preferences).DeepCopyInto(ptrFromHandle_Ptr_v1_Preferences(out))
	}
}

//export v1_Preferences_DeepCopy
func v1_Preferences_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Preferences")
	if __err != nil {
		return handleFromPtr_Ptr_v1_Preferences(nil)
	}
	return handleFromPtr_Ptr_v1_Preferences(gopyh.Embed(vifc, reflect.TypeOf(v1.Preferences{})).(*v1.Preferences).DeepCopy())

}

// --- wrapping struct: v1.AuthInfo ---
//
//export v1_AuthInfo_CTor
func v1_AuthInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_AuthInfo(&v1.AuthInfo{}))
}

//export v1_AuthInfo_ClientCertificate_Get
func v1_AuthInfo_ClientCertificate_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.ClientCertificate)
}

//export v1_AuthInfo_ClientCertificate_Set
func v1_AuthInfo_ClientCertificate_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ClientCertificate = C.GoString(val)
}

//export v1_AuthInfo_ClientCertificateData_Get
func v1_AuthInfo_ClientCertificateData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Slice_byte(&op.ClientCertificateData)
}

//export v1_AuthInfo_ClientCertificateData_Set
func v1_AuthInfo_ClientCertificateData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ClientCertificateData = deptrFromHandle_Slice_byte(val)
}

//export v1_AuthInfo_ClientKey_Get
func v1_AuthInfo_ClientKey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.ClientKey)
}

//export v1_AuthInfo_ClientKey_Set
func v1_AuthInfo_ClientKey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ClientKey = C.GoString(val)
}

//export v1_AuthInfo_ClientKeyData_Get
func v1_AuthInfo_ClientKeyData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Slice_byte(&op.ClientKeyData)
}

//export v1_AuthInfo_ClientKeyData_Set
func v1_AuthInfo_ClientKeyData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ClientKeyData = deptrFromHandle_Slice_byte(val)
}

//export v1_AuthInfo_Token_Get
func v1_AuthInfo_Token_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.Token)
}

//export v1_AuthInfo_Token_Set
func v1_AuthInfo_Token_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Token = C.GoString(val)
}

//export v1_AuthInfo_TokenFile_Get
func v1_AuthInfo_TokenFile_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.TokenFile)
}

//export v1_AuthInfo_TokenFile_Set
func v1_AuthInfo_TokenFile_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.TokenFile = C.GoString(val)
}

//export v1_AuthInfo_Impersonate_Get
func v1_AuthInfo_Impersonate_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.Impersonate)
}

//export v1_AuthInfo_Impersonate_Set
func v1_AuthInfo_Impersonate_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Impersonate = C.GoString(val)
}

//export v1_AuthInfo_ImpersonateUID_Get
func v1_AuthInfo_ImpersonateUID_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.ImpersonateUID)
}

//export v1_AuthInfo_ImpersonateUID_Set
func v1_AuthInfo_ImpersonateUID_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ImpersonateUID = C.GoString(val)
}

//export v1_AuthInfo_ImpersonateGroups_Get
func v1_AuthInfo_ImpersonateGroups_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Slice_string(&op.ImpersonateGroups)
}

//export v1_AuthInfo_ImpersonateGroups_Set
func v1_AuthInfo_ImpersonateGroups_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ImpersonateGroups = deptrFromHandle_Slice_string(val)
}

//export v1_AuthInfo_ImpersonateUserExtra_Get
func v1_AuthInfo_ImpersonateUserExtra_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Map_string_Slice_string(&op.ImpersonateUserExtra)
}

//export v1_AuthInfo_ImpersonateUserExtra_Set
func v1_AuthInfo_ImpersonateUserExtra_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.ImpersonateUserExtra = deptrFromHandle_Map_string_Slice_string(val)
}

//export v1_AuthInfo_Username_Get
func v1_AuthInfo_Username_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.Username)
}

//export v1_AuthInfo_Username_Set
func v1_AuthInfo_Username_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Username = C.GoString(val)
}

//export v1_AuthInfo_Password_Get
func v1_AuthInfo_Password_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return C.CString(op.Password)
}

//export v1_AuthInfo_Password_Set
func v1_AuthInfo_Password_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Password = C.GoString(val)
}

//export v1_AuthInfo_AuthProvider_Get
func v1_AuthInfo_AuthProvider_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Ptr_v1_AuthProviderConfig(op.AuthProvider)
}

//export v1_AuthInfo_AuthProvider_Set
func v1_AuthInfo_AuthProvider_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.AuthProvider = ptrFromHandle_Ptr_v1_AuthProviderConfig(val)
}

//export v1_AuthInfo_Exec_Get
func v1_AuthInfo_Exec_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Ptr_v1_ExecConfig(op.Exec)
}

//export v1_AuthInfo_Exec_Set
func v1_AuthInfo_Exec_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Exec = ptrFromHandle_Ptr_v1_ExecConfig(val)
}

//export v1_AuthInfo_Extensions_Get
func v1_AuthInfo_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthInfo(handle)
	return handleFromPtr_Slice_v1_NamedExtension(&op.Extensions)
}

//export v1_AuthInfo_Extensions_Set
func v1_AuthInfo_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthInfo(handle)
	op.Extensions = deptrFromHandle_Slice_v1_NamedExtension(val)
}

//export v1_AuthInfo_DeepCopyInto
func v1_AuthInfo_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.AuthInfo")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.AuthInfo{})).(*v1.AuthInfo).DeepCopyInto(ptrFromHandle_Ptr_v1_AuthInfo(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.AuthInfo{})).(*v1.AuthInfo).DeepCopyInto(ptrFromHandle_Ptr_v1_AuthInfo(out))
	}
}

//export v1_AuthInfo_DeepCopy
func v1_AuthInfo_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.AuthInfo")
	if __err != nil {
		return handleFromPtr_Ptr_v1_AuthInfo(nil)
	}
	return handleFromPtr_Ptr_v1_AuthInfo(gopyh.Embed(vifc, reflect.TypeOf(v1.AuthInfo{})).(*v1.AuthInfo).DeepCopy())

}

// --- wrapping struct: v1.AuthProviderConfig ---
//
//export v1_AuthProviderConfig_CTor
func v1_AuthProviderConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_AuthProviderConfig(&v1.AuthProviderConfig{}))
}

//export v1_AuthProviderConfig_Name_Get
func v1_AuthProviderConfig_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_AuthProviderConfig(handle)
	return C.CString(op.Name)
}

//export v1_AuthProviderConfig_Name_Set
func v1_AuthProviderConfig_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_AuthProviderConfig(handle)
	op.Name = C.GoString(val)
}

//export v1_AuthProviderConfig_Config_Get
func v1_AuthProviderConfig_Config_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_AuthProviderConfig(handle)
	return handleFromPtr_Map_string_string(&op.Config)
}

//export v1_AuthProviderConfig_Config_Set
func v1_AuthProviderConfig_Config_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_AuthProviderConfig(handle)
	op.Config = deptrFromHandle_Map_string_string(val)
}

//export v1_AuthProviderConfig_DeepCopyInto
func v1_AuthProviderConfig_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.AuthProviderConfig")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.AuthProviderConfig{})).(*v1.AuthProviderConfig).DeepCopyInto(ptrFromHandle_Ptr_v1_AuthProviderConfig(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.AuthProviderConfig{})).(*v1.AuthProviderConfig).DeepCopyInto(ptrFromHandle_Ptr_v1_AuthProviderConfig(out))
	}
}

//export v1_AuthProviderConfig_DeepCopy
func v1_AuthProviderConfig_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.AuthProviderConfig")
	if __err != nil {
		return handleFromPtr_Ptr_v1_AuthProviderConfig(nil)
	}
	return handleFromPtr_Ptr_v1_AuthProviderConfig(gopyh.Embed(vifc, reflect.TypeOf(v1.AuthProviderConfig{})).(*v1.AuthProviderConfig).DeepCopy())

}

// --- wrapping struct: v1.ExecConfig ---
//
//export v1_ExecConfig_CTor
func v1_ExecConfig_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_ExecConfig(&v1.ExecConfig{}))
}

//export v1_ExecConfig_Command_Get
func v1_ExecConfig_Command_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return C.CString(op.Command)
}

//export v1_ExecConfig_Command_Set
func v1_ExecConfig_Command_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.Command = C.GoString(val)
}

//export v1_ExecConfig_Args_Get
func v1_ExecConfig_Args_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return handleFromPtr_Slice_string(&op.Args)
}

//export v1_ExecConfig_Args_Set
func v1_ExecConfig_Args_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.Args = deptrFromHandle_Slice_string(val)
}

//export v1_ExecConfig_Env_Get
func v1_ExecConfig_Env_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return handleFromPtr_Slice_v1_ExecEnvVar(&op.Env)
}

//export v1_ExecConfig_Env_Set
func v1_ExecConfig_Env_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.Env = deptrFromHandle_Slice_v1_ExecEnvVar(val)
}

//export v1_ExecConfig_APIVersion_Get
func v1_ExecConfig_APIVersion_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return C.CString(op.APIVersion)
}

//export v1_ExecConfig_APIVersion_Set
func v1_ExecConfig_APIVersion_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.APIVersion = C.GoString(val)
}

//export v1_ExecConfig_InstallHint_Get
func v1_ExecConfig_InstallHint_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return C.CString(op.InstallHint)
}

//export v1_ExecConfig_InstallHint_Set
func v1_ExecConfig_InstallHint_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.InstallHint = C.GoString(val)
}

//export v1_ExecConfig_ProvideClusterInfo_Get
func v1_ExecConfig_ProvideClusterInfo_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return boolGoToPy(op.ProvideClusterInfo)
}

//export v1_ExecConfig_ProvideClusterInfo_Set
func v1_ExecConfig_ProvideClusterInfo_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.ProvideClusterInfo = boolPyToGo(val)
}

//export v1_ExecConfig_InteractiveMode_Get
func v1_ExecConfig_InteractiveMode_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecConfig(handle)
	return C.CString(string(op.InteractiveMode))
}

//export v1_ExecConfig_InteractiveMode_Set
func v1_ExecConfig_InteractiveMode_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecConfig(handle)
	op.InteractiveMode = v1.ExecInteractiveMode(C.GoString(val))
}

//export v1_ExecConfig_DeepCopyInto
func v1_ExecConfig_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.ExecConfig")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.ExecConfig{})).(*v1.ExecConfig).DeepCopyInto(ptrFromHandle_Ptr_v1_ExecConfig(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.ExecConfig{})).(*v1.ExecConfig).DeepCopyInto(ptrFromHandle_Ptr_v1_ExecConfig(out))
	}
}

//export v1_ExecConfig_DeepCopy
func v1_ExecConfig_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.ExecConfig")
	if __err != nil {
		return handleFromPtr_Ptr_v1_ExecConfig(nil)
	}
	return handleFromPtr_Ptr_v1_ExecConfig(gopyh.Embed(vifc, reflect.TypeOf(v1.ExecConfig{})).(*v1.ExecConfig).DeepCopy())

}

// --- wrapping struct: v1.ExecEnvVar ---
//
//export v1_ExecEnvVar_CTor
func v1_ExecEnvVar_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_ExecEnvVar(&v1.ExecEnvVar{}))
}

//export v1_ExecEnvVar_Name_Get
func v1_ExecEnvVar_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecEnvVar(handle)
	return C.CString(op.Name)
}

//export v1_ExecEnvVar_Name_Set
func v1_ExecEnvVar_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecEnvVar(handle)
	op.Name = C.GoString(val)
}

//export v1_ExecEnvVar_Value_Get
func v1_ExecEnvVar_Value_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_ExecEnvVar(handle)
	return C.CString(op.Value)
}

//export v1_ExecEnvVar_Value_Set
func v1_ExecEnvVar_Value_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_ExecEnvVar(handle)
	op.Value = C.GoString(val)
}

//export v1_ExecEnvVar_DeepCopyInto
func v1_ExecEnvVar_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.ExecEnvVar")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.ExecEnvVar{})).(*v1.ExecEnvVar).DeepCopyInto(ptrFromHandle_Ptr_v1_ExecEnvVar(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.ExecEnvVar{})).(*v1.ExecEnvVar).DeepCopyInto(ptrFromHandle_Ptr_v1_ExecEnvVar(out))
	}
}

//export v1_ExecEnvVar_DeepCopy
func v1_ExecEnvVar_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.ExecEnvVar")
	if __err != nil {
		return handleFromPtr_Ptr_v1_ExecEnvVar(nil)
	}
	return handleFromPtr_Ptr_v1_ExecEnvVar(gopyh.Embed(vifc, reflect.TypeOf(v1.ExecEnvVar{})).(*v1.ExecEnvVar).DeepCopy())

}

// --- wrapping struct: v1.Cluster ---
//
//export v1_Cluster_CTor
func v1_Cluster_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_Cluster(&v1.Cluster{}))
}

//export v1_Cluster_Server_Get
func v1_Cluster_Server_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return C.CString(op.Server)
}

//export v1_Cluster_Server_Set
func v1_Cluster_Server_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.Server = C.GoString(val)
}

//export v1_Cluster_TLSServerName_Get
func v1_Cluster_TLSServerName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return C.CString(op.TLSServerName)
}

//export v1_Cluster_TLSServerName_Set
func v1_Cluster_TLSServerName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.TLSServerName = C.GoString(val)
}

//export v1_Cluster_InsecureSkipTLSVerify_Get
func v1_Cluster_InsecureSkipTLSVerify_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return boolGoToPy(op.InsecureSkipTLSVerify)
}

//export v1_Cluster_InsecureSkipTLSVerify_Set
func v1_Cluster_InsecureSkipTLSVerify_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.InsecureSkipTLSVerify = boolPyToGo(val)
}

//export v1_Cluster_CertificateAuthority_Get
func v1_Cluster_CertificateAuthority_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return C.CString(op.CertificateAuthority)
}

//export v1_Cluster_CertificateAuthority_Set
func v1_Cluster_CertificateAuthority_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.CertificateAuthority = C.GoString(val)
}

//export v1_Cluster_CertificateAuthorityData_Get
func v1_Cluster_CertificateAuthorityData_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Cluster(handle)
	return handleFromPtr_Slice_byte(&op.CertificateAuthorityData)
}

//export v1_Cluster_CertificateAuthorityData_Set
func v1_Cluster_CertificateAuthorityData_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.CertificateAuthorityData = deptrFromHandle_Slice_byte(val)
}

//export v1_Cluster_ProxyURL_Get
func v1_Cluster_ProxyURL_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return C.CString(op.ProxyURL)
}

//export v1_Cluster_ProxyURL_Set
func v1_Cluster_ProxyURL_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.ProxyURL = C.GoString(val)
}

//export v1_Cluster_DisableCompression_Get
func v1_Cluster_DisableCompression_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_v1_Cluster(handle)
	return boolGoToPy(op.DisableCompression)
}

//export v1_Cluster_DisableCompression_Set
func v1_Cluster_DisableCompression_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.DisableCompression = boolPyToGo(val)
}

//export v1_Cluster_Extensions_Get
func v1_Cluster_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Cluster(handle)
	return handleFromPtr_Slice_v1_NamedExtension(&op.Extensions)
}

//export v1_Cluster_Extensions_Set
func v1_Cluster_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Cluster(handle)
	op.Extensions = deptrFromHandle_Slice_v1_NamedExtension(val)
}

//export v1_Cluster_DeepCopyInto
func v1_Cluster_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Cluster")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.Cluster{})).(*v1.Cluster).DeepCopyInto(ptrFromHandle_Ptr_v1_Cluster(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.Cluster{})).(*v1.Cluster).DeepCopyInto(ptrFromHandle_Ptr_v1_Cluster(out))
	}
}

//export v1_Cluster_DeepCopy
func v1_Cluster_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Cluster")
	if __err != nil {
		return handleFromPtr_Ptr_v1_Cluster(nil)
	}
	return handleFromPtr_Ptr_v1_Cluster(gopyh.Embed(vifc, reflect.TypeOf(v1.Cluster{})).(*v1.Cluster).DeepCopy())

}

// --- wrapping struct: v1.Config ---
//
//export v1_Config_CTor
func v1_Config_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_Config(&v1.Config{}))
}

//export v1_Config_Kind_Get
func v1_Config_Kind_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Config(handle)
	return C.CString(op.Kind)
}

//export v1_Config_Kind_Set
func v1_Config_Kind_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Config(handle)
	op.Kind = C.GoString(val)
}

//export v1_Config_APIVersion_Get
func v1_Config_APIVersion_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Config(handle)
	return C.CString(op.APIVersion)
}

//export v1_Config_APIVersion_Set
func v1_Config_APIVersion_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Config(handle)
	op.APIVersion = C.GoString(val)
}

//export v1_Config_Preferences_Get
func v1_Config_Preferences_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Config(handle)
	return handleFromPtr_v1_Preferences(&op.Preferences)
}

//export v1_Config_Preferences_Set
func v1_Config_Preferences_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Config(handle)
	op.Preferences = *ptrFromHandle_v1_Preferences(val)
}

//export v1_Config_Clusters_Get
func v1_Config_Clusters_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Config(handle)
	return handleFromPtr_Slice_v1_NamedCluster(&op.Clusters)
}

//export v1_Config_Clusters_Set
func v1_Config_Clusters_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Config(handle)
	op.Clusters = deptrFromHandle_Slice_v1_NamedCluster(val)
}

//export v1_Config_AuthInfos_Get
func v1_Config_AuthInfos_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Config(handle)
	return handleFromPtr_Slice_v1_NamedAuthInfo(&op.AuthInfos)
}

//export v1_Config_AuthInfos_Set
func v1_Config_AuthInfos_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Config(handle)
	op.AuthInfos = deptrFromHandle_Slice_v1_NamedAuthInfo(val)
}

//export v1_Config_Contexts_Get
func v1_Config_Contexts_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Config(handle)
	return handleFromPtr_Slice_v1_NamedContext(&op.Contexts)
}

//export v1_Config_Contexts_Set
func v1_Config_Contexts_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Config(handle)
	op.Contexts = deptrFromHandle_Slice_v1_NamedContext(val)
}

//export v1_Config_CurrentContext_Get
func v1_Config_CurrentContext_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Config(handle)
	return C.CString(op.CurrentContext)
}

//export v1_Config_CurrentContext_Set
func v1_Config_CurrentContext_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Config(handle)
	op.CurrentContext = C.GoString(val)
}

//export v1_Config_Extensions_Get
func v1_Config_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Config(handle)
	return handleFromPtr_Slice_v1_NamedExtension(&op.Extensions)
}

//export v1_Config_Extensions_Set
func v1_Config_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Config(handle)
	op.Extensions = deptrFromHandle_Slice_v1_NamedExtension(val)
}

//export v1_Config_GetObjectKind
func v1_Config_GetObjectKind(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return handleFromPtr_schema_ObjectKind(nil)
	}
	return handleFromPtr_schema_ObjectKind(gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).GetObjectKind())

}

//export v1_Config_SetGroupVersionKind
func v1_Config_SetGroupVersionKind(_handle CGoHandle, gvk CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).SetGroupVersionKind(*ptrFromHandle_schema_GroupVersionKind(gvk))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).SetGroupVersionKind(*ptrFromHandle_schema_GroupVersionKind(gvk))
	}
}

//export v1_Config_GroupVersionKind
func v1_Config_GroupVersionKind(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return handleFromPtr_schema_GroupVersionKind(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).GroupVersionKind()

	return handleFromPtr_schema_GroupVersionKind(&cret)
}

//export v1_Config_DeepCopyInto
func v1_Config_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).DeepCopyInto(ptrFromHandle_Ptr_v1_Config(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).DeepCopyInto(ptrFromHandle_Ptr_v1_Config(out))
	}
}

//export v1_Config_DeepCopy
func v1_Config_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return handleFromPtr_Ptr_v1_Config(nil)
	}
	return handleFromPtr_Ptr_v1_Config(gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).DeepCopy())

}

//export v1_Config_DeepCopyObject
func v1_Config_DeepCopyObject(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Config")
	if __err != nil {
		return handleFromPtr_runtime_Object(nil)
	}
	return handleFromPtr_runtime_Object(gopyh.Embed(vifc, reflect.TypeOf(v1.Config{})).(*v1.Config).DeepCopyObject())

}

// --- wrapping struct: v1.Context ---
//
//export v1_Context_CTor
func v1_Context_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_Context(&v1.Context{}))
}

//export v1_Context_Cluster_Get
func v1_Context_Cluster_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Context(handle)
	return C.CString(op.Cluster)
}

//export v1_Context_Cluster_Set
func v1_Context_Cluster_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Context(handle)
	op.Cluster = C.GoString(val)
}

//export v1_Context_AuthInfo_Get
func v1_Context_AuthInfo_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Context(handle)
	return C.CString(op.AuthInfo)
}

//export v1_Context_AuthInfo_Set
func v1_Context_AuthInfo_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Context(handle)
	op.AuthInfo = C.GoString(val)
}

//export v1_Context_Namespace_Get
func v1_Context_Namespace_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_Context(handle)
	return C.CString(op.Namespace)
}

//export v1_Context_Namespace_Set
func v1_Context_Namespace_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_Context(handle)
	op.Namespace = C.GoString(val)
}

//export v1_Context_Extensions_Get
func v1_Context_Extensions_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_Context(handle)
	return handleFromPtr_Slice_v1_NamedExtension(&op.Extensions)
}

//export v1_Context_Extensions_Set
func v1_Context_Extensions_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_Context(handle)
	op.Extensions = deptrFromHandle_Slice_v1_NamedExtension(val)
}

//export v1_Context_DeepCopyInto
func v1_Context_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Context")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.Context{})).(*v1.Context).DeepCopyInto(ptrFromHandle_Ptr_v1_Context(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.Context{})).(*v1.Context).DeepCopyInto(ptrFromHandle_Ptr_v1_Context(out))
	}
}

//export v1_Context_DeepCopy
func v1_Context_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.Context")
	if __err != nil {
		return handleFromPtr_Ptr_v1_Context(nil)
	}
	return handleFromPtr_Ptr_v1_Context(gopyh.Embed(vifc, reflect.TypeOf(v1.Context{})).(*v1.Context).DeepCopy())

}

// --- wrapping struct: v1.NamedContext ---
//
//export v1_NamedContext_CTor
func v1_NamedContext_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_v1_NamedContext(&v1.NamedContext{}))
}

//export v1_NamedContext_Name_Get
func v1_NamedContext_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_v1_NamedContext(handle)
	return C.CString(op.Name)
}

//export v1_NamedContext_Name_Set
func v1_NamedContext_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_v1_NamedContext(handle)
	op.Name = C.GoString(val)
}

//export v1_NamedContext_Context_Get
func v1_NamedContext_Context_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_v1_NamedContext(handle)
	return handleFromPtr_v1_Context(&op.Context)
}

//export v1_NamedContext_Context_Set
func v1_NamedContext_Context_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_v1_NamedContext(handle)
	op.Context = *ptrFromHandle_v1_Context(val)
}

//export v1_NamedContext_DeepCopyInto
func v1_NamedContext_DeepCopyInto(_handle CGoHandle, out CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedContext")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(v1.NamedContext{})).(*v1.NamedContext).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedContext(out))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(v1.NamedContext{})).(*v1.NamedContext).DeepCopyInto(ptrFromHandle_Ptr_v1_NamedContext(out))
	}
}

//export v1_NamedContext_DeepCopy
func v1_NamedContext_DeepCopy(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*v1.NamedContext")
	if __err != nil {
		return handleFromPtr_Ptr_v1_NamedContext(nil)
	}
	return handleFromPtr_Ptr_v1_NamedContext(gopyh.Embed(vifc, reflect.TypeOf(v1.NamedContext{})).(*v1.NamedContext).DeepCopy())

}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

// ---- Functions ---

//export v1_Convert_v1_ExecEnvVar_To_api_ExecEnvVar
func v1_Convert_v1_ExecEnvVar_To_api_ExecEnvVar(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_ExecEnvVar_To_api_ExecEnvVar(ptrFromHandle_Ptr_v1_ExecEnvVar(myin), ptrFromHandle_Ptr_api_ExecEnvVar(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_Preferences_To_api_Preferences
func v1_Convert_v1_Preferences_To_api_Preferences(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_Preferences_To_api_Preferences(ptrFromHandle_Ptr_v1_Preferences(myin), ptrFromHandle_Ptr_api_Preferences(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Slice_v1_NamedAuthInfo_To_Map_string_To_Pointer_api_AuthInfo
func v1_Convert_Slice_v1_NamedAuthInfo_To_Map_string_To_Pointer_api_AuthInfo(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Slice_v1_NamedAuthInfo_To_Map_string_To_Pointer_api_AuthInfo(ptrFromHandle_Ptr_Slice_v1_NamedAuthInfo(myin), ptrFromHandle_Ptr_Map_string_Ptr_api_AuthInfo(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_Cluster_To_api_Cluster
func v1_Convert_v1_Cluster_To_api_Cluster(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_Cluster_To_api_Cluster(ptrFromHandle_Ptr_v1_Cluster(myin), ptrFromHandle_Ptr_api_Cluster(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Slice_v1_NamedContext_To_Map_string_To_Pointer_api_Context
func v1_Convert_Slice_v1_NamedContext_To_Map_string_To_Pointer_api_Context(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Slice_v1_NamedContext_To_Map_string_To_Pointer_api_Context(ptrFromHandle_Ptr_Slice_v1_NamedContext(myin), ptrFromHandle_Ptr_Map_string_Ptr_api_Context(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_AuthProviderConfig_To_v1_AuthProviderConfig
func v1_Convert_api_AuthProviderConfig_To_v1_AuthProviderConfig(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_AuthProviderConfig_To_v1_AuthProviderConfig(ptrFromHandle_Ptr_api_AuthProviderConfig(myin), ptrFromHandle_Ptr_v1_AuthProviderConfig(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_Cluster_To_v1_Cluster
func v1_Convert_api_Cluster_To_v1_Cluster(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_Cluster_To_v1_Cluster(ptrFromHandle_Ptr_api_Cluster(myin), ptrFromHandle_Ptr_v1_Cluster(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_Config_To_v1_Config
func v1_Convert_api_Config_To_v1_Config(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_Config_To_v1_Config(ptrFromHandle_Ptr_api_Config(myin), ptrFromHandle_Ptr_v1_Config(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Map_string_To_Pointer_api_Cluster_To_Slice_v1_NamedCluster
func v1_Convert_Map_string_To_Pointer_api_Cluster_To_Slice_v1_NamedCluster(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Map_string_To_Pointer_api_Cluster_To_Slice_v1_NamedCluster(ptrFromHandle_Ptr_Map_string_Ptr_api_Cluster(myin), ptrFromHandle_Ptr_Slice_v1_NamedCluster(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_AuthInfo_To_v1_AuthInfo
func v1_Convert_api_AuthInfo_To_v1_AuthInfo(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_AuthInfo_To_v1_AuthInfo(ptrFromHandle_Ptr_api_AuthInfo(myin), ptrFromHandle_Ptr_v1_AuthInfo(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_ExecConfig_To_v1_ExecConfig
func v1_Convert_api_ExecConfig_To_v1_ExecConfig(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_ExecConfig_To_v1_ExecConfig(ptrFromHandle_Ptr_api_ExecConfig(myin), ptrFromHandle_Ptr_v1_ExecConfig(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_Preferences_To_v1_Preferences
func v1_Convert_api_Preferences_To_v1_Preferences(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_Preferences_To_v1_Preferences(ptrFromHandle_Ptr_api_Preferences(myin), ptrFromHandle_Ptr_v1_Preferences(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_ExecConfig_To_api_ExecConfig
func v1_Convert_v1_ExecConfig_To_api_ExecConfig(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_ExecConfig_To_api_ExecConfig(ptrFromHandle_Ptr_v1_ExecConfig(myin), ptrFromHandle_Ptr_api_ExecConfig(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_SetObjectDefaults_Config
func v1_SetObjectDefaults_Config(myin CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go v1.SetObjectDefaults_Config(ptrFromHandle_Ptr_v1_Config(myin))
	} else {
		v1.SetObjectDefaults_Config(ptrFromHandle_Ptr_v1_Config(myin))
	}
}

//export v1_Convert_Slice_v1_NamedExtension_To_Map_string_To_runtime_Object
func v1_Convert_Slice_v1_NamedExtension_To_Map_string_To_runtime_Object(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Slice_v1_NamedExtension_To_Map_string_To_runtime_Object(ptrFromHandle_Ptr_Slice_v1_NamedExtension(myin), ptrFromHandle_Ptr_Map_string_runtime_Object(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Map_string_To_Pointer_api_Context_To_Slice_v1_NamedContext
func v1_Convert_Map_string_To_Pointer_api_Context_To_Slice_v1_NamedContext(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Map_string_To_Pointer_api_Context_To_Slice_v1_NamedContext(ptrFromHandle_Ptr_Map_string_Ptr_api_Context(myin), ptrFromHandle_Ptr_Slice_v1_NamedContext(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Map_string_To_runtime_Object_To_Slice_v1_NamedExtension
func v1_Convert_Map_string_To_runtime_Object_To_Slice_v1_NamedExtension(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Map_string_To_runtime_Object_To_Slice_v1_NamedExtension(ptrFromHandle_Ptr_Map_string_runtime_Object(myin), ptrFromHandle_Ptr_Slice_v1_NamedExtension(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_AuthProviderConfig_To_api_AuthProviderConfig
func v1_Convert_v1_AuthProviderConfig_To_api_AuthProviderConfig(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_AuthProviderConfig_To_api_AuthProviderConfig(ptrFromHandle_Ptr_v1_AuthProviderConfig(myin), ptrFromHandle_Ptr_api_AuthProviderConfig(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_Config_To_api_Config
func v1_Convert_v1_Config_To_api_Config(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_Config_To_api_Config(ptrFromHandle_Ptr_v1_Config(myin), ptrFromHandle_Ptr_api_Config(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_SetDefaults_ExecConfig
func v1_SetDefaults_ExecConfig(exec CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go v1.SetDefaults_ExecConfig(ptrFromHandle_Ptr_v1_ExecConfig(exec))
	} else {
		v1.SetDefaults_ExecConfig(ptrFromHandle_Ptr_v1_ExecConfig(exec))
	}
}

//export v1_Convert_Map_string_To_Pointer_api_AuthInfo_To_Slice_v1_NamedAuthInfo
func v1_Convert_Map_string_To_Pointer_api_AuthInfo_To_Slice_v1_NamedAuthInfo(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Map_string_To_Pointer_api_AuthInfo_To_Slice_v1_NamedAuthInfo(ptrFromHandle_Ptr_Map_string_Ptr_api_AuthInfo(myin), ptrFromHandle_Ptr_Slice_v1_NamedAuthInfo(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_Slice_v1_NamedCluster_To_Map_string_To_Pointer_api_Cluster
func v1_Convert_Slice_v1_NamedCluster_To_Map_string_To_Pointer_api_Cluster(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_Slice_v1_NamedCluster_To_Map_string_To_Pointer_api_Cluster(ptrFromHandle_Ptr_Slice_v1_NamedCluster(myin), ptrFromHandle_Ptr_Map_string_Ptr_api_Cluster(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_Context_To_v1_Context
func v1_Convert_api_Context_To_v1_Context(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_Context_To_v1_Context(ptrFromHandle_Ptr_api_Context(myin), ptrFromHandle_Ptr_v1_Context(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_api_ExecEnvVar_To_v1_ExecEnvVar
func v1_Convert_api_ExecEnvVar_To_v1_ExecEnvVar(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_api_ExecEnvVar_To_v1_ExecEnvVar(ptrFromHandle_Ptr_api_ExecEnvVar(myin), ptrFromHandle_Ptr_v1_ExecEnvVar(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_RegisterConversions
func v1_RegisterConversions(s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.RegisterConversions(ptrFromHandle_Ptr_runtime_Scheme(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_RegisterDefaults
func v1_RegisterDefaults(scheme CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.RegisterDefaults(ptrFromHandle_Ptr_runtime_Scheme(scheme))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_AuthInfo_To_api_AuthInfo
func v1_Convert_v1_AuthInfo_To_api_AuthInfo(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_AuthInfo_To_api_AuthInfo(ptrFromHandle_Ptr_v1_AuthInfo(myin), ptrFromHandle_Ptr_api_AuthInfo(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export v1_Convert_v1_Context_To_api_Context
func v1_Convert_v1_Context_To_api_Context(myin CGoHandle, out CGoHandle, s CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	var __err error
	__err = v1.Convert_v1_Context_To_api_Context(ptrFromHandle_Ptr_v1_Context(myin), ptrFromHandle_Ptr_api_Context(out), ptrFromHandle_conversion_Scope(s))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}
