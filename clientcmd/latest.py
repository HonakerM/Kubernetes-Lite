
# python wrapper for package k8s.io/client-go/tools/clientcmd/api/latest within overall package clientcmd
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg k8s.io/client-go/tools/clientcmd

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _clientcmd
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from clientcmd import latest
# and then refer to everything using latest. prefix
# packages imported by this package listed below:

from . import api
from . import v1



# ---- Types ---

# Python type for slice []runtime.Object
class Slice_runtime_Object(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_clientcmd.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_clientcmd.IncRef(self.handle)
		else:
			self.handle = _clientcmd.Slice_runtime_Object_CTor()
			_clientcmd.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_runtime_Object.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_clientcmd.DecRef(self.handle)
	def __str__(self):
		s = 'latest.Slice_runtime_Object len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'latest.Slice_runtime_Object([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _clientcmd.Slice_runtime_Object_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _clientcmd.Slice_runtime_Object_len(self.handle)
				return Slice_runtime_Object(handle=_clientcmd.Slice_runtime_Object_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.runtime_Object(handle=_clientcmd.Slice_runtime_Object_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_clientcmd.Slice_runtime_Object_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_runtime_Object.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.runtime_Object(handle=_clientcmd.Slice_runtime_Object_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_clientcmd.Slice_runtime_Object_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []schema.GroupVersion
class Slice_schema_GroupVersion(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_clientcmd.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_clientcmd.IncRef(self.handle)
		else:
			self.handle = _clientcmd.Slice_schema_GroupVersion_CTor()
			_clientcmd.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_schema_GroupVersion.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_clientcmd.DecRef(self.handle)
	def __str__(self):
		s = 'latest.Slice_schema_GroupVersion len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'latest.Slice_schema_GroupVersion([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _clientcmd.Slice_schema_GroupVersion_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _clientcmd.Slice_schema_GroupVersion_len(self.handle)
				return Slice_schema_GroupVersion(handle=_clientcmd.Slice_schema_GroupVersion_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.schema_GroupVersion(handle=_clientcmd.Slice_schema_GroupVersion_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_clientcmd.Slice_schema_GroupVersion_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_schema_GroupVersion.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.schema_GroupVersion(handle=_clientcmd.Slice_schema_GroupVersion_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_clientcmd.Slice_schema_GroupVersion_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []schema.GroupVersionKind
class Slice_schema_GroupVersionKind(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_clientcmd.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_clientcmd.IncRef(self.handle)
		else:
			self.handle = _clientcmd.Slice_schema_GroupVersionKind_CTor()
			_clientcmd.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_schema_GroupVersionKind.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_clientcmd.DecRef(self.handle)
	def __str__(self):
		s = 'latest.Slice_schema_GroupVersionKind len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'latest.Slice_schema_GroupVersionKind([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _clientcmd.Slice_schema_GroupVersionKind_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _clientcmd.Slice_schema_GroupVersionKind_len(self.handle)
				return Slice_schema_GroupVersionKind(handle=_clientcmd.Slice_schema_GroupVersionKind_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.schema_GroupVersionKind(handle=_clientcmd.Slice_schema_GroupVersionKind_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_clientcmd.Slice_schema_GroupVersionKind_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_schema_GroupVersionKind.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.schema_GroupVersionKind(handle=_clientcmd.Slice_schema_GroupVersionKind_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_clientcmd.Slice_schema_GroupVersionKind_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[schema.GroupVersionKind]reflect.Type
class Map_schema_GroupVersionKind_reflect_Type(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_clientcmd.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_clientcmd.IncRef(self.handle)
		else:
			self.handle = _clientcmd.Map_schema_GroupVersionKind_reflect_Type_CTor()
			_clientcmd.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_schema_GroupVersionKind_reflect_Type.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_clientcmd.Map_schema_GroupVersionKind_reflect_Type_set(self.handle, k, v)
	def __del__(self):
		_clientcmd.DecRef(self.handle)
	def __str__(self):
		s = 'clientcmd.Map_schema_GroupVersionKind_reflect_Type len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'clientcmd.Map_schema_GroupVersionKind_reflect_Type({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _clientcmd.Map_schema_GroupVersionKind_reflect_Type_len(self.handle)
	def __getitem__(self, key):
		return go.reflect_Type(handle=_clientcmd.Map_schema_GroupVersionKind_reflect_Type_elem(self.handle, key.handle))
	def __setitem__(self, key, value):
		_clientcmd.Map_schema_GroupVersionKind_reflect_Type_set(self.handle, key.handle, value.handle)
	def __delitem__(self, key):
		return _clientcmd.Map_schema_GroupVersionKind_reflect_Type_delete(self.handle, key.handle)
	def keys(self):
		return Slice_schema_GroupVersionKind(handle=_clientcmd.Map_schema_GroupVersionKind_reflect_Type_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _clientcmd.Map_schema_GroupVersionKind_reflect_Type_contains(self.handle, key.handle)

# Python type for map map[string]reflect.Type
class Map_string_reflect_Type(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_clientcmd.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_clientcmd.IncRef(self.handle)
		else:
			self.handle = _clientcmd.Map_string_reflect_Type_CTor()
			_clientcmd.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_reflect_Type.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_clientcmd.Map_string_reflect_Type_set(self.handle, k, v)
	def __del__(self):
		_clientcmd.DecRef(self.handle)
	def __str__(self):
		s = 'clientcmd.Map_string_reflect_Type len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'clientcmd.Map_string_reflect_Type({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _clientcmd.Map_string_reflect_Type_len(self.handle)
	def __getitem__(self, key):
		return go.reflect_Type(handle=_clientcmd.Map_string_reflect_Type_elem(self.handle, key))
	def __setitem__(self, key, value):
		_clientcmd.Map_string_reflect_Type_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _clientcmd.Map_string_reflect_Type_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_clientcmd.Map_string_reflect_Type_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _clientcmd.Map_string_reflect_Type_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
OldestVersion = "v1"
"""
OldestVersion is the string that represents the oldest server version supported,
for client code that wants to hardcode the lowest common denominator.

"""
Version = "v1"
"""
Version is the string that represents the current external default version.

"""


# ---- Global Variables: can only use functions to access ---
def Codec():
	"""
	Codec Gets Go Variable: latest.Codec
	
	"""
	return go.runtime_Codec(handle=_clientcmd.latest_Codec())

def Set_Codec(value):
	"""
	Set_Codec Sets Go Variable: latest.Codec
	
	"""
	if isinstance(value, go.GoClass):
		_clientcmd.latest_Set_Codec(value.handle)
	else:
		_clientcmd.latest_Set_Codec(value)

def ExternalVersion():
	"""
	ExternalVersion Gets Go Variable: latest.ExternalVersion
	
	"""
	return go.schema_GroupVersion(handle=_clientcmd.latest_ExternalVersion())

def Set_ExternalVersion(value):
	"""
	Set_ExternalVersion Sets Go Variable: latest.ExternalVersion
	
	"""
	if isinstance(value, go.GoClass):
		_clientcmd.latest_Set_ExternalVersion(value.handle)
	else:
		_clientcmd.latest_Set_ExternalVersion(value)

def Scheme():
	"""
	Scheme Gets Go Variable: latest.Scheme
	
	"""
	return go.Ptr_runtime_Scheme(handle=_clientcmd.latest_Scheme())

def Set_Scheme(value):
	"""
	Set_Scheme Sets Go Variable: latest.Scheme
	
	"""
	if isinstance(value, go.GoClass):
		_clientcmd.latest_Set_Scheme(value.handle)
	else:
		_clientcmd.latest_Set_Scheme(value)

def Versions():
	"""
	Versions Gets Go Variable: latest.Versions
	Versions is the list of versions that are recognized in code. The order provided
	may be assumed to be least feature rich to most feature rich, and clients may
	choose to prefer the latter items in the list over the former items when presented
	with a set of versions to choose.
	
	"""
	return go.Slice_string(handle=_clientcmd.latest_Versions())

def Set_Versions(value):
	"""
	Set_Versions Sets Go Variable: latest.Versions
	Versions is the list of versions that are recognized in code. The order provided
	may be assumed to be least feature rich to most feature rich, and clients may
	choose to prefer the latter items in the list over the former items when presented
	with a set of versions to choose.
	
	"""
	if isinstance(value, go.GoClass):
		_clientcmd.latest_Set_Versions(value.handle)
	else:
		_clientcmd.latest_Set_Versions(value)



# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---


