"""
Package fake provides a fake client for testing.

A fake client is backed by its simple object store indexed by GroupVersionResource.
You can create a fake client with optional objects.

	client := NewClientBuilder().WithScheme(scheme).WithObj(initObjs...).Build()

You can invoke the methods defined in the Client interface.

When in doubt, it's almost always better not to use this package and instead use
envtest.Environment with a real client and API server.

WARNING: ⚠️ Current Limitations / Known Issues with the fake Client ⚠️
  - This client does not have a way to inject specific errors to test handled vs. unhandled errors.
  - There is some support for sub resources which can cause issues with tests if you're trying to update
    e.g. metadata and status in the same reconcile.
  - No OpenAPI validation is performed when creating or updating objects.
  - ObjectMeta's `Generation` and `ResourceVersion` don't behave properly, Patch or Update
    operations that rely on these fields will fail, or give false positives.

"""
# python wrapper for package sigs.k8s.io/controller-runtime/pkg/client/fake within overall package client
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg sigs.k8s.io/controller-runtime/pkg/client

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _client
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from client import fake
# and then refer to everything using fake. prefix
# packages imported by this package listed below:

from . import client
from . import apiutil
from . import interceptor



# ---- Types ---

# Python type for slice []client.ObjectList
class Slice_client_ObjectList(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_client.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_client.IncRef(self.handle)
		else:
			self.handle = _client.Slice_client_ObjectList_CTor()
			_client.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_client_ObjectList.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_client.DecRef(self.handle)
	def __str__(self):
		s = 'fake.Slice_client_ObjectList len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'fake.Slice_client_ObjectList([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _client.Slice_client_ObjectList_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _client.Slice_client_ObjectList_len(self.handle)
				return Slice_client_ObjectList(handle=_client.Slice_client_ObjectList_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return client.ObjectList(handle=_client.Slice_client_ObjectList_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_client.Slice_client_ObjectList_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_client_ObjectList.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = client.ObjectList(handle=_client.Slice_client_ObjectList_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_client.Slice_client_ObjectList_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct fake.ClientBuilder
class ClientBuilder(go.GoClass):
	"""ClientBuilder builds a fake client.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_client.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_client.IncRef(self.handle)
		else:
			self.handle = _client.fake_ClientBuilder_CTor()
			_client.IncRef(self.handle)
	def __del__(self):
		_client.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'fake.ClientBuilder{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'fake.ClientBuilder ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def WithScheme(self, scheme):
		"""WithScheme(object scheme) object
		
		WithScheme sets this builder's internal scheme.
		If not set, defaults to client-go's global scheme.Scheme.
		"""
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithScheme(self.handle, scheme.handle))
	def WithRESTMapper(self, restMapper):
		"""WithRESTMapper(object restMapper) object
		
		WithRESTMapper sets this builder's restMapper.
		The restMapper is directly set as mapper in the Client. This can be used for example
		with a meta.DefaultRESTMapper to provide a static rest mapping.
		If not set, defaults to an empty meta.DefaultRESTMapper.
		"""
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithRESTMapper(self.handle, restMapper.handle))
	def WithObjects(self, *args):
		"""WithObjects([]object initObjs) object
		
		WithObjects can be optionally used to initialize this fake client with client.Object(s).
		"""
		initObjs = client.Slice_client_Object(args)
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithObjects(self.handle, initObjs.handle))
	def WithLists(self, *args):
		"""WithLists([]object initLists) object
		
		WithLists can be optionally used to initialize this fake client with client.ObjectList(s).
		"""
		initLists = Slice_client_ObjectList(args)
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithLists(self.handle, initLists.handle))
	def WithRuntimeObjects(self, *args):
		"""WithRuntimeObjects([]object initRuntimeObjs) object
		
		WithRuntimeObjects can be optionally used to initialize this fake client with runtime.Object(s).
		"""
		initRuntimeObjs = client.Slice_runtime_Object(args)
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithRuntimeObjects(self.handle, initRuntimeObjs.handle))
	def WithObjectTracker(self, ot):
		"""WithObjectTracker(object ot) object
		
		WithObjectTracker can be optionally used to initialize this fake client with testing.ObjectTracker.
		"""
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithObjectTracker(self.handle, ot.handle))
	def WithStatusSubresource(self, *args):
		"""WithStatusSubresource([]object o) object
		
		WithStatusSubresource configures the passed object with a status subresource, which means
		calls to Update and Patch will not alter its status.
		"""
		o = client.Slice_client_Object(args)
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithStatusSubresource(self.handle, o.handle))
	def WithInterceptorFuncs(self, interceptorFuncs):
		"""WithInterceptorFuncs(object interceptorFuncs) object
		
		WithInterceptorFuncs configures the client methods to be intercepted using the provided interceptor.Funcs.
		"""
		return ClientBuilder(handle=_client.fake_ClientBuilder_WithInterceptorFuncs(self.handle, interceptorFuncs.handle))
	def Build(self):
		"""Build() object
		
		Build builds and returns a new fake client.
		"""
		return client.WithWatch(handle=_client.fake_ClientBuilder_Build(self.handle))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewClientBuilder():
	"""NewClientBuilder() object
	
	NewClientBuilder returns a new builder to create a fake client.
	"""
	return ClientBuilder(handle=_client.fake_NewClientBuilder())


# ---- Functions ---
def NewFakeClient(*args):
	"""NewFakeClient([]object initObjs) object
	
	NewFakeClient creates a new fake client for testing.
	You can choose to initialize it with a slice of runtime.Object.
	"""
	initObjs = client.Slice_runtime_Object(args)
	return client.WithWatch(handle=_client.fake_NewFakeClient(initObjs.handle))


