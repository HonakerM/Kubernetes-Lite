"""
Package config contains libraries for initializing REST configs for talking to the Kubernetes API

"""
# python wrapper for package sigs.k8s.io/controller-runtime/pkg/client/config within overall package client
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg sigs.k8s.io/controller-runtime/pkg/client

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _client
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from client import config
# and then refer to everything using config. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
KubeconfigFlagName = "kubeconfig"
"""
KubeconfigFlagName is the name of the kubeconfig flag

"""


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def GetConfig():
	"""GetConfig() object, str
	
	GetConfig creates a *rest.Config for talking to a Kubernetes API server.
	If --kubeconfig is set, will use the kubeconfig file at that location.  Otherwise will assume running
	in cluster and use the cluster provided kubeconfig.
	
	It also applies saner defaults for QPS and burst based on the Kubernetes
	controller manager defaults (20 QPS, 30 burst)
	
	Config precedence:
	
	* --kubeconfig flag pointing at a file
	
	* KUBECONFIG environment variable pointing at a file
	
	* In-cluster config if running in cluster
	
	* $HOME/.kube/config if exists.
	"""
	return go.Ptr_rest_Config(handle=_client.config_GetConfig())
def GetConfigOrDie():
	"""GetConfigOrDie() object
	
	GetConfigOrDie creates a *rest.Config for talking to a Kubernetes apiserver.
	If --kubeconfig is set, will use the kubeconfig file at that location.  Otherwise will assume running
	in cluster and use the cluster provided kubeconfig.
	
	Will log an error and exit if there is an error creating the rest.Config.
	"""
	return go.Ptr_rest_Config(handle=_client.config_GetConfigOrDie())
def GetConfigWithContext(context):
	"""GetConfigWithContext(str context) object, str
	
	GetConfigWithContext creates a *rest.Config for talking to a Kubernetes API server with a specific context.
	If --kubeconfig is set, will use the kubeconfig file at that location.  Otherwise will assume running
	in cluster and use the cluster provided kubeconfig.
	
	It also applies saner defaults for QPS and burst based on the Kubernetes
	controller manager defaults (20 QPS, 30 burst)
	
	Config precedence:
	
	* --kubeconfig flag pointing at a file
	
	* KUBECONFIG environment variable pointing at a file
	
	* In-cluster config if running in cluster
	
	* $HOME/.kube/config if exists.
	"""
	return go.Ptr_rest_Config(handle=_client.config_GetConfigWithContext(context))
def RegisterFlags(fs, goRun=False):
	"""RegisterFlags(object fs) 
	
	RegisterFlags registers flag variables to the given FlagSet if not already registered.
	It uses the default command line FlagSet, if none is provided. Currently, it only registers the kubeconfig flag.
	"""
	_client.config_RegisterFlags(fs.handle, goRun)


