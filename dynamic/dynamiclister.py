
# python wrapper for package k8s.io/client-go/dynamic/dynamiclister within overall package dynamic
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg k8s.io/client-go/dynamic

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _dynamic
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from dynamic import dynamiclister
# and then refer to everything using dynamiclister. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []*unstructured.Unstructured
class Slice_Ptr_unstructured_Unstructured(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_dynamic.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_dynamic.IncRef(self.handle)
		else:
			self.handle = _dynamic.Slice_Ptr_unstructured_Unstructured_CTor()
			_dynamic.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_Ptr_unstructured_Unstructured.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_dynamic.DecRef(self.handle)
	def __str__(self):
		s = 'dynamiclister.Slice_Ptr_unstructured_Unstructured len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'dynamiclister.Slice_Ptr_unstructured_Unstructured([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _dynamic.Slice_Ptr_unstructured_Unstructured_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _dynamic.Slice_Ptr_unstructured_Unstructured_len(self.handle)
				return Slice_Ptr_unstructured_Unstructured(handle=_dynamic.Slice_Ptr_unstructured_Unstructured_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_unstructured_Unstructured(handle=_dynamic.Slice_Ptr_unstructured_Unstructured_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_dynamic.Slice_Ptr_unstructured_Unstructured_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_Ptr_unstructured_Unstructured.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.Ptr_unstructured_Unstructured(handle=_dynamic.Slice_Ptr_unstructured_Unstructured_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_dynamic.Slice_Ptr_unstructured_Unstructured_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface dynamiclister.NamespaceLister
class NamespaceLister(go.GoClass):
	"""NamespaceLister helps list and get resources.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_dynamic.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_dynamic.IncRef(self.handle)
		else:
			self.handle = 0
	def Get(self, name):
		"""Get(str name) object, str"""
		return go.Ptr_unstructured_Unstructured(handle=_dynamic.dynamiclister_NamespaceLister_Get(self.handle, name))
	def List(self, selector):
		"""List(object selector) []object ret, str err"""
		return Slice_Ptr_unstructured_Unstructured(handle=_dynamic.dynamiclister_NamespaceLister_List(self.handle, selector.handle))

# Python type for interface dynamiclister.Lister
class Lister(go.GoClass):
	"""Lister helps list resources.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_dynamic.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_dynamic.IncRef(self.handle)
		else:
			self.handle = 0
	def Get(self, name):
		"""Get(str name) object, str"""
		return go.Ptr_unstructured_Unstructured(handle=_dynamic.dynamiclister_Lister_Get(self.handle, name))
	def List(self, selector):
		"""List(object selector) []object ret, str err"""
		return Slice_Ptr_unstructured_Unstructured(handle=_dynamic.dynamiclister_Lister_List(self.handle, selector.handle))
	def Namespace(self, namespace):
		"""Namespace(str namespace) object"""
		return NamespaceLister(handle=_dynamic.dynamiclister_Lister_Namespace(self.handle, namespace))


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def New(indexer, gvr):
	"""New(object indexer, object gvr) object
	
	New returns a new Lister.
	"""
	return Lister(handle=_dynamic.dynamiclister_New(indexer.handle, gvr.handle))
def NewRuntimeObjectShim(lister):
	"""NewRuntimeObjectShim(object lister) object
	
	NewRuntimeObjectShim returns a new shim for Lister.
	It wraps Lister so that it implements cache.GenericLister interface
	"""
	return go.cache_GenericLister(handle=_dynamic.dynamiclister_NewRuntimeObjectShim(lister.handle))


