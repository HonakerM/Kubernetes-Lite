
# python wrapper for package k8s.io/client-go/dynamic/dynamicinformer within overall package dynamic
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg k8s.io/client-go/dynamic

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _dynamic
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from dynamic import dynamicinformer
# and then refer to everything using dynamicinformer. prefix
# packages imported by this package listed below:

from . import dynamic
from . import dynamiclister



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface dynamicinformer.DynamicSharedInformerFactory
class DynamicSharedInformerFactory(go.GoClass):
	"""DynamicSharedInformerFactory provides access to a shared informer and lister for dynamic client\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_dynamic.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_dynamic.IncRef(self.handle)
		else:
			self.handle = 0
	def ForResource(self, gvr):
		"""ForResource(object gvr) object"""
		return go.informers_GenericInformer(handle=_dynamic.dynamicinformer_DynamicSharedInformerFactory_ForResource(self.handle, gvr.handle))
	def Shutdown(self, goRun=False):
		"""Shutdown() """
		_dynamic.dynamicinformer_DynamicSharedInformerFactory_Shutdown(self.handle, goRun)


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def NewDynamicSharedInformerFactory(client, defaultResync):
	"""NewDynamicSharedInformerFactory(object client, long defaultResync) object
	
	NewDynamicSharedInformerFactory constructs a new instance of dynamicSharedInformerFactory for all namespaces.
	"""
	return DynamicSharedInformerFactory(handle=_dynamic.dynamicinformer_NewDynamicSharedInformerFactory(client.handle, defaultResync))
def NewFilteredDynamicSharedInformerFactory(client, defaultResync, namespace, tweakListOptions):
	"""NewFilteredDynamicSharedInformerFactory(object client, long defaultResync, str namespace, callable tweakListOptions) object
	
	NewFilteredDynamicSharedInformerFactory constructs a new instance of dynamicSharedInformerFactory.
	Listers obtained via this factory will be subject to the same filters as specified here.
	"""
	return DynamicSharedInformerFactory(handle=_dynamic.dynamicinformer_NewFilteredDynamicSharedInformerFactory(client.handle, defaultResync, namespace, tweakListOptions))


