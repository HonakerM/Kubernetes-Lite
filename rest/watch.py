
# python wrapper for package k8s.io/client-go/rest/watch within overall package rest
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg k8s.io/client-go/rest

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _rest
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from rest import watch
# and then refer to everything using watch. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct s2_watch.Decoder
class Decoder(go.GoClass):
	"""Decoder implements the watch.Decoder interface for io.ReadClosers that\nhave contents which consist of a series of watchEvent objects encoded\nwith the given streaming decoder. The internal objects will be then\ndecoded by the embedded decoder.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_rest.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_rest.IncRef(self.handle)
		else:
			self.handle = _rest.s2_watch_Decoder_CTor()
			_rest.IncRef(self.handle)
	def __del__(self):
		_rest.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 's2_watch.Decoder{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 's2_watch.Decoder ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Close(self, goRun=False):
		"""Close() 
		
		Close closes the underlying r.
		"""
		_rest.s2_watch_Decoder_Close(self.handle, goRun)

# Python type for struct s2_watch.Encoder
class Encoder(go.GoClass):
	"""Encoder serializes watch.Events into io.Writer. The internal objects\nare encoded using embedded encoder, and the outer Event is serialized\nusing encoder.\nTODO: this type is only used by tests\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_rest.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_rest.IncRef(self.handle)
		else:
			self.handle = _rest.s2_watch_Encoder_CTor()
			_rest.IncRef(self.handle)
	def __del__(self):
		_rest.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 's2_watch.Encoder{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 's2_watch.Encoder ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Encode(self, event):
		"""Encode(object event) str
		
		Encode writes an event to the writer. Returns an error
		if the writer is closed or an object can't be encoded.
		"""
		return _rest.s2_watch_Encoder_Encode(self.handle, event.handle)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewDecoder(decoder, embeddedDecoder):
	"""NewDecoder(object decoder, object embeddedDecoder) object
	
	NewDecoder creates an Decoder for the given writer and codec.
	"""
	return s2_watch_Decoder(handle=_rest.watch_NewDecoder(decoder.handle, embeddedDecoder.handle))
def NewEncoder(encoder, embeddedEncoder):
	"""NewEncoder(object encoder, object embeddedEncoder) object"""
	return s2_watch_Encoder(handle=_rest.watch_NewEncoder(encoder.handle, embeddedEncoder.handle))


# ---- Functions ---


