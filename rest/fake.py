"""
This is made a separate package and should only be imported by tests, because
it imports testapi

"""
# python wrapper for package k8s.io/client-go/rest/fake within overall package rest
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg k8s.io/client-go/rest

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _rest
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from rest import fake
# and then refer to everything using fake. prefix
# packages imported by this package listed below:

from . import rest



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct fake.RESTClient
class RESTClient(go.GoClass):
	"""RESTClient provides a fake RESTClient interface. It is used to mock network\ninteractions via a rest.Request, or to make them via the provided Client to\na specific server.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_rest.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_rest.IncRef(self.handle)
		else:
			self.handle = _rest.fake_RESTClient_CTor()
			_rest.IncRef(self.handle)
			if  0 < len(args):
				self.NegotiatedSerializer = args[0]
			if "NegotiatedSerializer" in kwargs:
				self.NegotiatedSerializer = kwargs["NegotiatedSerializer"]
			if  1 < len(args):
				self.GroupVersion = args[1]
			if "GroupVersion" in kwargs:
				self.GroupVersion = kwargs["GroupVersion"]
			if  2 < len(args):
				self.VersionedAPIPath = args[2]
			if "VersionedAPIPath" in kwargs:
				self.VersionedAPIPath = kwargs["VersionedAPIPath"]
			if  4 < len(args):
				self.Req = args[4]
			if "Req" in kwargs:
				self.Req = kwargs["Req"]
			if  5 < len(args):
				self.Client = args[5]
			if "Client" in kwargs:
				self.Client = kwargs["Client"]
			if  6 < len(args):
				self.Resp = args[6]
			if "Resp" in kwargs:
				self.Resp = kwargs["Resp"]
	def __del__(self):
		_rest.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'fake.RESTClient{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'fake.RESTClient ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def NegotiatedSerializer(self):
		return go.runtime_NegotiatedSerializer(handle=_rest.fake_RESTClient_NegotiatedSerializer_Get(self.handle))
	@NegotiatedSerializer.setter
	def NegotiatedSerializer(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_NegotiatedSerializer_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def GroupVersion(self):
		return go.schema_GroupVersion(handle=_rest.fake_RESTClient_GroupVersion_Get(self.handle))
	@GroupVersion.setter
	def GroupVersion(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_GroupVersion_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def VersionedAPIPath(self):
		return _rest.fake_RESTClient_VersionedAPIPath_Get(self.handle)
	@VersionedAPIPath.setter
	def VersionedAPIPath(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_VersionedAPIPath_Set(self.handle, value.handle)
		else:
			_rest.fake_RESTClient_VersionedAPIPath_Set(self.handle, value)
	@property
	def Req(self):
		"""Req is set to the last request that was executed (had the methods Do/DoRaw) invoked.
		"""
		return go.Ptr_http_Request(handle=_rest.fake_RESTClient_Req_Get(self.handle))
	@Req.setter
	def Req(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_Req_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Client(self):
		"""If Client is specified, the client will be invoked instead of returning Resp if
		Err is not set.
		"""
		return go.Ptr_http_Client(handle=_rest.fake_RESTClient_Client_Get(self.handle))
	@Client.setter
	def Client(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_Client_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Resp(self):
		"""Resp is returned to the caller after Req is recorded, unless Err or Client are set.
		"""
		return go.Ptr_http_Response(handle=_rest.fake_RESTClient_Resp_Get(self.handle))
	@Resp.setter
	def Resp(self, value):
		if isinstance(value, go.GoClass):
			_rest.fake_RESTClient_Resp_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Get(self):
		"""Get() object"""
		return rest.Request(handle=_rest.fake_RESTClient_Get(self.handle))
	def Put(self):
		"""Put() object"""
		return rest.Request(handle=_rest.fake_RESTClient_Put(self.handle))
	def Patch(self, pt):
		"""Patch(str pt) object"""
		return rest.Request(handle=_rest.fake_RESTClient_Patch(self.handle, pt))
	def Post(self):
		"""Post() object"""
		return rest.Request(handle=_rest.fake_RESTClient_Post(self.handle))
	def Delete(self):
		"""Delete() object"""
		return rest.Request(handle=_rest.fake_RESTClient_Delete(self.handle))
	def Verb(self, verb):
		"""Verb(str verb) object"""
		return rest.Request(handle=_rest.fake_RESTClient_Verb(self.handle, verb))
	def APIVersion(self):
		"""APIVersion() object"""
		return go.schema_GroupVersion(handle=_rest.fake_RESTClient_APIVersion(self.handle))
	def GetRateLimiter(self):
		"""GetRateLimiter() object"""
		return go.flowcontrol_RateLimiter(handle=_rest.fake_RESTClient_GetRateLimiter(self.handle))
	def Request(self):
		"""Request() object"""
		return rest.Request(handle=_rest.fake_RESTClient_Request(self.handle))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---


