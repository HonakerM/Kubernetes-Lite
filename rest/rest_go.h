/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/HonakerM/python-go-kubernetes-client/rest */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "rest.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: pkix.RelativeDistinguishedNameSET ---
//
extern long long pkix_RelativeDistinguishedNameSET_CTor();
extern GoInt pkix_RelativeDistinguishedNameSET_len(long long handle);
extern long long pkix_RelativeDistinguishedNameSET_elem(long long handle, GoInt _idx);
extern long long pkix_RelativeDistinguishedNameSET_subslice(long long handle, GoInt _st, GoInt _ed);
extern void pkix_RelativeDistinguishedNameSET_set(long long handle, GoInt _idx, long long _vl);
extern void pkix_RelativeDistinguishedNameSET_append(long long handle, long long _vl);

// --- wrapping slice: asn1.ObjectIdentifier ---
//
extern long long asn1_ObjectIdentifier_CTor();
extern GoInt asn1_ObjectIdentifier_len(long long handle);
extern long long asn1_ObjectIdentifier_elem(long long handle, GoInt _idx);
extern long long asn1_ObjectIdentifier_subslice(long long handle, GoInt _st, GoInt _ed);
extern void asn1_ObjectIdentifier_set(long long handle, GoInt _idx, long long _vl);
extern void asn1_ObjectIdentifier_append(long long handle, long long _vl);

// --- wrapping slice: asn1.RawContent ---
//
extern long long asn1_RawContent_CTor();
extern GoInt asn1_RawContent_len(long long handle);
extern char asn1_RawContent_elem(long long handle, GoInt _idx);
extern long long asn1_RawContent_subslice(long long handle, GoInt _st, GoInt _ed);
extern void asn1_RawContent_set(long long handle, GoInt _idx, char _vl);
extern void asn1_RawContent_append(long long handle, char _vl);

// --- wrapping slice: net.IP ---
//
extern long long net_IP_CTor();
extern GoInt net_IP_len(long long handle);
extern char net_IP_elem(long long handle, GoInt _idx);
extern long long net_IP_subslice(long long handle, GoInt _st, GoInt _ed);
extern void net_IP_set(long long handle, GoInt _idx, char _vl);
extern void net_IP_append(long long handle, char _vl);

// --- wrapping slice: net.IPMask ---
//
extern long long net_IPMask_CTor();
extern GoInt net_IPMask_len(long long handle);
extern char net_IPMask_elem(long long handle, GoInt _idx);
extern long long net_IPMask_subslice(long long handle, GoInt _st, GoInt _ed);
extern void net_IPMask_set(long long handle, GoInt _idx, char _vl);
extern void net_IPMask_append(long long handle, char _vl);

// --- wrapping map: http.Header ---
//
extern long long http_Header_CTor();
extern GoInt http_Header_len(long long handle);
extern long long http_Header_elem(long long handle, char* _ky);
extern char http_Header_contains(long long handle, char* _ky);
extern void http_Header_set(long long handle, char* _ky, long long _vl);
extern void http_Header_delete(long long handle, char* _ky);
extern long long http_Header_keys(long long handle);

// --- wrapping map: textproto.MIMEHeader ---
//
extern long long textproto_MIMEHeader_CTor();
extern GoInt textproto_MIMEHeader_len(long long handle);
extern long long textproto_MIMEHeader_elem(long long handle, char* _ky);
extern char textproto_MIMEHeader_contains(long long handle, char* _ky);
extern void textproto_MIMEHeader_set(long long handle, char* _ky, long long _vl);
extern void textproto_MIMEHeader_delete(long long handle, char* _ky);
extern long long textproto_MIMEHeader_keys(long long handle);

// --- wrapping map: url.Values ---
//
extern long long url_Values_CTor();
extern GoInt url_Values_len(long long handle);
extern long long url_Values_elem(long long handle, char* _ky);
extern char url_Values_contains(long long handle, char* _ky);
extern void url_Values_set(long long handle, char* _ky, long long _vl);
extern void url_Values_delete(long long handle, char* _ky);
extern long long url_Values_keys(long long handle);

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: [32]byte ---
//
extern long long Array_32_byte_CTor();
extern GoInt Array_32_byte_len(long long handle);
extern char Array_32_byte_elem(long long handle, GoInt _idx);
extern void Array_32_byte_set(long long handle, GoInt _idx, char _vl);

// --- wrapping slice: []*x509.Certificate ---
//
extern long long Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Ptr_x509_Certificate_len(long long handle);
extern long long Slice_Ptr_x509_Certificate_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_x509_Certificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_x509_Certificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_x509_Certificate_append(long long handle, long long _vl);

// --- wrapping slice: []*multipart.FileHeader ---
//
extern long long Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Slice_Ptr_multipart_FileHeader_len(long long handle);
extern long long Slice_Ptr_multipart_FileHeader_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_multipart_FileHeader_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_multipart_FileHeader_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_multipart_FileHeader_append(long long handle, long long _vl);

// --- wrapping slice: []*net.IPNet ---
//
extern long long Slice_Ptr_net_IPNet_CTor();
extern GoInt Slice_Ptr_net_IPNet_len(long long handle);
extern long long Slice_Ptr_net_IPNet_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_net_IPNet_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_net_IPNet_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_net_IPNet_append(long long handle, long long _vl);

// --- wrapping slice: []*http.Cookie ---
//
extern long long Slice_Ptr_http_Cookie_CTor();
extern GoInt Slice_Ptr_http_Cookie_len(long long handle);
extern long long Slice_Ptr_http_Cookie_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_http_Cookie_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_http_Cookie_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_http_Cookie_append(long long handle, long long _vl);

// --- wrapping slice: []*url.URL ---
//
extern long long Slice_Ptr_url_URL_CTor();
extern GoInt Slice_Ptr_url_URL_len(long long handle);
extern long long Slice_Ptr_url_URL_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_url_URL_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_url_URL_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_url_URL_append(long long handle, long long _vl);

// --- wrapping slice: [][32]byte ---
//
extern long long Slice__32_byte_CTor();
extern GoInt Slice__32_byte_len(long long handle);
extern long long Slice__32_byte_elem(long long handle, GoInt _idx);
extern long long Slice__32_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice__32_byte_set(long long handle, GoInt _idx, long long _vl);
extern void Slice__32_byte_append(long long handle, long long _vl);

// --- wrapping slice: [][]*x509.Certificate ---
//
extern long long Slice_Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Slice_Ptr_x509_Certificate_len(long long handle);
extern long long Slice_Slice_Ptr_x509_Certificate_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_Ptr_x509_Certificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Ptr_x509_Certificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_Ptr_x509_Certificate_append(long long handle, long long _vl);

// --- wrapping slice: [][]byte ---
//
extern long long Slice_Slice_byte_CTor();
extern GoInt Slice_Slice_byte_len(long long handle);
extern long long Slice_Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_byte_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_byte_append(long long handle, long long _vl);

// --- wrapping slice: []tls.Certificate ---
//
extern long long Slice_tls_Certificate_CTor();
extern GoInt Slice_tls_Certificate_len(long long handle);
extern long long Slice_tls_Certificate_elem(long long handle, GoInt _idx);
extern long long Slice_tls_Certificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_tls_Certificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_tls_Certificate_append(long long handle, long long _vl);

// --- wrapping slice: []tls.CurveID ---
//
extern long long Slice_tls_CurveID_CTor();
extern GoInt Slice_tls_CurveID_len(long long handle);
extern unsigned short Slice_tls_CurveID_elem(long long handle, GoInt _idx);
extern long long Slice_tls_CurveID_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_tls_CurveID_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_tls_CurveID_append(long long handle, unsigned short _vl);

// --- wrapping slice: []tls.SignatureScheme ---
//
extern long long Slice_tls_SignatureScheme_CTor();
extern GoInt Slice_tls_SignatureScheme_len(long long handle);
extern unsigned short Slice_tls_SignatureScheme_elem(long long handle, GoInt _idx);
extern long long Slice_tls_SignatureScheme_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_tls_SignatureScheme_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_tls_SignatureScheme_append(long long handle, unsigned short _vl);

// --- wrapping slice: []x509.ExtKeyUsage ---
//
extern long long Slice_x509_ExtKeyUsage_CTor();
extern GoInt Slice_x509_ExtKeyUsage_len(long long handle);
extern long long Slice_x509_ExtKeyUsage_elem(long long handle, GoInt _idx);
extern long long Slice_x509_ExtKeyUsage_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_x509_ExtKeyUsage_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_x509_ExtKeyUsage_append(long long handle, long long _vl);

// --- wrapping slice: []x509.OID ---
//
extern long long Slice_x509_OID_CTor();
extern GoInt Slice_x509_OID_len(long long handle);
extern long long Slice_x509_OID_elem(long long handle, GoInt _idx);
extern long long Slice_x509_OID_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_x509_OID_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_x509_OID_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.AttributeTypeAndValue ---
//
extern long long Slice_pkix_AttributeTypeAndValue_CTor();
extern GoInt Slice_pkix_AttributeTypeAndValue_len(long long handle);
extern long long Slice_pkix_AttributeTypeAndValue_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_AttributeTypeAndValue_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_AttributeTypeAndValue_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_AttributeTypeAndValue_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.Extension ---
//
extern long long Slice_pkix_Extension_CTor();
extern GoInt Slice_pkix_Extension_len(long long handle);
extern long long Slice_pkix_Extension_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_Extension_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_Extension_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_Extension_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.RevokedCertificate ---
//
extern long long Slice_pkix_RevokedCertificate_CTor();
extern GoInt Slice_pkix_RevokedCertificate_len(long long handle);
extern long long Slice_pkix_RevokedCertificate_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_RevokedCertificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_RevokedCertificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_RevokedCertificate_append(long long handle, long long _vl);

// --- wrapping slice: []asn1.ObjectIdentifier ---
//
extern long long Slice_asn1_ObjectIdentifier_CTor();
extern GoInt Slice_asn1_ObjectIdentifier_len(long long handle);
extern long long Slice_asn1_ObjectIdentifier_elem(long long handle, GoInt _idx);
extern long long Slice_asn1_ObjectIdentifier_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_asn1_ObjectIdentifier_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_asn1_ObjectIdentifier_append(long long handle, long long _vl);

// --- wrapping slice: []runtime.Object ---
//
extern long long Slice_runtime_Object_CTor();
extern GoInt Slice_runtime_Object_len(long long handle);
extern long long Slice_runtime_Object_elem(long long handle, GoInt _idx);
extern long long Slice_runtime_Object_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_runtime_Object_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_runtime_Object_append(long long handle, long long _vl);

// --- wrapping slice: []runtime.SerializerInfo ---
//
extern long long Slice_runtime_SerializerInfo_CTor();
extern GoInt Slice_runtime_SerializerInfo_len(long long handle);
extern long long Slice_runtime_SerializerInfo_elem(long long handle, GoInt _idx);
extern long long Slice_runtime_SerializerInfo_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_runtime_SerializerInfo_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_runtime_SerializerInfo_append(long long handle, long long _vl);

// --- wrapping slice: []schema.GroupVersion ---
//
extern long long Slice_schema_GroupVersion_CTor();
extern GoInt Slice_schema_GroupVersion_len(long long handle);
extern long long Slice_schema_GroupVersion_elem(long long handle, GoInt _idx);
extern long long Slice_schema_GroupVersion_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_schema_GroupVersion_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_schema_GroupVersion_append(long long handle, long long _vl);

// --- wrapping slice: []schema.GroupVersionKind ---
//
extern long long Slice_schema_GroupVersionKind_CTor();
extern GoInt Slice_schema_GroupVersionKind_len(long long handle);
extern long long Slice_schema_GroupVersionKind_elem(long long handle, GoInt _idx);
extern long long Slice_schema_GroupVersionKind_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_schema_GroupVersionKind_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_schema_GroupVersionKind_append(long long handle, long long _vl);

// --- wrapping slice: []s1_net.WarningHeader ---
//
extern long long Slice_s1_net_WarningHeader_CTor();
extern GoInt Slice_s1_net_WarningHeader_len(long long handle);
extern long long Slice_s1_net_WarningHeader_elem(long long handle, GoInt _idx);
extern long long Slice_s1_net_WarningHeader_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_s1_net_WarningHeader_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_s1_net_WarningHeader_append(long long handle, long long _vl);

// --- wrapping slice: []api.ExecEnvVar ---
//
extern long long Slice_api_ExecEnvVar_CTor();
extern GoInt Slice_api_ExecEnvVar_len(long long handle);
extern long long Slice_api_ExecEnvVar_elem(long long handle, GoInt _idx);
extern long long Slice_api_ExecEnvVar_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_api_ExecEnvVar_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_api_ExecEnvVar_append(long long handle, long long _vl);

// --- wrapping slice: []big.Word ---
//
extern long long Slice_big_Word_CTor();
extern GoInt Slice_big_Word_len(long long handle);
extern unsigned long long Slice_big_Word_elem(long long handle, GoInt _idx);
extern long long Slice_big_Word_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_big_Word_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_big_Word_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []net.IP ---
//
extern long long Slice_net_IP_CTor();
extern GoInt Slice_net_IP_len(long long handle);
extern long long Slice_net_IP_elem(long long handle, GoInt _idx);
extern long long Slice_net_IP_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_net_IP_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_net_IP_append(long long handle, long long _vl);

// --- wrapping map: map[schema.GroupVersionKind]reflect.Type ---
//
extern long long Map_schema_GroupVersionKind_reflect_Type_CTor();
extern GoInt Map_schema_GroupVersionKind_reflect_Type_len(long long handle);
extern long long Map_schema_GroupVersionKind_reflect_Type_elem(long long handle, long long _ky);
extern char Map_schema_GroupVersionKind_reflect_Type_contains(long long handle, long long _ky);
extern void Map_schema_GroupVersionKind_reflect_Type_set(long long handle, long long _ky, long long _vl);
extern void Map_schema_GroupVersionKind_reflect_Type_delete(long long handle, long long _ky);
extern long long Map_schema_GroupVersionKind_reflect_Type_keys(long long handle);

// --- wrapping map: map[string]*tls.Certificate ---
//
extern long long Map_string_Ptr_tls_Certificate_CTor();
extern GoInt Map_string_Ptr_tls_Certificate_len(long long handle);
extern long long Map_string_Ptr_tls_Certificate_elem(long long handle, char* _ky);
extern char Map_string_Ptr_tls_Certificate_contains(long long handle, char* _ky);
extern void Map_string_Ptr_tls_Certificate_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Ptr_tls_Certificate_delete(long long handle, char* _ky);
extern long long Map_string_Ptr_tls_Certificate_keys(long long handle);

// --- wrapping map: map[string][]*multipart.FileHeader ---
//
extern long long Map_string_Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Map_string_Slice_Ptr_multipart_FileHeader_len(long long handle);
extern long long Map_string_Slice_Ptr_multipart_FileHeader_elem(long long handle, char* _ky);
extern char Map_string_Slice_Ptr_multipart_FileHeader_contains(long long handle, char* _ky);
extern void Map_string_Slice_Ptr_multipart_FileHeader_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Slice_Ptr_multipart_FileHeader_delete(long long handle, char* _ky);
extern long long Map_string_Slice_Ptr_multipart_FileHeader_keys(long long handle);

// --- wrapping map: map[string][]string ---
//
extern long long Map_string_Slice_string_CTor();
extern GoInt Map_string_Slice_string_len(long long handle);
extern long long Map_string_Slice_string_elem(long long handle, char* _ky);
extern char Map_string_Slice_string_contains(long long handle, char* _ky);
extern void Map_string_Slice_string_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Slice_string_delete(long long handle, char* _ky);
extern long long Map_string_Slice_string_keys(long long handle);

// --- wrapping map: map[string]bool ---
//
extern long long Map_string_bool_CTor();
extern GoInt Map_string_bool_len(long long handle);
extern char Map_string_bool_elem(long long handle, char* _ky);
extern char Map_string_bool_contains(long long handle, char* _ky);
extern void Map_string_bool_set(long long handle, char* _ky, char _vl);
extern void Map_string_bool_delete(long long handle, char* _ky);
extern long long Map_string_bool_keys(long long handle);

// --- wrapping map: map[string]reflect.Type ---
//
extern long long Map_string_reflect_Type_CTor();
extern GoInt Map_string_reflect_Type_len(long long handle);
extern long long Map_string_reflect_Type_elem(long long handle, char* _ky);
extern char Map_string_reflect_Type_contains(long long handle, char* _ky);
extern void Map_string_reflect_Type_set(long long handle, char* _ky, long long _vl);
extern void Map_string_reflect_Type_delete(long long handle, char* _ky);
extern long long Map_string_reflect_Type_keys(long long handle);

// --- wrapping map: map[string]string ---
//
extern long long Map_string_string_CTor();
extern GoInt Map_string_string_len(long long handle);
extern char* Map_string_string_elem(long long handle, char* _ky);
extern char Map_string_string_contains(long long handle, char* _ky);
extern void Map_string_string_set(long long handle, char* _ky, char* _vl);
extern void Map_string_string_delete(long long handle, char* _ky);
extern long long Map_string_string_keys(long long handle);

// ---- Global Variables: can only use functions to access ---
//
extern long long rest_NameMayNotBe();
extern void rest_Set_NameMayNotBe(long long val);
extern long long rest_NameMayNotContain();
extern void rest_Set_NameMayNotContain(long long val);
extern void rest_WarningHandler_HandleWarningHeader(long long _handle, long long code, char* agent, char* text, char goRun);
extern void rest_WithRetry_After(long long _handle, long long ctx, long long r, long long resp, char* err, char goRun);
extern char* rest_WithRetry_Before(long long _handle, long long ctx, long long r);
extern char* rest_WithRetry_WrapPreviousError(long long _handle, char* finalErr);
extern char* rest_AuthProvider_Login(long long _handle);
extern long long rest_AuthProvider_WrapTransport(long long _handle, long long arg_0);
extern char* rest_AuthProviderConfigPersister_Persist(long long _handle, long long arg_0);
extern long long rest_BackoffManager_CalculateBackoff(long long _handle, long long actualUrl);
extern void rest_BackoffManager_Sleep(long long _handle, long long d, char goRun);
extern void rest_BackoffManager_UpdateBackoff(long long _handle, long long actualUrl, char* err, long long responseCode, char goRun);
extern long long rest_HTTPClient_Do(long long _handle, long long req);
extern long long rest_Interface_APIVersion(long long _handle);
extern long long rest_Interface_Delete(long long _handle);
extern long long rest_Interface_Get(long long _handle);
extern long long rest_Interface_GetRateLimiter(long long _handle);
extern long long rest_Interface_Patch(long long _handle, char* pt);
extern long long rest_Interface_Post(long long _handle);
extern long long rest_Interface_Put(long long _handle);
extern long long rest_Interface_Verb(long long _handle, char* verb);
extern long long rest_ResponseWrapper_DoRaw(long long _handle, long long arg_0);
extern long long rest_ResponseWrapper_Stream(long long _handle, long long arg_0);

// --- wrapping struct: rest.Config ---
//
extern long long rest_Config_CTor();
extern char* rest_Config_Host_Get(long long handle);
extern void rest_Config_Host_Set(long long handle, char* val);
extern char* rest_Config_APIPath_Get(long long handle);
extern void rest_Config_APIPath_Set(long long handle, char* val);
extern char* rest_Config_Username_Get(long long handle);
extern void rest_Config_Username_Set(long long handle, char* val);
extern char* rest_Config_Password_Get(long long handle);
extern void rest_Config_Password_Set(long long handle, char* val);
extern char* rest_Config_BearerToken_Get(long long handle);
extern void rest_Config_BearerToken_Set(long long handle, char* val);
extern char* rest_Config_BearerTokenFile_Get(long long handle);
extern void rest_Config_BearerTokenFile_Set(long long handle, char* val);
extern long long rest_Config_Impersonate_Get(long long handle);
extern void rest_Config_Impersonate_Set(long long handle, long long val);
extern long long rest_Config_AuthProvider_Get(long long handle);
extern void rest_Config_AuthProvider_Set(long long handle, long long val);
extern long long rest_Config_AuthConfigPersister_Get(long long handle);
extern void rest_Config_AuthConfigPersister_Set(long long handle, long long val);
extern long long rest_Config_ExecProvider_Get(long long handle);
extern void rest_Config_ExecProvider_Set(long long handle, long long val);
extern char* rest_Config_UserAgent_Get(long long handle);
extern void rest_Config_UserAgent_Set(long long handle, char* val);
extern char rest_Config_DisableCompression_Get(long long handle);
extern void rest_Config_DisableCompression_Set(long long handle, char val);
extern long long rest_Config_Transport_Get(long long handle);
extern void rest_Config_Transport_Set(long long handle, long long val);
extern float rest_Config_QPS_Get(long long handle);
extern void rest_Config_QPS_Set(long long handle, float val);
extern long long rest_Config_Burst_Get(long long handle);
extern void rest_Config_Burst_Set(long long handle, long long val);
extern long long rest_Config_RateLimiter_Get(long long handle);
extern void rest_Config_RateLimiter_Set(long long handle, long long val);
extern long long rest_Config_WarningHandler_Get(long long handle);
extern void rest_Config_WarningHandler_Set(long long handle, long long val);
extern long long rest_Config_Timeout_Get(long long handle);
extern void rest_Config_Timeout_Set(long long handle, long long val);
extern char* rest_Config_GoString(long long _handle);
extern char* rest_Config_String(long long _handle);
extern long long rest_Config_TransportConfig(long long _handle);

// --- wrapping struct: rest.RESTClient ---
//
extern long long rest_RESTClient_CTor();
extern long long rest_RESTClient_Client_Get(long long handle);
extern void rest_RESTClient_Client_Set(long long handle, long long val);
extern long long rest_RESTClient_GetRateLimiter(long long _handle);
extern long long rest_RESTClient_Verb(long long _handle, char* verb);
extern long long rest_RESTClient_Post(long long _handle);
extern long long rest_RESTClient_Put(long long _handle);
extern long long rest_RESTClient_Patch(long long _handle, char* pt);
extern long long rest_RESTClient_Get(long long _handle);
extern long long rest_RESTClient_Delete(long long _handle);
extern long long rest_RESTClient_APIVersion(long long _handle);

// --- wrapping struct: rest.Request ---
//
extern long long rest_Request_CTor();
extern long long rest_Request_UseProtobufAsDefaultIfPreferred(long long _handle, char prefersProtobuf);
extern long long rest_Request_UseProtobufAsDefault(long long _handle);
extern long long rest_Request_Verb(long long _handle, char* verb);
extern long long rest_Request_Prefix(long long _handle, long long segments);
extern long long rest_Request_Suffix(long long _handle, long long segments);
extern long long rest_Request_Resource(long long _handle, char* resource);
extern long long rest_Request_BackOff(long long _handle, long long manager);
extern long long rest_Request_WarningHandler(long long _handle, long long handler);
extern long long rest_Request_Throttle(long long _handle, long long limiter);
extern long long rest_Request_SubResource(long long _handle, long long subresources);
extern long long rest_Request_Name(long long _handle, char* resourceName);
extern long long rest_Request_Namespace(long long _handle, char* namespace);
extern long long rest_Request_NamespaceIfScoped(long long _handle, char* namespace, char scoped);
extern long long rest_Request_AbsPath(long long _handle, long long segments);
extern long long rest_Request_RequestURI(long long _handle, char* uri);
extern long long rest_Request_Param(long long _handle, char* paramName, char* s);
extern long long rest_Request_VersionedParams(long long _handle, long long obj, long long codec);
extern long long rest_Request_SpecificallyVersionedParams(long long _handle, long long obj, long long codec, long long version);
extern long long rest_Request_SetHeader(long long _handle, char* key, long long values);
extern long long rest_Request_Timeout(long long _handle, long long d);
extern long long rest_Request_MaxRetries(long long _handle, long long maxRetries);
extern long long rest_Request_Body(long long _handle, char* obj);
extern char* rest_Request_Error(long long _handle);
extern long long rest_Request_URL(long long _handle);
extern long long rest_Request_Watch(long long _handle, long long ctx);
extern long long rest_Request_WatchList(long long _handle, long long ctx);
extern long long rest_Request_Stream(long long _handle, long long ctx);
extern long long rest_Request_Do(long long _handle, long long ctx);
extern long long rest_Request_DoRaw(long long _handle, long long ctx);

// --- wrapping struct: rest.RequestConstructionError ---
//
extern long long rest_RequestConstructionError_CTor();
extern char* rest_RequestConstructionError_Error(long long _handle);

// --- wrapping struct: rest.Result ---
//
extern long long rest_Result_CTor();
extern long long rest_Result_Raw(long long _handle);
extern long long rest_Result_Get(long long _handle);
extern char* rest_Result_Into(long long _handle, long long obj);
extern char* rest_Result_Error(long long _handle);
extern long long rest_Result_Warnings(long long _handle);

// --- wrapping struct: rest.WarningWriterOptions ---
//
extern long long rest_WarningWriterOptions_CTor();
extern char rest_WarningWriterOptions_Deduplicate_Get(long long handle);
extern void rest_WarningWriterOptions_Deduplicate_Set(long long handle, char val);
extern char rest_WarningWriterOptions_Color_Get(long long handle);
extern void rest_WarningWriterOptions_Color_Set(long long handle, char val);

// --- wrapping struct: rest.NoWarnings ---
//
extern long long rest_NoWarnings_CTor();
extern void rest_NoWarnings_HandleWarningHeader(long long _handle, long long code, char* agent, char* message, char goRun);

// --- wrapping struct: rest.TLSClientConfig ---
//
extern long long rest_TLSClientConfig_CTor();
extern char rest_TLSClientConfig_Insecure_Get(long long handle);
extern void rest_TLSClientConfig_Insecure_Set(long long handle, char val);
extern char* rest_TLSClientConfig_ServerName_Get(long long handle);
extern void rest_TLSClientConfig_ServerName_Set(long long handle, char* val);
extern char* rest_TLSClientConfig_CertFile_Get(long long handle);
extern void rest_TLSClientConfig_CertFile_Set(long long handle, char* val);
extern char* rest_TLSClientConfig_KeyFile_Get(long long handle);
extern void rest_TLSClientConfig_KeyFile_Set(long long handle, char* val);
extern char* rest_TLSClientConfig_CAFile_Get(long long handle);
extern void rest_TLSClientConfig_CAFile_Set(long long handle, char* val);
extern long long rest_TLSClientConfig_CertData_Get(long long handle);
extern void rest_TLSClientConfig_CertData_Set(long long handle, long long val);
extern long long rest_TLSClientConfig_KeyData_Get(long long handle);
extern void rest_TLSClientConfig_KeyData_Set(long long handle, long long val);
extern long long rest_TLSClientConfig_CAData_Get(long long handle);
extern void rest_TLSClientConfig_CAData_Set(long long handle, long long val);
extern long long rest_TLSClientConfig_NextProtos_Get(long long handle);
extern void rest_TLSClientConfig_NextProtos_Set(long long handle, long long val);
extern char* rest_TLSClientConfig_GoString(long long _handle);
extern char* rest_TLSClientConfig_String(long long _handle);
extern void rest_TLSClientConfig_DeepCopyInto(long long _handle, long long out, char goRun);
extern long long rest_TLSClientConfig_DeepCopy(long long _handle);

// --- wrapping struct: rest.ContentConfig ---
//
extern long long rest_ContentConfig_CTor();
extern char* rest_ContentConfig_AcceptContentTypes_Get(long long handle);
extern void rest_ContentConfig_AcceptContentTypes_Set(long long handle, char* val);
extern char* rest_ContentConfig_ContentType_Get(long long handle);
extern void rest_ContentConfig_ContentType_Set(long long handle, char* val);
extern long long rest_ContentConfig_GroupVersion_Get(long long handle);
extern void rest_ContentConfig_GroupVersion_Set(long long handle, long long val);
extern long long rest_ContentConfig_NegotiatedSerializer_Get(long long handle);
extern void rest_ContentConfig_NegotiatedSerializer_Set(long long handle, long long val);

// --- wrapping struct: rest.NoBackoff ---
//
extern long long rest_NoBackoff_CTor();
extern void rest_NoBackoff_UpdateBackoff(long long _handle, long long actualUrl, char* err, long long responseCode, char goRun);
extern long long rest_NoBackoff_CalculateBackoff(long long _handle, long long actualUrl);
extern void rest_NoBackoff_Sleep(long long _handle, long long d, char goRun);

// --- wrapping struct: rest.URLBackoff ---
//
extern long long rest_URLBackoff_CTor();
extern long long rest_URLBackoff_Backoff_Get(long long handle);
extern void rest_URLBackoff_Backoff_Set(long long handle, long long val);
extern void rest_URLBackoff_Disable(long long _handle, char goRun);
extern void rest_URLBackoff_UpdateBackoff(long long _handle, long long actualUrl, char* err, long long responseCode, char goRun);
extern long long rest_URLBackoff_CalculateBackoff(long long _handle, long long actualUrl);
extern void rest_URLBackoff_Sleep(long long _handle, long long d, char goRun);

// --- wrapping struct: rest.WatchListResult ---
//
extern long long rest_WatchListResult_CTor();
extern char* rest_WatchListResult_Into(long long _handle, long long obj);

// --- wrapping struct: rest.ClientContentConfig ---
//
extern long long rest_ClientContentConfig_CTor();
extern char* rest_ClientContentConfig_AcceptContentTypes_Get(long long handle);
extern void rest_ClientContentConfig_AcceptContentTypes_Set(long long handle, char* val);
extern char* rest_ClientContentConfig_ContentType_Get(long long handle);
extern void rest_ClientContentConfig_ContentType_Set(long long handle, char* val);
extern long long rest_ClientContentConfig_GroupVersion_Get(long long handle);
extern void rest_ClientContentConfig_GroupVersion_Set(long long handle, long long val);
extern long long rest_ClientContentConfig_Negotiator_Get(long long handle);
extern void rest_ClientContentConfig_Negotiator_Set(long long handle, long long val);

// --- wrapping struct: rest.ImpersonationConfig ---
//
extern long long rest_ImpersonationConfig_CTor();
extern char* rest_ImpersonationConfig_UserName_Get(long long handle);
extern void rest_ImpersonationConfig_UserName_Set(long long handle, char* val);
extern char* rest_ImpersonationConfig_UID_Get(long long handle);
extern void rest_ImpersonationConfig_UID_Set(long long handle, char* val);
extern long long rest_ImpersonationConfig_Groups_Get(long long handle);
extern void rest_ImpersonationConfig_Groups_Set(long long handle, long long val);
extern long long rest_ImpersonationConfig_Extra_Get(long long handle);
extern void rest_ImpersonationConfig_Extra_Set(long long handle, long long val);

// --- wrapping struct: rest.RetryAfter ---
//
extern long long rest_RetryAfter_CTor();
extern long long rest_RetryAfter_Wait_Get(long long handle);
extern void rest_RetryAfter_Wait_Set(long long handle, long long val);
extern long long rest_RetryAfter_Attempt_Get(long long handle);
extern void rest_RetryAfter_Attempt_Set(long long handle, long long val);
extern char* rest_RetryAfter_Reason_Get(long long handle);
extern void rest_RetryAfter_Reason_Set(long long handle, char* val);

// --- wrapping struct: rest.WarningLogger ---
//
extern long long rest_WarningLogger_CTor();
extern void rest_WarningLogger_HandleWarningHeader(long long _handle, long long code, char* agent, char* message, char goRun);
extern long long rest_AddUserAgent(long long config, char* userAgent);
extern long long rest_AnonymousClientConfig(long long config);
extern long long rest_InClusterConfig();
extern long long rest_CopyConfig(long long config);
extern long long rest_ExecClusterToConfig(long long cluster);
extern long long rest_UnversionedRESTClientForConfigAndClient(long long config, long long httpClient);
extern long long rest_NewRESTClient(long long baseURL, char* versionedAPIPath, long long config, long long rateLimiter, long long client);
extern long long rest_UnversionedRESTClientFor(long long config);
extern long long rest_RESTClientFor(long long config);
extern long long rest_RESTClientForConfigAndClient(long long config, long long httpClient);
extern long long rest_NewRequest(long long c);
extern long long rest_NewRequestWithClient(long long base, char* versionedAPIPath, long long content, long long client);
extern long long rest_GetAuthProvider(char* clusterAddress, long long apc, long long persister);
extern long long rest_IsValidPathSegmentName(char* name);
extern char* rest_DefaultVersionedAPIPath(char* apiPath, long long groupVersion);
extern long long rest_ConfigToExecCluster(long long config);
extern char* rest_DefaultKubernetesUserAgent();
extern long long rest_CodecFactoryForGeneratedClient(long long scheme, long long codecs);
extern char* rest_LoadTLSFiles(long long c);
extern char* rest_SetKubernetesDefaults(long long config);
extern void rest_SetDefaultWarningHandler(long long l, char goRun);
extern long long rest_TransportFor(long long config);
extern long long rest_TLSConfigFor(long long config);
extern long long rest_HTTPClientFor(long long config);
extern long long rest_HTTPWrappersForConfig(long long config, long long rt);
extern long long rest_ValidatePathSegmentName(char* name, char prefix);
extern long long rest_IsValidPathSegmentPrefix(char* name);
extern char rest_IsConfigTransportTLS(long long config);

// --- wrapping struct: fake.RESTClient ---
//
extern long long fake_RESTClient_CTor();
extern long long fake_RESTClient_NegotiatedSerializer_Get(long long handle);
extern void fake_RESTClient_NegotiatedSerializer_Set(long long handle, long long val);
extern long long fake_RESTClient_GroupVersion_Get(long long handle);
extern void fake_RESTClient_GroupVersion_Set(long long handle, long long val);
extern char* fake_RESTClient_VersionedAPIPath_Get(long long handle);
extern void fake_RESTClient_VersionedAPIPath_Set(long long handle, char* val);
extern long long fake_RESTClient_Req_Get(long long handle);
extern void fake_RESTClient_Req_Set(long long handle, long long val);
extern long long fake_RESTClient_Client_Get(long long handle);
extern void fake_RESTClient_Client_Set(long long handle, long long val);
extern long long fake_RESTClient_Resp_Get(long long handle);
extern void fake_RESTClient_Resp_Set(long long handle, long long val);
extern long long fake_RESTClient_Get(long long _handle);
extern long long fake_RESTClient_Put(long long _handle);
extern long long fake_RESTClient_Patch(long long _handle, char* pt);
extern long long fake_RESTClient_Post(long long _handle);
extern long long fake_RESTClient_Delete(long long _handle);
extern long long fake_RESTClient_Verb(long long _handle, char* verb);
extern long long fake_RESTClient_APIVersion(long long _handle);
extern long long fake_RESTClient_GetRateLimiter(long long _handle);
extern long long fake_RESTClient_Request(long long _handle);

// --- wrapping struct: s2_watch.Decoder ---
//
extern long long s2_watch_Decoder_CTor();
extern void s2_watch_Decoder_Close(long long _handle, char goRun);

// --- wrapping struct: s2_watch.Encoder ---
//
extern long long s2_watch_Encoder_CTor();
extern char* s2_watch_Encoder_Encode(long long _handle, long long event);
extern long long watch_NewDecoder(long long decoder, long long embeddedDecoder);
extern long long watch_NewEncoder(long long encoder, long long embeddedEncoder);

#ifdef __cplusplus
}
#endif
